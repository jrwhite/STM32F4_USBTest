
usbtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005838  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080059c0  080059c0  000159c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005a00  08005a00  00015a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005a08  08005a08  00015a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005a0c  08005a0c  00015a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000110  20000000  08005a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
  8 .bss          00000888  20000110  20000110  00020110  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000998  20000998  00020110  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002b3c7  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005591  00000000  00000000  0004b507  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000bbdd  00000000  00000000  00050a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  0005c678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  0005d2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008336  00000000  00000000  0005e290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006582  00000000  00000000  000665c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0006cb48  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002318  00000000  00000000  0006cbc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080059a8 	.word	0x080059a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	080059a8 	.word	0x080059a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f8a8 	bl	8000644 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000504:	f000 f85e 	bl	80005c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	200000a8 	.word	0x200000a8
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f82f 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f004 ff1d 	bl	8005386 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	2000013c 	.word	0x2000013c
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	2000013c 	.word	0x2000013c

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005b0:	0200      	lsls	r0, r0, #8
 80005b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	68dc      	ldr	r4, [r3, #12]
 80005ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	bf28      	it	cs
 80005d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 0501 	mov.w	r5, #1
 80005e0:	fa05 f303 	lsl.w	r3, r5, r3
 80005e4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	bf8c      	ite	hi
 80005ea:	3c03      	subhi	r4, #3
 80005ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ee:	4019      	ands	r1, r3
 80005f0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f2:	fa05 f404 	lsl.w	r4, r5, r4
 80005f6:	3c01      	subs	r4, #1
 80005f8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	ea42 0201 	orr.w	r2, r2, r1
 8000600:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfaf      	iteee	ge
 8000606:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	f000 000f 	andlt.w	r0, r0, #15
 800060e:	4b06      	ldrlt	r3, [pc, #24]	; (8000628 <HAL_NVIC_SetPriority+0x64>)
 8000610:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	bfa5      	ittet	ge
 8000614:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000618:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800062c:	0942      	lsrs	r2, r0, #5
 800062e:	2301      	movs	r3, #1
 8000630:	f000 001f 	and.w	r0, r0, #31
 8000634:	fa03 f000 	lsl.w	r0, r3, r0
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <HAL_NVIC_EnableIRQ+0x14>)
 800063a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100

08000644 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	3801      	subs	r0, #1
 8000646:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064a:	d20a      	bcs.n	8000662 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	21f0      	movs	r1, #240	; 0xf0
 8000654:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000662:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e010 	.word	0xe000e010
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000672:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000674:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000676:	bf0c      	ite	eq
 8000678:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800067c:	f022 0204 	bicne.w	r2, r2, #4
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	4770      	bx	lr
 8000684:	e000e010 	.word	0xe000e010

08000688 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000688:	4770      	bx	lr

0800068a <HAL_SYSTICK_IRQHandler>:
{
 800068a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800068c:	f7ff fffc 	bl	8000688 <HAL_SYSTICK_Callback>
 8000690:	bd08      	pop	{r3, pc}
	...

08000694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000698:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800084c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006a0:	4a68      	ldr	r2, [pc, #416]	; (8000844 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006a2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000850 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006a8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006aa:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ae:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006b0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006b8:	45b6      	cmp	lr, r6
 80006ba:	f040 80ae 	bne.w	800081a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006be:	684c      	ldr	r4, [r1, #4]
 80006c0:	f024 0710 	bic.w	r7, r4, #16
 80006c4:	2f02      	cmp	r7, #2
 80006c6:	d116      	bne.n	80006f6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006c8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006cc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006d0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006d4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006d8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006dc:	f04f 0c0f 	mov.w	ip, #15
 80006e0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006e4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006e8:	690d      	ldr	r5, [r1, #16]
 80006ea:	fa05 f50b 	lsl.w	r5, r5, fp
 80006ee:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006f2:	f8ca 5020 	str.w	r5, [sl, #32]
 80006f6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006fa:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006fc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000700:	fa05 f50a 	lsl.w	r5, r5, sl
 8000704:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000706:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800070a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800070e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000712:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000714:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000718:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800071a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800071e:	d811      	bhi.n	8000744 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000720:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000722:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000726:	68cf      	ldr	r7, [r1, #12]
 8000728:	fa07 fc0a 	lsl.w	ip, r7, sl
 800072c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000730:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000732:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000734:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000738:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800073c:	409f      	lsls	r7, r3
 800073e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000742:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000744:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000746:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000748:	688f      	ldr	r7, [r1, #8]
 800074a:	fa07 f70a 	lsl.w	r7, r7, sl
 800074e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000750:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000752:	00e5      	lsls	r5, r4, #3
 8000754:	d561      	bpl.n	800081a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	f04f 0b00 	mov.w	fp, #0
 800075a:	f8cd b00c 	str.w	fp, [sp, #12]
 800075e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000762:	4d39      	ldr	r5, [pc, #228]	; (8000848 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000764:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000768:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800076c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000770:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000774:	9703      	str	r7, [sp, #12]
 8000776:	9f03      	ldr	r7, [sp, #12]
 8000778:	f023 0703 	bic.w	r7, r3, #3
 800077c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000780:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000784:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000788:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000790:	f04f 0e0f 	mov.w	lr, #15
 8000794:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000798:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800079a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079e:	d043      	beq.n	8000828 <HAL_GPIO_Init+0x194>
 80007a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a4:	42a8      	cmp	r0, r5
 80007a6:	d041      	beq.n	800082c <HAL_GPIO_Init+0x198>
 80007a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ac:	42a8      	cmp	r0, r5
 80007ae:	d03f      	beq.n	8000830 <HAL_GPIO_Init+0x19c>
 80007b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b4:	42a8      	cmp	r0, r5
 80007b6:	d03d      	beq.n	8000834 <HAL_GPIO_Init+0x1a0>
 80007b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007bc:	42a8      	cmp	r0, r5
 80007be:	d03b      	beq.n	8000838 <HAL_GPIO_Init+0x1a4>
 80007c0:	4548      	cmp	r0, r9
 80007c2:	d03b      	beq.n	800083c <HAL_GPIO_Init+0x1a8>
 80007c4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007c8:	42a8      	cmp	r0, r5
 80007ca:	d039      	beq.n	8000840 <HAL_GPIO_Init+0x1ac>
 80007cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d0:	42a8      	cmp	r0, r5
 80007d2:	bf14      	ite	ne
 80007d4:	2508      	movne	r5, #8
 80007d6:	2507      	moveq	r5, #7
 80007d8:	fa05 f50c 	lsl.w	r5, r5, ip
 80007dc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007e0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007e2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007e4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007e6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007ea:	bf0c      	ite	eq
 80007ec:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ee:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007f0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007f2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007f4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007f8:	bf0c      	ite	eq
 80007fa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007fc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007fe:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000800:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000802:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000806:	bf0c      	ite	eq
 8000808:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800080a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800080c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800080e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000810:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000812:	bf54      	ite	pl
 8000814:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000816:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000818:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081a:	3301      	adds	r3, #1
 800081c:	2b10      	cmp	r3, #16
 800081e:	f47f af44 	bne.w	80006aa <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000822:	b005      	add	sp, #20
 8000824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000828:	465d      	mov	r5, fp
 800082a:	e7d5      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 800082c:	2501      	movs	r5, #1
 800082e:	e7d3      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000830:	2502      	movs	r5, #2
 8000832:	e7d1      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000834:	2503      	movs	r5, #3
 8000836:	e7cf      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000838:	2504      	movs	r5, #4
 800083a:	e7cd      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 800083c:	2505      	movs	r5, #5
 800083e:	e7cb      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000840:	2506      	movs	r5, #6
 8000842:	e7c9      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000844:	40013c00 	.word	0x40013c00
 8000848:	40020000 	.word	0x40020000
 800084c:	40023800 	.word	0x40023800
 8000850:	40021400 	.word	0x40021400

08000854 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000854:	b10a      	cbz	r2, 800085a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000856:	6181      	str	r1, [r0, #24]
 8000858:	4770      	bx	lr
 800085a:	0409      	lsls	r1, r1, #16
 800085c:	e7fb      	b.n	8000856 <HAL_GPIO_WritePin+0x2>

0800085e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800085e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000862:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd); 
 8000864:	f890 0290 	ldrb.w	r0, [r0, #656]	; 0x290
{
 8000868:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 800086c:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8000870:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd); 
 8000874:	2801      	cmp	r0, #1
 8000876:	d021      	beq.n	80008bc <HAL_HCD_HC_Init+0x5e>
 8000878:	2001      	movs	r0, #1
 800087a:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 800087e:	2028      	movs	r0, #40	; 0x28
 8000880:	fb00 4001 	mla	r0, r0, r1, r4
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8000884:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8000888:	09d5      	lsrs	r5, r2, #7
  hhcd->hc[ch_num].dev_addr = dev_address;
 800088a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 800088e:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8000892:	f880 703f 	strb.w	r7, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8000896:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 800089a:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 800089e:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 80008a2:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40
  
  status =  USB_HC_Init(hhcd->Instance, 
 80008a6:	e88d 40c0 	stmia.w	sp, {r6, r7, lr}
 80008aa:	6820      	ldr	r0, [r4, #0]
 80008ac:	f001 f806 	bl	80018bc <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 80008b0:	2300      	movs	r3, #0
 80008b2:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  
  return status;
}
 80008b6:	b004      	add	sp, #16
 80008b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hhcd); 
 80008bc:	2002      	movs	r0, #2
 80008be:	e7fa      	b.n	80008b6 <HAL_HCD_HC_Init+0x58>

080008c0 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 80008c0:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 80008c4:	2b01      	cmp	r3, #1
{
 80008c6:	b510      	push	{r4, lr}
 80008c8:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);   
 80008ca:	d009      	beq.n	80008e0 <HAL_HCD_HC_Halt+0x20>
 80008cc:	2301      	movs	r3, #1
 80008ce:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 80008d2:	6800      	ldr	r0, [r0, #0]
 80008d4:	f001 f9ab 	bl	8001c2e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80008d8:	2000      	movs	r0, #0
 80008da:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  return status;
 80008de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);   
 80008e0:	2002      	movs	r0, #2
}
 80008e2:	bd10      	pop	{r4, pc}

080008e4 <HAL_HCD_Init>:
{ 
 80008e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 80008e8:	4607      	mov	r7, r0
{ 
 80008ea:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 80008ec:	b3a0      	cbz	r0, 8000958 <HAL_HCD_Init+0x74>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80008ee:	2303      	movs	r3, #3
  __HAL_HCD_DISABLE(hhcd);
 80008f0:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 80008f2:	f880 3291 	strb.w	r3, [r0, #657]	; 0x291
  HAL_HCD_MspInit(hhcd);
 80008f6:	f004 fdef 	bl	80054d8 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 80008fa:	f854 0b10 	ldr.w	r0, [r4], #16
 80008fe:	f000 fe87 	bl	8001610 <USB_DisableGlobalInt>
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000904:	466d      	mov	r5, sp
 8000906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800090a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800090c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000910:	e885 0003 	stmia.w	r5, {r0, r1}
 8000914:	f107 0804 	add.w	r8, r7, #4
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8000918:	463e      	mov	r6, r7
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 800091a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800091e:	6838      	ldr	r0, [r7, #0]
 8000920:	f000 fe36 	bl	8001590 <USB_CoreInit>
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8000924:	f856 0b10 	ldr.w	r0, [r6], #16
 8000928:	2101      	movs	r1, #1
 800092a:	f000 fe77 	bl	800161c <USB_SetCurrentMode>
  USB_HostInit(hhcd->Instance, hhcd->Init);
 800092e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000930:	466d      	mov	r5, sp
 8000932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000934:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000938:	e894 0003 	ldmia.w	r4, {r0, r1}
 800093c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000940:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000944:	6838      	ldr	r0, [r7, #0]
 8000946:	f000 fee5 	bl	8001714 <USB_HostInit>
  hhcd->State= HAL_HCD_STATE_READY;
 800094a:	2301      	movs	r3, #1
 800094c:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
  return HAL_OK;
 8000950:	2000      	movs	r0, #0
}
 8000952:	b00a      	add	sp, #40	; 0x28
 8000954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000958:	2001      	movs	r0, #1
 800095a:	e7fa      	b.n	8000952 <HAL_HCD_Init+0x6e>

0800095c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 800095c:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 800095e:	2628      	movs	r6, #40	; 0x28
 8000960:	fb06 0601 	mla	r6, r6, r1, r0
{
 8000964:	f89d e014 	ldrb.w	lr, [sp, #20]
 8000968:	9d06      	ldr	r5, [sp, #24]
 800096a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 800096e:	f89d 7020 	ldrb.w	r7, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000972:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type; 
 8000976:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
  
  if(token == 0)
 800097a:	f1be 0f00 	cmp.w	lr, #0
 800097e:	d10e      	bne.n	800099e <HAL_HCD_HC_SubmitRequest+0x42>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000980:	f04f 0e03 	mov.w	lr, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 8000984:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000986:	f886 e042 	strb.w	lr, [r6, #66]	; 0x42
  switch(ep_type)
 800098a:	d04a      	beq.n	8000a22 <HAL_HCD_HC_SubmitRequest+0xc6>
 800098c:	4573      	cmp	r3, lr
 800098e:	d055      	beq.n	8000a3c <HAL_HCD_HC_SubmitRequest+0xe0>
 8000990:	2b01      	cmp	r3, #1
 8000992:	d12f      	bne.n	80009f4 <HAL_HCD_HC_SubmitRequest+0x98>
      }
    }
    break;
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000994:	2328      	movs	r3, #40	; 0x28
 8000996:	fb03 0301 	mla	r3, r3, r1, r0
 800099a:	2200      	movs	r2, #0
 800099c:	e055      	b.n	8000a4a <HAL_HCD_HC_SubmitRequest+0xee>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800099e:	f04f 0c02 	mov.w	ip, #2
 80009a2:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch(ep_type)
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d824      	bhi.n	80009f4 <HAL_HCD_HC_SubmitRequest+0x98>
 80009aa:	a601      	add	r6, pc, #4	; (adr r6, 80009b0 <HAL_HCD_HC_SubmitRequest+0x54>)
 80009ac:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 80009b0:	080009c1 	.word	0x080009c1
 80009b4:	08000995 	.word	0x08000995
 80009b8:	08000a23 	.word	0x08000a23
 80009bc:	08000a3d 	.word	0x08000a3d
    if((token == 1) && (direction == 0)) /*send data */
 80009c0:	f1be 0f01 	cmp.w	lr, #1
 80009c4:	d116      	bne.n	80009f4 <HAL_HCD_HC_SubmitRequest+0x98>
 80009c6:	b9aa      	cbnz	r2, 80009f4 <HAL_HCD_HC_SubmitRequest+0x98>
      if (length == 0)
 80009c8:	b924      	cbnz	r4, 80009d4 <HAL_HCD_HC_SubmitRequest+0x78>
        hhcd->hc[ch_num].toggle_out = 1;
 80009ca:	2328      	movs	r3, #40	; 0x28
 80009cc:	fb03 0301 	mla	r3, r3, r1, r0
 80009d0:	f883 e051 	strb.w	lr, [r3, #81]	; 0x51
      if (hhcd->hc[ch_num].toggle_out == 0)
 80009d4:	2328      	movs	r3, #40	; 0x28
 80009d6:	fb03 0201 	mla	r2, r3, r1, r0
 80009da:	f892 6051 	ldrb.w	r6, [r2, #81]	; 0x51
 80009de:	b9f6      	cbnz	r6, 8000a1e <HAL_HCD_HC_SubmitRequest+0xc2>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80009e0:	f882 6042 	strb.w	r6, [r2, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 80009e4:	fb03 0301 	mla	r3, r3, r1, r0
 80009e8:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80009ec:	2a02      	cmp	r2, #2
 80009ee:	d001      	beq.n	80009f4 <HAL_HCD_HC_SubmitRequest+0x98>
        hhcd->hc[ch_num].do_ping = do_ping;
 80009f0:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    break;  
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80009f4:	2628      	movs	r6, #40	; 0x28
 80009f6:	fb06 0301 	mla	r3, r6, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 80009fa:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0;
  hhcd->hc[ch_num].ch_num = ch_num;
 80009fc:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000a00:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000a02:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8000a04:	649c      	str	r4, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8000a06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0;
 8000a0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8000a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000a10:	3138      	adds	r1, #56	; 0x38
 8000a12:	7c02      	ldrb	r2, [r0, #16]
 8000a14:	6800      	ldr	r0, [r0, #0]
}
 8000a16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8000a1a:	f000 bfbb 	b.w	8001994 <USB_HC_StartXfer>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000a1e:	2602      	movs	r6, #2
 8000a20:	e7de      	b.n	80009e0 <HAL_HCD_HC_SubmitRequest+0x84>
 8000a22:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000a24:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8000a28:	b992      	cbnz	r2, 8000a50 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000a2a:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8000a2e:	b91e      	cbnz	r6, 8000a38 <HAL_HCD_HC_SubmitRequest+0xdc>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8000a34:	2328      	movs	r3, #40	; 0x28
 8000a36:	e7d5      	b.n	80009e4 <HAL_HCD_HC_SubmitRequest+0x88>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000a38:	2202      	movs	r2, #2
 8000a3a:	e7f9      	b.n	8000a30 <HAL_HCD_HC_SubmitRequest+0xd4>
 8000a3c:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000a3e:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8000a42:	b92a      	cbnz	r2, 8000a50 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8000a44:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8000a48:	b936      	cbnz	r6, 8000a58 <HAL_HCD_HC_SubmitRequest+0xfc>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;  
 8000a4e:	e7d1      	b.n	80009f4 <HAL_HCD_HC_SubmitRequest+0x98>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8000a50:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	d0f8      	beq.n	8000a4a <HAL_HCD_HC_SubmitRequest+0xee>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000a58:	2202      	movs	r2, #2
 8000a5a:	e7f6      	b.n	8000a4a <HAL_HCD_HC_SubmitRequest+0xee>

08000a5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000a60:	6806      	ldr	r6, [r0, #0]
{
 8000a62:	b087      	sub	sp, #28
 8000a64:	4604      	mov	r4, r0
  uint32_t i = 0U , interrupt = 0U;
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000a66:	4630      	mov	r0, r6
 8000a68:	f000 fe38 	bl	80016dc <USB_GetMode>
 8000a6c:	2801      	cmp	r0, #1
 8000a6e:	f040 80ec 	bne.w	8000c4a <HAL_HCD_IRQHandler+0x1ee>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8000a72:	6820      	ldr	r0, [r4, #0]
 8000a74:	f000 fe2e 	bl	80016d4 <USB_ReadInterrupts>
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	f000 80e6 	beq.w	8000c4a <HAL_HCD_IRQHandler+0x1ee>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000a7e:	6820      	ldr	r0, [r4, #0]
 8000a80:	f000 fe28 	bl	80016d4 <USB_ReadInterrupts>
 8000a84:	0281      	lsls	r1, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000a86:	bf48      	it	mi
 8000a88:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000a8a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000a8c:	bf44      	itt	mi
 8000a8e:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8000a92:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000a94:	f000 fe1e 	bl	80016d4 <USB_ReadInterrupts>
 8000a98:	02c2      	lsls	r2, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000a9a:	bf48      	it	mi
 8000a9c:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000a9e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000aa0:	bf44      	itt	mi
 8000aa2:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8000aa6:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000aa8:	f000 fe14 	bl	80016d4 <USB_ReadInterrupts>
 8000aac:	0143      	lsls	r3, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000aae:	bf48      	it	mi
 8000ab0:	6823      	ldrmi	r3, [r4, #0]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000ab2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000ab4:	bf44      	itt	mi
 8000ab6:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8000aba:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000abc:	f000 fe0a 	bl	80016d4 <USB_ReadInterrupts>
 8000ac0:	0787      	lsls	r7, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000ac2:	bf48      	it	mi
 8000ac4:	6823      	ldrmi	r3, [r4, #0]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000ac6:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000ac8:	bf44      	itt	mi
 8000aca:	2202      	movmi	r2, #2
 8000acc:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000ace:	f000 fe01 	bl	80016d4 <USB_ReadInterrupts>
 8000ad2:	0085      	lsls	r5, r0, #2
 8000ad4:	d510      	bpl.n	8000af8 <HAL_HCD_IRQHandler+0x9c>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000ad6:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8000ada:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000ade:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	f004 fd3a 	bl	800555c <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8000ae8:	2101      	movs	r1, #1
 8000aea:	6820      	ldr	r0, [r4, #0]
 8000aec:	f000 fe84 	bl	80017f8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000af0:	6823      	ldr	r3, [r4, #0]
 8000af2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000af6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000af8:	6820      	ldr	r0, [r4, #0]
 8000afa:	f000 fdeb 	bl	80016d4 <USB_ReadInterrupts>
 8000afe:	01c0      	lsls	r0, r0, #7
 8000b00:	d540      	bpl.n	8000b84 <HAL_HCD_IRQHandler+0x128>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8000b02:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000b04:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000b08:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8000b0a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000b0e:	9305      	str	r3, [sp, #20]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000b10:	9b05      	ldr	r3, [sp, #20]
 8000b12:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000b16:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000b18:	9b04      	ldr	r3, [sp, #16]
 8000b1a:	0799      	lsls	r1, r3, #30
 8000b1c:	d50d      	bpl.n	8000b3a <HAL_HCD_IRQHandler+0xde>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000b1e:	9b04      	ldr	r3, [sp, #16]
 8000b20:	07da      	lsls	r2, r3, #31
 8000b22:	d506      	bpl.n	8000b32 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000b24:	69ab      	ldr	r3, [r5, #24]
 8000b26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000b2a:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f004 fd11 	bl	8005554 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8000b32:	9b05      	ldr	r3, [sp, #20]
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	9305      	str	r3, [sp, #20]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000b3a:	9b04      	ldr	r3, [sp, #16]
 8000b3c:	071b      	lsls	r3, r3, #28
 8000b3e:	d517      	bpl.n	8000b70 <HAL_HCD_IRQHandler+0x114>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000b40:	9b05      	ldr	r3, [sp, #20]
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	9305      	str	r3, [sp, #20]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000b48:	9b04      	ldr	r3, [sp, #16]
 8000b4a:	075f      	lsls	r7, r3, #29
 8000b4c:	f140 8088 	bpl.w	8000c60 <HAL_HCD_IRQHandler+0x204>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000b50:	69a1      	ldr	r1, [r4, #24]
 8000b52:	2902      	cmp	r1, #2
 8000b54:	d17c      	bne.n	8000c50 <HAL_HCD_IRQHandler+0x1f4>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8000b56:	9b04      	ldr	r3, [sp, #16]
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8000b58:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8000b5a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000b5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8000b62:	bf18      	it	ne
 8000b64:	2101      	movne	r1, #1
 8000b66:	f000 fe47 	bl	80017f8 <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	f004 fcf2 	bl	8005554 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000b70:	9b04      	ldr	r3, [sp, #16]
 8000b72:	0698      	lsls	r0, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000b74:	bf42      	ittt	mi
 8000b76:	9b05      	ldrmi	r3, [sp, #20]
 8000b78:	f043 0320 	orrmi.w	r3, r3, #32
 8000b7c:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000b7e:	9b05      	ldr	r3, [sp, #20]
 8000b80:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000b84:	6820      	ldr	r0, [r4, #0]
 8000b86:	f000 fda5 	bl	80016d4 <USB_ReadInterrupts>
 8000b8a:	0701      	lsls	r1, r0, #28
 8000b8c:	d505      	bpl.n	8000b9a <HAL_HCD_IRQHandler+0x13e>
      HAL_HCD_SOF_Callback(hhcd);
 8000b8e:	4620      	mov	r0, r4
 8000b90:	f004 fcdc 	bl	800554c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	2208      	movs	r2, #8
 8000b98:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000b9a:	6820      	ldr	r0, [r4, #0]
 8000b9c:	f000 fd9a 	bl	80016d4 <USB_ReadInterrupts>
 8000ba0:	0182      	lsls	r2, r0, #6
 8000ba2:	d514      	bpl.n	8000bce <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000ba4:	6820      	ldr	r0, [r4, #0]
 8000ba6:	f001 f833 	bl	8001c10 <USB_HC_ReadInterrupt>
 8000baa:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8000bae:	9002      	str	r0, [sp, #8]
 8000bb0:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000bb2:	f04f 0b00 	mov.w	fp, #0
        if (interrupt & (1U << i))
 8000bb6:	f04f 0a01 	mov.w	sl, #1
    if(hhcd->hc[chnum].state == HC_XFRC)
 8000bba:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8000bbc:	f04f 0902 	mov.w	r9, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000bc0:	68a3      	ldr	r3, [r4, #8]
 8000bc2:	459b      	cmp	fp, r3
 8000bc4:	d358      	bcc.n	8000c78 <HAL_HCD_IRQHandler+0x21c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bcc:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8000bce:	6820      	ldr	r0, [r4, #0]
 8000bd0:	f000 fd80 	bl	80016d4 <USB_ReadInterrupts>
 8000bd4:	06c3      	lsls	r3, r0, #27
 8000bd6:	d538      	bpl.n	8000c4a <HAL_HCD_IRQHandler+0x1ee>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bd8:	6825      	ldr	r5, [r4, #0]
 8000bda:	69ab      	ldr	r3, [r5, #24]
 8000bdc:	f023 0310 	bic.w	r3, r3, #16
 8000be0:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP;
 8000be2:	6a2f      	ldr	r7, [r5, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8000be4:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d129      	bne.n	8000c40 <HAL_HCD_IRQHandler+0x1e4>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000bec:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8000bf0:	f1b8 0f00 	cmp.w	r8, #0
 8000bf4:	d024      	beq.n	8000c40 <HAL_HCD_IRQHandler+0x1e4>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8000bf6:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8000bfa:	2628      	movs	r6, #40	; 0x28
 8000bfc:	fb06 4607 	mla	r6, r6, r7, r4
 8000c00:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000c02:	b1e9      	cbz	r1, 8000c40 <HAL_HCD_IRQHandler+0x1e4>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8000c04:	4642      	mov	r2, r8
 8000c06:	4628      	mov	r0, r5
 8000c08:	f000 fd56 	bl	80016b8 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8000c0c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000c0e:	4443      	add	r3, r8
 8000c10:	6473      	str	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8000c12:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8000c16:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8000c18:	eb05 1547 	add.w	r5, r5, r7, lsl #5
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8000c1c:	4443      	add	r3, r8
 8000c1e:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8000c20:	692a      	ldr	r2, [r5, #16]
 8000c22:	4bb7      	ldr	r3, [pc, #732]	; (8000f00 <HAL_HCD_IRQHandler+0x4a4>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	b15b      	cbz	r3, 8000c40 <HAL_HCD_IRQHandler+0x1e4>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8000c28:	682b      	ldr	r3, [r5, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000c2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000c2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8000c32:	602b      	str	r3, [r5, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8000c34:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8000c38:	f083 0301 	eor.w	r3, r3, #1
 8000c3c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c40:	6822      	ldr	r2, [r4, #0]
 8000c42:	6993      	ldr	r3, [r2, #24]
 8000c44:	f043 0310 	orr.w	r3, r3, #16
 8000c48:	6193      	str	r3, [r2, #24]
}
 8000c4a:	b007      	add	sp, #28
 8000c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8000c50:	68e3      	ldr	r3, [r4, #12]
 8000c52:	2b03      	cmp	r3, #3
          USBx_HOST->HFIR = 60000U;
 8000c54:	bf04      	itt	eq
 8000c56:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8000c5a:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8000c5e:	e784      	b.n	8000b6a <HAL_HCD_IRQHandler+0x10e>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000c60:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8000c64:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000c66:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000c6a:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8000c6e:	6993      	ldr	r3, [r2, #24]
 8000c70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c74:	6193      	str	r3, [r2, #24]
 8000c76:	e77b      	b.n	8000b70 <HAL_HCD_IRQHandler+0x114>
        if (interrupt & (1U << i))
 8000c78:	9a02      	ldr	r2, [sp, #8]
 8000c7a:	fa0a f30b 	lsl.w	r3, sl, fp
 8000c7e:	4213      	tst	r3, r2
 8000c80:	f000 8086 	beq.w	8000d90 <HAL_HCD_IRQHandler+0x334>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8000c84:	9b01      	ldr	r3, [sp, #4]
 8000c86:	6820      	ldr	r0, [r4, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000c8e:	fa5f f58b 	uxtb.w	r5, fp
 8000c92:	f000 810a 	beq.w	8000eaa <HAL_HCD_IRQHandler+0x44e>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8000c96:	016a      	lsls	r2, r5, #5
 8000c98:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
 8000c9c:	eb02 0608 	add.w	r6, r2, r8
 8000ca0:	68b1      	ldr	r1, [r6, #8]
 8000ca2:	074b      	lsls	r3, r1, #29
 8000ca4:	d513      	bpl.n	8000cce <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000caa:	68f1      	ldr	r1, [r6, #12]
 8000cac:	f041 0102 	orr.w	r1, r1, #2
 8000cb0:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8000cb2:	68b1      	ldr	r1, [r6, #8]
 8000cb4:	058b      	lsls	r3, r1, #22
 8000cb6:	d53d      	bpl.n	8000d34 <HAL_HCD_IRQHandler+0x2d8>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000cb8:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000cba:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000cc2:	4629      	mov	r1, r5
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000cc4:	f000 ffb3 	bl	8001c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8000cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ccc:	e12b      	b.n	8000f26 <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8000cce:	68b1      	ldr	r1, [r6, #8]
 8000cd0:	0689      	lsls	r1, r1, #26
 8000cd2:	d502      	bpl.n	8000cda <HAL_HCD_IRQHandler+0x27e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000cd4:	2120      	movs	r1, #32
 8000cd6:	60b1      	str	r1, [r6, #8]
 8000cd8:	e7eb      	b.n	8000cb2 <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8000cda:	68b1      	ldr	r1, [r6, #8]
 8000cdc:	070b      	lsls	r3, r1, #28
 8000cde:	d513      	bpl.n	8000d08 <HAL_HCD_IRQHandler+0x2ac>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000ce0:	68f1      	ldr	r1, [r6, #12]
 8000ce2:	9203      	str	r2, [sp, #12]
 8000ce4:	f041 0102 	orr.w	r1, r1, #2
 8000ce8:	60f1      	str	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8000cea:	fb07 4105 	mla	r1, r7, r5, r4
 8000cee:	f04f 0e05 	mov.w	lr, #5
 8000cf2:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	60b1      	str	r1, [r6, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8000cfe:	4629      	mov	r1, r5
 8000d00:	f000 ff95 	bl	8001c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8000d04:	9a03      	ldr	r2, [sp, #12]
 8000d06:	e7d4      	b.n	8000cb2 <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8000d08:	68b1      	ldr	r1, [r6, #8]
 8000d0a:	0549      	lsls	r1, r1, #21
 8000d0c:	d5d1      	bpl.n	8000cb2 <HAL_HCD_IRQHandler+0x256>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000d0e:	68f1      	ldr	r1, [r6, #12]
 8000d10:	9203      	str	r2, [sp, #12]
 8000d12:	f041 0102 	orr.w	r1, r1, #2
 8000d16:	60f1      	str	r1, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000d18:	4629      	mov	r1, r5
 8000d1a:	f000 ff88 	bl	8001c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8000d1e:	2110      	movs	r1, #16
 8000d20:	60b1      	str	r1, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8000d22:	fb07 4105 	mla	r1, r7, r5, r4
 8000d26:	2008      	movs	r0, #8
 8000d28:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8000d2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d30:	60b1      	str	r1, [r6, #8]
 8000d32:	e7e7      	b.n	8000d04 <HAL_HCD_IRQHandler+0x2a8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8000d34:	68b1      	ldr	r1, [r6, #8]
 8000d36:	07c8      	lsls	r0, r1, #31
 8000d38:	d540      	bpl.n	8000dbc <HAL_HCD_IRQHandler+0x360>
    if (hhcd->Init.dma_enable)
 8000d3a:	6921      	ldr	r1, [r4, #16]
 8000d3c:	b149      	cbz	r1, 8000d52 <HAL_HCD_IRQHandler+0x2f6>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000d3e:	fb07 4e05 	mla	lr, r7, r5, r4
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000d42:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000d44:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000d48:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000d4c:	1a09      	subs	r1, r1, r0
 8000d4e:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 8000d52:	fb07 4105 	mla	r1, r7, r5, r4
    hhcd->hc[chnum].ErrCnt = 0U;
 8000d56:	2000      	movs	r0, #0
 8000d58:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XFRC;
 8000d5a:	f881 a05d 	strb.w	sl, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8000d5e:	f8c6 a008 	str.w	sl, [r6, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8000d62:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 8000d66:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8000d6a:	d117      	bne.n	8000d9c <HAL_HCD_IRQHandler+0x340>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000d6c:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8000d6e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8000d76:	4629      	mov	r1, r5
 8000d78:	f000 ff59 	bl	8001c2e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].toggle_in ^= 1U;
 8000d80:	fb07 4505 	mla	r5, r7, r5, r4
 8000d84:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8000d88:	f083 0301 	eor.w	r3, r3, #1
 8000d8c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 8000d90:	9b01      	ldr	r3, [sp, #4]
 8000d92:	3320      	adds	r3, #32
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000d94:	f10b 0b01 	add.w	fp, fp, #1
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	e711      	b.n	8000bc0 <HAL_HCD_IRQHandler+0x164>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8000d9c:	2803      	cmp	r0, #3
 8000d9e:	d1ef      	bne.n	8000d80 <HAL_HCD_IRQHandler+0x324>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000da0:	f852 0008 	ldr.w	r0, [r2, r8]
 8000da4:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8000da8:	f842 0008 	str.w	r0, [r2, r8]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8000dac:	f881 a05c 	strb.w	sl, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8000db0:	2201      	movs	r2, #1
 8000db2:	4629      	mov	r1, r5
 8000db4:	4620      	mov	r0, r4
 8000db6:	f004 fbd5 	bl	8005564 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000dba:	e7e1      	b.n	8000d80 <HAL_HCD_IRQHandler+0x324>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8000dbc:	68b1      	ldr	r1, [r6, #8]
 8000dbe:	0789      	lsls	r1, r1, #30
 8000dc0:	d535      	bpl.n	8000e2e <HAL_HCD_IRQHandler+0x3d2>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8000dc2:	68f1      	ldr	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8000dc4:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8000dc8:	f021 0102 	bic.w	r1, r1, #2
 8000dcc:	60f1      	str	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8000dce:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8000dd2:	2901      	cmp	r1, #1
 8000dd4:	d10c      	bne.n	8000df0 <HAL_HCD_IRQHandler+0x394>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8000dd6:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8000dda:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8000dde:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8000de2:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000de6:	4629      	mov	r1, r5
 8000de8:	4620      	mov	r0, r4
 8000dea:	f004 fbbb 	bl	8005564 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000dee:	e7cf      	b.n	8000d90 <HAL_HCD_IRQHandler+0x334>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8000df0:	2905      	cmp	r1, #5
 8000df2:	d0f0      	beq.n	8000dd6 <HAL_HCD_IRQHandler+0x37a>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8000df4:	2906      	cmp	r1, #6
 8000df6:	d001      	beq.n	8000dfc <HAL_HCD_IRQHandler+0x3a0>
 8000df8:	2908      	cmp	r1, #8
 8000dfa:	d1ee      	bne.n	8000dda <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8000dfc:	fb07 4105 	mla	r1, r7, r5, r4
 8000e00:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8000e02:	2803      	cmp	r0, #3
 8000e04:	f100 0301 	add.w	r3, r0, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8000e08:	bf88      	it	hi
 8000e0a:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8000e0c:	658b      	str	r3, [r1, #88]	; 0x58
        hhcd->hc[chnum].ErrCnt = 0U;
 8000e0e:	bf83      	ittte	hi
 8000e10:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8000e12:	2004      	movhi	r0, #4
 8000e14:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8000e18:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8000e1c:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000e20:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000e24:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8000e28:	f842 1008 	str.w	r1, [r2, r8]
 8000e2c:	e7d5      	b.n	8000dda <HAL_HCD_IRQHandler+0x37e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8000e2e:	68b1      	ldr	r1, [r6, #8]
 8000e30:	060b      	lsls	r3, r1, #24
 8000e32:	d511      	bpl.n	8000e58 <HAL_HCD_IRQHandler+0x3fc>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000e34:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);     
 8000e36:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	60f3      	str	r3, [r6, #12]
    hhcd->hc[chnum].ErrCnt++;
 8000e3e:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);     
 8000e42:	4629      	mov	r1, r5
    hhcd->hc[chnum].ErrCnt++;
 8000e44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e46:	3201      	adds	r2, #1
 8000e48:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 8000e4a:	2206      	movs	r2, #6
 8000e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 8000e50:	f000 feed 	bl	8001c2e <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	e066      	b.n	8000f26 <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8000e58:	68b1      	ldr	r1, [r6, #8]
 8000e5a:	06c8      	lsls	r0, r1, #27
 8000e5c:	d598      	bpl.n	8000d90 <HAL_HCD_IRQHandler+0x334>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8000e5e:	fb07 4105 	mla	r1, r7, r5, r4
 8000e62:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 8000e66:	2903      	cmp	r1, #3
 8000e68:	d109      	bne.n	8000e7e <HAL_HCD_IRQHandler+0x422>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000e6a:	68f1      	ldr	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8000e6c:	6820      	ldr	r0, [r4, #0]
 8000e6e:	9203      	str	r2, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000e70:	f041 0102 	orr.w	r1, r1, #2
 8000e74:	60f1      	str	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8000e76:	4629      	mov	r1, r5
 8000e78:	f000 fed9 	bl	8001c2e <USB_HC_Halt>
 8000e7c:	9a03      	ldr	r2, [sp, #12]
    hhcd->hc[chnum].state = HC_NAK;
 8000e7e:	fb07 4505 	mla	r5, r7, r5, r4
 8000e82:	2103      	movs	r1, #3
 8000e84:	f885 105d 	strb.w	r1, [r5, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000e88:	2110      	movs	r1, #16
 8000e8a:	60b1      	str	r1, [r6, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8000e8c:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
 8000e90:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8000e94:	f47f af7c 	bne.w	8000d90 <HAL_HCD_IRQHandler+0x334>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8000e98:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000e9c:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000ea0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8000ea4:	f842 1008 	str.w	r1, [r2, r8]
 8000ea8:	e772      	b.n	8000d90 <HAL_HCD_IRQHandler+0x334>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8000eaa:	f500 66a0 	add.w	r6, r0, #1280	; 0x500
 8000eae:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8000eb2:	68b3      	ldr	r3, [r6, #8]
 8000eb4:	0759      	lsls	r1, r3, #29
 8000eb6:	d506      	bpl.n	8000ec6 <HAL_HCD_IRQHandler+0x46a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000eb8:	2304      	movs	r3, #4
 8000eba:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000ebc:	68f3      	ldr	r3, [r6, #12]
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	60f3      	str	r3, [r6, #12]
 8000ec4:	e764      	b.n	8000d90 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8000ec6:	68b3      	ldr	r3, [r6, #8]
 8000ec8:	f013 0320 	ands.w	r3, r3, #32
 8000ecc:	d01a      	beq.n	8000f04 <HAL_HCD_IRQHandler+0x4a8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000ece:	2320      	movs	r3, #32
 8000ed0:	60b3      	str	r3, [r6, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8000ed2:	fb07 4305 	mla	r3, r7, r5, r4
 8000ed6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000eda:	2a01      	cmp	r2, #1
 8000edc:	f47f af58 	bne.w	8000d90 <HAL_HCD_IRQHandler+0x334>
      hhcd->hc[chnum].state = HC_NYET;     
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000ee6:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].state = HC_NYET;     
 8000ee8:	9303      	str	r3, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000eea:	f042 0202 	orr.w	r2, r2, #2
 8000eee:	60f2      	str	r2, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8000ef0:	4629      	mov	r1, r5
 8000ef2:	f000 fe9c 	bl	8001c2e <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8000ef6:	9b03      	ldr	r3, [sp, #12]
 8000ef8:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8000efc:	e748      	b.n	8000d90 <HAL_HCD_IRQHandler+0x334>
 8000efe:	bf00      	nop
 8000f00:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8000f04:	68b2      	ldr	r2, [r6, #8]
 8000f06:	0652      	lsls	r2, r2, #25
 8000f08:	d50f      	bpl.n	8000f2a <HAL_HCD_IRQHandler+0x4ce>
    hhcd->hc[chnum].state = HC_NYET;
 8000f0a:	fb07 4205 	mla	r2, r7, r5, r4
 8000f0e:	2104      	movs	r1, #4
    hhcd->hc[chnum].ErrCnt= 0U;    
 8000f10:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f12:	68f3      	ldr	r3, [r6, #12]
    hhcd->hc[chnum].state = HC_NYET;
 8000f14:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8000f1e:	4629      	mov	r1, r5
 8000f20:	f000 fe85 	bl	8001c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8000f24:	2340      	movs	r3, #64	; 0x40
 8000f26:	60b3      	str	r3, [r6, #8]
 8000f28:	e732      	b.n	8000d90 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8000f2a:	68b2      	ldr	r2, [r6, #8]
 8000f2c:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8000f30:	d005      	beq.n	8000f3e <HAL_HCD_IRQHandler+0x4e2>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f32:	68f3      	ldr	r3, [r6, #12]
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000f3a:	4629      	mov	r1, r5
 8000f3c:	e6c2      	b.n	8000cc4 <HAL_HCD_IRQHandler+0x268>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8000f3e:	68b3      	ldr	r3, [r6, #8]
 8000f40:	07d9      	lsls	r1, r3, #31
 8000f42:	d510      	bpl.n	8000f66 <HAL_HCD_IRQHandler+0x50a>
      hhcd->hc[chnum].ErrCnt = 0U;  
 8000f44:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);   
 8000f48:	4629      	mov	r1, r5
      hhcd->hc[chnum].ErrCnt = 0U;  
 8000f4a:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000f4c:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].ErrCnt = 0U;  
 8000f4e:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000f50:	f042 0202 	orr.w	r2, r2, #2
 8000f54:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8000f56:	f000 fe6a 	bl	8001c2e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 8000f5a:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8000f5c:	f8c6 a008 	str.w	sl, [r6, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8000f60:	f883 a05d 	strb.w	sl, [r3, #93]	; 0x5d
 8000f64:	e714      	b.n	8000d90 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8000f66:	68b3      	ldr	r3, [r6, #8]
 8000f68:	071a      	lsls	r2, r3, #28
 8000f6a:	d50e      	bpl.n	8000f8a <HAL_HCD_IRQHandler+0x52e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000f70:	68f3      	ldr	r3, [r6, #12]
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8000f78:	4629      	mov	r1, r5
 8000f7a:	f000 fe58 	bl	8001c2e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8000f7e:	fb07 4505 	mla	r5, r7, r5, r4
 8000f82:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8000f84:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8000f88:	e702      	b.n	8000d90 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8000f8a:	68b3      	ldr	r3, [r6, #8]
 8000f8c:	06db      	lsls	r3, r3, #27
 8000f8e:	d511      	bpl.n	8000fb4 <HAL_HCD_IRQHandler+0x558>
    hhcd->hc[chnum].ErrCnt = 0U;  
 8000f90:	fb07 4305 	mla	r3, r7, r5, r4
 8000f94:	2200      	movs	r2, #0
 8000f96:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f98:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[chnum].ErrCnt = 0U;  
 8000f9a:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f9c:	f042 0202 	orr.w	r2, r2, #2
 8000fa0:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	f000 fe43 	bl	8001c2e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8000fa8:	9b03      	ldr	r3, [sp, #12]
 8000faa:	2203      	movs	r2, #3
 8000fac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	e7b8      	b.n	8000f26 <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8000fb4:	68b3      	ldr	r3, [r6, #8]
 8000fb6:	0619      	lsls	r1, r3, #24
 8000fb8:	d50c      	bpl.n	8000fd4 <HAL_HCD_IRQHandler+0x578>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000fba:	68f3      	ldr	r3, [r6, #12]
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8000fc2:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_XACTERR;  
 8000fc4:	fb07 4505 	mla	r5, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);      
 8000fc8:	f000 fe31 	bl	8001c2e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8000fcc:	2306      	movs	r3, #6
 8000fce:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8000fd2:	e73f      	b.n	8000e54 <HAL_HCD_IRQHandler+0x3f8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8000fd4:	68b1      	ldr	r1, [r6, #8]
 8000fd6:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8000fda:	d00f      	beq.n	8000ffc <HAL_HCD_IRQHandler+0x5a0>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000fdc:	68f3      	ldr	r3, [r6, #12]
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	f000 fe22 	bl	8001c2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000fea:	2310      	movs	r3, #16
 8000fec:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8000fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff2:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8000ff4:	fb07 4505 	mla	r5, r7, r5, r4
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	e7c3      	b.n	8000f84 <HAL_HCD_IRQHandler+0x528>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8000ffc:	68b3      	ldr	r3, [r6, #8]
 8000ffe:	079a      	lsls	r2, r3, #30
 8001000:	f57f aec6 	bpl.w	8000d90 <HAL_HCD_IRQHandler+0x334>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001004:	68f3      	ldr	r3, [r6, #12]
 8001006:	f023 0302 	bic.w	r3, r3, #2
 800100a:	60f3      	str	r3, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 800100c:	fb07 4305 	mla	r3, r7, r5, r4
 8001010:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8001014:	2a01      	cmp	r2, #1
 8001016:	d10d      	bne.n	8001034 <HAL_HCD_IRQHandler+0x5d8>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8001018:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 800101c:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001020:	2a02      	cmp	r2, #2
 8001022:	f47f aeda 	bne.w	8000dda <HAL_HCD_IRQHandler+0x37e>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 8001026:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800102a:	f082 0201 	eor.w	r2, r2, #1
 800102e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001032:	e6d2      	b.n	8000dda <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8001034:	2a03      	cmp	r2, #3
 8001036:	d102      	bne.n	800103e <HAL_HCD_IRQHandler+0x5e2>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001038:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 800103c:	e6cd      	b.n	8000dda <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 800103e:	2a04      	cmp	r2, #4
 8001040:	d104      	bne.n	800104c <HAL_HCD_IRQHandler+0x5f0>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001042:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 8001046:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 800104a:	e6c6      	b.n	8000dda <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 800104c:	2a05      	cmp	r2, #5
 800104e:	d102      	bne.n	8001056 <HAL_HCD_IRQHandler+0x5fa>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001054:	e6c1      	b.n	8000dda <HAL_HCD_IRQHandler+0x37e>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001056:	2a06      	cmp	r2, #6
 8001058:	d002      	beq.n	8001060 <HAL_HCD_IRQHandler+0x604>
 800105a:	2a08      	cmp	r2, #8
 800105c:	f47f aebd 	bne.w	8000dda <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001060:	fb07 4305 	mla	r3, r7, r5, r4
 8001064:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001066:	1c51      	adds	r1, r2, #1
 8001068:	2a03      	cmp	r2, #3
 800106a:	6599      	str	r1, [r3, #88]	; 0x58
 800106c:	d9e4      	bls.n	8001038 <HAL_HCD_IRQHandler+0x5dc>
        hhcd->hc[chnum].ErrCnt = 0U;
 800106e:	2200      	movs	r2, #0
 8001070:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001072:	2204      	movs	r2, #4
 8001074:	e7ec      	b.n	8001050 <HAL_HCD_IRQHandler+0x5f4>
 8001076:	bf00      	nop

08001078 <HAL_HCD_Start>:
{ 
 8001078:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 800107a:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 800107e:	2b01      	cmp	r3, #1
{ 
 8001080:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8001082:	d00d      	beq.n	80010a0 <HAL_HCD_Start+0x28>
 8001084:	2501      	movs	r5, #1
 8001086:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 800108a:	6800      	ldr	r0, [r0, #0]
 800108c:	f000 faba 	bl	8001604 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 8001090:	4629      	mov	r1, r5
 8001092:	6820      	ldr	r0, [r4, #0]
 8001094:	f000 fbe6 	bl	8001864 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8001098:	2000      	movs	r0, #0
 800109a:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 800109e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd); 
 80010a0:	2002      	movs	r0, #2
}
 80010a2:	bd38      	pop	{r3, r4, r5, pc}

080010a4 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd); 
 80010a4:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 80010a8:	2b01      	cmp	r3, #1
{ 
 80010aa:	b510      	push	{r4, lr}
 80010ac:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 80010ae:	d009      	beq.n	80010c4 <HAL_HCD_Stop+0x20>
 80010b0:	2301      	movs	r3, #1
 80010b2:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 80010b6:	6800      	ldr	r0, [r0, #0]
 80010b8:	f000 fede 	bl	8001e78 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 80010bc:	2000      	movs	r0, #0
 80010be:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 80010c2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd); 
 80010c4:	2002      	movs	r0, #2
}
 80010c6:	bd10      	pop	{r4, pc}

080010c8 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 80010c8:	6800      	ldr	r0, [r0, #0]
 80010ca:	f000 bbb2 	b.w	8001832 <USB_ResetPort>

080010ce <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 80010ce:	2328      	movs	r3, #40	; 0x28
 80010d0:	fb03 0101 	mla	r1, r3, r1, r0
}
 80010d4:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 80010d8:	4770      	bx	lr

080010da <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count; 
 80010da:	2328      	movs	r3, #40	; 0x28
 80010dc:	fb03 0101 	mla	r1, r3, r1, r0
}
 80010e0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80010e2:	4770      	bx	lr

080010e4 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80010e4:	6800      	ldr	r0, [r0, #0]
 80010e6:	f000 bbe4 	b.w	80018b2 <USB_GetCurrentFrame>

080010ea <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 80010ea:	6800      	ldr	r0, [r0, #0]
 80010ec:	f000 bbd8 	b.w	80018a0 <USB_GetHostSpeed>

080010f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f4:	4604      	mov	r4, r0
 80010f6:	b918      	cbnz	r0, 8001100 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80010f8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80010fa:	b002      	add	sp, #8
 80010fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001100:	6803      	ldr	r3, [r0, #0]
 8001102:	07dd      	lsls	r5, r3, #31
 8001104:	d410      	bmi.n	8001128 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	0798      	lsls	r0, r3, #30
 800110a:	d458      	bmi.n	80011be <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	071a      	lsls	r2, r3, #28
 8001110:	f100 809a 	bmi.w	8001248 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	075b      	lsls	r3, r3, #29
 8001118:	f100 80b8 	bmi.w	800128c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800111c:	69a2      	ldr	r2, [r4, #24]
 800111e:	2a00      	cmp	r2, #0
 8001120:	f040 8119 	bne.w	8001356 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001124:	2000      	movs	r0, #0
 8001126:	e7e8      	b.n	80010fa <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001128:	4ba6      	ldr	r3, [pc, #664]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	f002 020c 	and.w	r2, r2, #12
 8001130:	2a04      	cmp	r2, #4
 8001132:	d007      	beq.n	8001144 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800113a:	2a08      	cmp	r2, #8
 800113c:	d10a      	bne.n	8001154 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	0259      	lsls	r1, r3, #9
 8001142:	d507      	bpl.n	8001154 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001144:	4b9f      	ldr	r3, [pc, #636]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	039a      	lsls	r2, r3, #14
 800114a:	d5dc      	bpl.n	8001106 <HAL_RCC_OscConfig+0x16>
 800114c:	6863      	ldr	r3, [r4, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1d9      	bne.n	8001106 <HAL_RCC_OscConfig+0x16>
 8001152:	e7d1      	b.n	80010f8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001154:	6863      	ldr	r3, [r4, #4]
 8001156:	4d9b      	ldr	r5, [pc, #620]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
 8001158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115c:	d111      	bne.n	8001182 <HAL_RCC_OscConfig+0x92>
 800115e:	682b      	ldr	r3, [r5, #0]
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001166:	f7ff fa01 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4d96      	ldr	r5, [pc, #600]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800116c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	682b      	ldr	r3, [r5, #0]
 8001170:	039b      	lsls	r3, r3, #14
 8001172:	d4c8      	bmi.n	8001106 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff f9fa 	bl	800056c <HAL_GetTick>
 8001178:	1b80      	subs	r0, r0, r6
 800117a:	2864      	cmp	r0, #100	; 0x64
 800117c:	d9f7      	bls.n	800116e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800117e:	2003      	movs	r0, #3
 8001180:	e7bb      	b.n	80010fa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001182:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001186:	d104      	bne.n	8001192 <HAL_RCC_OscConfig+0xa2>
 8001188:	682b      	ldr	r3, [r5, #0]
 800118a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118e:	602b      	str	r3, [r5, #0]
 8001190:	e7e5      	b.n	800115e <HAL_RCC_OscConfig+0x6e>
 8001192:	682a      	ldr	r2, [r5, #0]
 8001194:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001198:	602a      	str	r2, [r5, #0]
 800119a:	682a      	ldr	r2, [r5, #0]
 800119c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011a0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1df      	bne.n	8001166 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80011a6:	f7ff f9e1 	bl	800056c <HAL_GetTick>
 80011aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	039f      	lsls	r7, r3, #14
 80011b0:	d5a9      	bpl.n	8001106 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b2:	f7ff f9db 	bl	800056c <HAL_GetTick>
 80011b6:	1b80      	subs	r0, r0, r6
 80011b8:	2864      	cmp	r0, #100	; 0x64
 80011ba:	d9f7      	bls.n	80011ac <HAL_RCC_OscConfig+0xbc>
 80011bc:	e7df      	b.n	800117e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011be:	4b81      	ldr	r3, [pc, #516]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	f012 0f0c 	tst.w	r2, #12
 80011c6:	d007      	beq.n	80011d8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ce:	2a08      	cmp	r2, #8
 80011d0:	d111      	bne.n	80011f6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	025e      	lsls	r6, r3, #9
 80011d6:	d40e      	bmi.n	80011f6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d8:	4b7a      	ldr	r3, [pc, #488]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	0795      	lsls	r5, r2, #30
 80011de:	d502      	bpl.n	80011e6 <HAL_RCC_OscConfig+0xf6>
 80011e0:	68e2      	ldr	r2, [r4, #12]
 80011e2:	2a01      	cmp	r2, #1
 80011e4:	d188      	bne.n	80010f8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	6921      	ldr	r1, [r4, #16]
 80011ea:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011ee:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80011f2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f4:	e78a      	b.n	800110c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011f6:	68e2      	ldr	r2, [r4, #12]
 80011f8:	4b73      	ldr	r3, [pc, #460]	; (80013c8 <HAL_RCC_OscConfig+0x2d8>)
 80011fa:	b1b2      	cbz	r2, 800122a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001200:	f7ff f9b4 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	4d6f      	ldr	r5, [pc, #444]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001206:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001208:	682b      	ldr	r3, [r5, #0]
 800120a:	0798      	lsls	r0, r3, #30
 800120c:	d507      	bpl.n	800121e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120e:	682b      	ldr	r3, [r5, #0]
 8001210:	6922      	ldr	r2, [r4, #16]
 8001212:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001216:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800121a:	602b      	str	r3, [r5, #0]
 800121c:	e776      	b.n	800110c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff f9a5 	bl	800056c <HAL_GetTick>
 8001222:	1b80      	subs	r0, r0, r6
 8001224:	2802      	cmp	r0, #2
 8001226:	d9ef      	bls.n	8001208 <HAL_RCC_OscConfig+0x118>
 8001228:	e7a9      	b.n	800117e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800122a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800122c:	f7ff f99e 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001230:	4d64      	ldr	r5, [pc, #400]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001232:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	0799      	lsls	r1, r3, #30
 8001238:	f57f af68 	bpl.w	800110c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123c:	f7ff f996 	bl	800056c <HAL_GetTick>
 8001240:	1b80      	subs	r0, r0, r6
 8001242:	2802      	cmp	r0, #2
 8001244:	d9f6      	bls.n	8001234 <HAL_RCC_OscConfig+0x144>
 8001246:	e79a      	b.n	800117e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001248:	6962      	ldr	r2, [r4, #20]
 800124a:	4b60      	ldr	r3, [pc, #384]	; (80013cc <HAL_RCC_OscConfig+0x2dc>)
 800124c:	b17a      	cbz	r2, 800126e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800124e:	2201      	movs	r2, #1
 8001250:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001252:	f7ff f98b 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001256:	4d5b      	ldr	r5, [pc, #364]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001258:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800125c:	079f      	lsls	r7, r3, #30
 800125e:	f53f af59 	bmi.w	8001114 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001262:	f7ff f983 	bl	800056c <HAL_GetTick>
 8001266:	1b80      	subs	r0, r0, r6
 8001268:	2802      	cmp	r0, #2
 800126a:	d9f6      	bls.n	800125a <HAL_RCC_OscConfig+0x16a>
 800126c:	e787      	b.n	800117e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800126e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001270:	f7ff f97c 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001274:	4d53      	ldr	r5, [pc, #332]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001276:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001278:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800127a:	0798      	lsls	r0, r3, #30
 800127c:	f57f af4a 	bpl.w	8001114 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001280:	f7ff f974 	bl	800056c <HAL_GetTick>
 8001284:	1b80      	subs	r0, r0, r6
 8001286:	2802      	cmp	r0, #2
 8001288:	d9f6      	bls.n	8001278 <HAL_RCC_OscConfig+0x188>
 800128a:	e778      	b.n	800117e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128c:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
 800128e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001290:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001294:	d128      	bne.n	80012e8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	9201      	str	r2, [sp, #4]
 8001298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800129a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800129e:	641a      	str	r2, [r3, #64]	; 0x40
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012aa:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ac:	4d48      	ldr	r5, [pc, #288]	; (80013d0 <HAL_RCC_OscConfig+0x2e0>)
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	05d9      	lsls	r1, r3, #23
 80012b2:	d51b      	bpl.n	80012ec <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b4:	68a3      	ldr	r3, [r4, #8]
 80012b6:	4d43      	ldr	r5, [pc, #268]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d127      	bne.n	800130c <HAL_RCC_OscConfig+0x21c>
 80012bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80012c4:	f7ff f952 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	4d3e      	ldr	r5, [pc, #248]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012ca:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012cc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012d2:	079b      	lsls	r3, r3, #30
 80012d4:	d539      	bpl.n	800134a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80012d6:	2e00      	cmp	r6, #0
 80012d8:	f43f af20 	beq.w	800111c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012dc:	4a39      	ldr	r2, [pc, #228]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
 80012de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	e719      	b.n	800111c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80012e8:	2600      	movs	r6, #0
 80012ea:	e7df      	b.n	80012ac <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80012f4:	f7ff f93a 	bl	800056c <HAL_GetTick>
 80012f8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fa:	682b      	ldr	r3, [r5, #0]
 80012fc:	05da      	lsls	r2, r3, #23
 80012fe:	d4d9      	bmi.n	80012b4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001300:	f7ff f934 	bl	800056c <HAL_GetTick>
 8001304:	1bc0      	subs	r0, r0, r7
 8001306:	2802      	cmp	r0, #2
 8001308:	d9f7      	bls.n	80012fa <HAL_RCC_OscConfig+0x20a>
 800130a:	e738      	b.n	800117e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130c:	2b05      	cmp	r3, #5
 800130e:	d104      	bne.n	800131a <HAL_RCC_OscConfig+0x22a>
 8001310:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	672b      	str	r3, [r5, #112]	; 0x70
 8001318:	e7d0      	b.n	80012bc <HAL_RCC_OscConfig+0x1cc>
 800131a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	672a      	str	r2, [r5, #112]	; 0x70
 8001322:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001324:	f022 0204 	bic.w	r2, r2, #4
 8001328:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ca      	bne.n	80012c4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800132e:	f7ff f91d 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001336:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001338:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800133a:	0798      	lsls	r0, r3, #30
 800133c:	d5cb      	bpl.n	80012d6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133e:	f7ff f915 	bl	800056c <HAL_GetTick>
 8001342:	1bc0      	subs	r0, r0, r7
 8001344:	4540      	cmp	r0, r8
 8001346:	d9f7      	bls.n	8001338 <HAL_RCC_OscConfig+0x248>
 8001348:	e719      	b.n	800117e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134a:	f7ff f90f 	bl	800056c <HAL_GetTick>
 800134e:	1bc0      	subs	r0, r0, r7
 8001350:	4540      	cmp	r0, r8
 8001352:	d9bd      	bls.n	80012d0 <HAL_RCC_OscConfig+0x1e0>
 8001354:	e713      	b.n	800117e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001356:	4d1b      	ldr	r5, [pc, #108]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
 8001358:	68ab      	ldr	r3, [r5, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b08      	cmp	r3, #8
 8001360:	f43f aeca 	beq.w	80010f8 <HAL_RCC_OscConfig+0x8>
 8001364:	4e1b      	ldr	r6, [pc, #108]	; (80013d4 <HAL_RCC_OscConfig+0x2e4>)
 8001366:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001368:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800136a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800136c:	d134      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800136e:	f7ff f8fd 	bl	800056c <HAL_GetTick>
 8001372:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001374:	682b      	ldr	r3, [r5, #0]
 8001376:	0199      	lsls	r1, r3, #6
 8001378:	d41e      	bmi.n	80013b8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800137a:	6a22      	ldr	r2, [r4, #32]
 800137c:	69e3      	ldr	r3, [r4, #28]
 800137e:	4313      	orrs	r3, r2
 8001380:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001382:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001386:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001388:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800138c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138e:	4c0d      	ldr	r4, [pc, #52]	; (80013c4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001390:	0852      	lsrs	r2, r2, #1
 8001392:	3a01      	subs	r2, #1
 8001394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001398:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800139a:	2301      	movs	r3, #1
 800139c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800139e:	f7ff f8e5 	bl	800056c <HAL_GetTick>
 80013a2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	019a      	lsls	r2, r3, #6
 80013a8:	f53f aebc 	bmi.w	8001124 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff f8de 	bl	800056c <HAL_GetTick>
 80013b0:	1b40      	subs	r0, r0, r5
 80013b2:	2802      	cmp	r0, #2
 80013b4:	d9f6      	bls.n	80013a4 <HAL_RCC_OscConfig+0x2b4>
 80013b6:	e6e2      	b.n	800117e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b8:	f7ff f8d8 	bl	800056c <HAL_GetTick>
 80013bc:	1bc0      	subs	r0, r0, r7
 80013be:	2802      	cmp	r0, #2
 80013c0:	d9d8      	bls.n	8001374 <HAL_RCC_OscConfig+0x284>
 80013c2:	e6dc      	b.n	800117e <HAL_RCC_OscConfig+0x8e>
 80013c4:	40023800 	.word	0x40023800
 80013c8:	42470000 	.word	0x42470000
 80013cc:	42470e80 	.word	0x42470e80
 80013d0:	40007000 	.word	0x40007000
 80013d4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80013d8:	f7ff f8c8 	bl	800056c <HAL_GetTick>
 80013dc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013de:	682b      	ldr	r3, [r5, #0]
 80013e0:	019b      	lsls	r3, r3, #6
 80013e2:	f57f ae9f 	bpl.w	8001124 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff f8c1 	bl	800056c <HAL_GetTick>
 80013ea:	1b00      	subs	r0, r0, r4
 80013ec:	2802      	cmp	r0, #2
 80013ee:	d9f6      	bls.n	80013de <HAL_RCC_OscConfig+0x2ee>
 80013f0:	e6c5      	b.n	800117e <HAL_RCC_OscConfig+0x8e>
 80013f2:	bf00      	nop

080013f4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013f4:	4913      	ldr	r1, [pc, #76]	; (8001444 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80013f6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013f8:	688b      	ldr	r3, [r1, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d003      	beq.n	800140a <HAL_RCC_GetSysClockFreq+0x16>
 8001402:	2b08      	cmp	r3, #8
 8001404:	d003      	beq.n	800140e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001406:	4810      	ldr	r0, [pc, #64]	; (8001448 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001408:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800140a:	4810      	ldr	r0, [pc, #64]	; (800144c <HAL_RCC_GetSysClockFreq+0x58>)
 800140c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800140e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001410:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001412:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001414:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001418:	bf14      	ite	ne
 800141a:	480c      	ldrne	r0, [pc, #48]	; (800144c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800141c:	480a      	ldreq	r0, [pc, #40]	; (8001448 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800141e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001422:	bf18      	it	ne
 8001424:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001426:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800142a:	fba1 0100 	umull	r0, r1, r1, r0
 800142e:	f7fe fecb 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <HAL_RCC_GetSysClockFreq+0x50>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800143a:	3301      	adds	r3, #1
 800143c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800143e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001442:	bd08      	pop	{r3, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	00f42400 	.word	0x00f42400
 800144c:	007a1200 	.word	0x007a1200

08001450 <HAL_RCC_ClockConfig>:
{
 8001450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001454:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001456:	4604      	mov	r4, r0
 8001458:	b910      	cbnz	r0, 8001460 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
 800145c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001460:	4b44      	ldr	r3, [pc, #272]	; (8001574 <HAL_RCC_ClockConfig+0x124>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	f002 020f 	and.w	r2, r2, #15
 8001468:	428a      	cmp	r2, r1
 800146a:	d328      	bcc.n	80014be <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146c:	6821      	ldr	r1, [r4, #0]
 800146e:	078f      	lsls	r7, r1, #30
 8001470:	d42d      	bmi.n	80014ce <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001472:	07c8      	lsls	r0, r1, #31
 8001474:	d440      	bmi.n	80014f8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001476:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <HAL_RCC_ClockConfig+0x124>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	f002 020f 	and.w	r2, r2, #15
 800147e:	4295      	cmp	r5, r2
 8001480:	d366      	bcc.n	8001550 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	0751      	lsls	r1, r2, #29
 8001486:	d46c      	bmi.n	8001562 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001488:	0713      	lsls	r3, r2, #28
 800148a:	d507      	bpl.n	800149c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800148c:	4a3a      	ldr	r2, [pc, #232]	; (8001578 <HAL_RCC_ClockConfig+0x128>)
 800148e:	6921      	ldr	r1, [r4, #16]
 8001490:	6893      	ldr	r3, [r2, #8]
 8001492:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001496:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800149a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800149c:	f7ff ffaa 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <HAL_RCC_ClockConfig+0x128>)
 80014a2:	4a36      	ldr	r2, [pc, #216]	; (800157c <HAL_RCC_ClockConfig+0x12c>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	40d8      	lsrs	r0, r3
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_RCC_ClockConfig+0x130>)
 80014b0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff f810 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 80014b8:	2000      	movs	r0, #0
 80014ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	b2ca      	uxtb	r2, r1
 80014c0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	4299      	cmp	r1, r3
 80014ca:	d1c6      	bne.n	800145a <HAL_RCC_ClockConfig+0xa>
 80014cc:	e7ce      	b.n	800146c <HAL_RCC_ClockConfig+0x1c>
 80014ce:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d4:	bf1e      	ittt	ne
 80014d6:	689a      	ldrne	r2, [r3, #8]
 80014d8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80014dc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014de:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e0:	bf42      	ittt	mi
 80014e2:	689a      	ldrmi	r2, [r3, #8]
 80014e4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80014e8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	68a0      	ldr	r0, [r4, #8]
 80014ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80014f2:	4302      	orrs	r2, r0
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	e7bc      	b.n	8001472 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f8:	6862      	ldr	r2, [r4, #4]
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <HAL_RCC_ClockConfig+0x128>)
 80014fc:	2a01      	cmp	r2, #1
 80014fe:	d11d      	bne.n	800153c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001506:	d0a8      	beq.n	800145a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001508:	4e1b      	ldr	r6, [pc, #108]	; (8001578 <HAL_RCC_ClockConfig+0x128>)
 800150a:	68b3      	ldr	r3, [r6, #8]
 800150c:	f023 0303 	bic.w	r3, r3, #3
 8001510:	4313      	orrs	r3, r2
 8001512:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001514:	f7ff f82a 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001518:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800151c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	68b3      	ldr	r3, [r6, #8]
 8001520:	6862      	ldr	r2, [r4, #4]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800152a:	d0a4      	beq.n	8001476 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff f81e 	bl	800056c <HAL_GetTick>
 8001530:	1bc0      	subs	r0, r0, r7
 8001532:	4540      	cmp	r0, r8
 8001534:	d9f3      	bls.n	800151e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001536:	2003      	movs	r0, #3
}
 8001538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153c:	1e91      	subs	r1, r2, #2
 800153e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001540:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001542:	d802      	bhi.n	800154a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001544:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001548:	e7dd      	b.n	8001506 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154a:	f013 0f02 	tst.w	r3, #2
 800154e:	e7da      	b.n	8001506 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001550:	b2ea      	uxtb	r2, r5
 8001552:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	429d      	cmp	r5, r3
 800155c:	f47f af7d 	bne.w	800145a <HAL_RCC_ClockConfig+0xa>
 8001560:	e78f      	b.n	8001482 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001562:	4905      	ldr	r1, [pc, #20]	; (8001578 <HAL_RCC_ClockConfig+0x128>)
 8001564:	68e0      	ldr	r0, [r4, #12]
 8001566:	688b      	ldr	r3, [r1, #8]
 8001568:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800156c:	4303      	orrs	r3, r0
 800156e:	608b      	str	r3, [r1, #8]
 8001570:	e78a      	b.n	8001488 <HAL_RCC_ClockConfig+0x38>
 8001572:	bf00      	nop
 8001574:	40023c00 	.word	0x40023c00
 8001578:	40023800 	.word	0x40023800
 800157c:	080059d6 	.word	0x080059d6
 8001580:	200000a8 	.word	0x200000a8

08001584 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001584:	4b01      	ldr	r3, [pc, #4]	; (800158c <HAL_RCC_GetHCLKFreq+0x8>)
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200000a8 	.word	0x200000a8

08001590 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001590:	b084      	sub	sp, #16
 8001592:	b538      	push	{r3, r4, r5, lr}
 8001594:	ad05      	add	r5, sp, #20
 8001596:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800159a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800159c:	2b01      	cmp	r3, #1
{
 800159e:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80015a0:	d126      	bne.n	80015f0 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80015a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80015a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a8:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80015aa:	68c3      	ldr	r3, [r0, #12]
 80015ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80015b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015b4:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80015b6:	68c3      	ldr	r3, [r0, #12]
 80015b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80015bc:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 80015be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80015c0:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80015c2:	bf02      	ittt	eq
 80015c4:	68c3      	ldreq	r3, [r0, #12]
 80015c6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80015ca:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 80015cc:	f000 f88a 	bl	80016e4 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 80015d0:	9b08      	ldr	r3, [sp, #32]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d107      	bne.n	80015e6 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80015d6:	68a3      	ldr	r3, [r4, #8]
 80015d8:	f043 0306 	orr.w	r3, r3, #6
 80015dc:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80015de:	68a3      	ldr	r3, [r4, #8]
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 80015e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015ea:	2000      	movs	r0, #0
 80015ec:	b004      	add	sp, #16
 80015ee:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80015f0:	68c3      	ldr	r3, [r0, #12]
 80015f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f6:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 80015f8:	f000 f874 	bl	80016e4 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80015fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001600:	63a3      	str	r3, [r4, #56]	; 0x38
 8001602:	e7e5      	b.n	80015d0 <USB_CoreInit+0x40>

08001604 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001604:	6883      	ldr	r3, [r0, #8]
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800160c:	2000      	movs	r0, #0
 800160e:	4770      	bx	lr

08001610 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001610:	6883      	ldr	r3, [r0, #8]
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001618:	2000      	movs	r0, #0
 800161a:	4770      	bx	lr

0800161c <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 800161c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800161e:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8001620:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8001622:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001626:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8001628:	d108      	bne.n	800163c <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800162a:	68c3      	ldr	r3, [r0, #12]
 800162c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001630:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8001632:	2032      	movs	r0, #50	; 0x32
 8001634:	f7fe ffa0 	bl	8000578 <HAL_Delay>
  
  return HAL_OK;
}
 8001638:	2000      	movs	r0, #0
 800163a:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 800163c:	2900      	cmp	r1, #0
 800163e:	d1f8      	bne.n	8001632 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8001640:	68c3      	ldr	r3, [r0, #12]
 8001642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001646:	60c3      	str	r3, [r0, #12]
 8001648:	e7f3      	b.n	8001632 <USB_SetCurrentMode+0x16>
	...

0800164c <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800164c:	0189      	lsls	r1, r1, #6
 800164e:	f041 0120 	orr.w	r1, r1, #32
 8001652:	4a06      	ldr	r2, [pc, #24]	; (800166c <USB_FlushTxFifo+0x20>)
 8001654:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8001656:	3a01      	subs	r2, #1
 8001658:	d005      	beq.n	8001666 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800165a:	6903      	ldr	r3, [r0, #16]
 800165c:	f013 0320 	ands.w	r3, r3, #32
 8001660:	d1f9      	bne.n	8001656 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8001662:	4618      	mov	r0, r3
 8001664:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001666:	2003      	movs	r0, #3
}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	00030d41 	.word	0x00030d41

08001670 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001670:	2310      	movs	r3, #16
 8001672:	4a06      	ldr	r2, [pc, #24]	; (800168c <USB_FlushRxFifo+0x1c>)
 8001674:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8001676:	3a01      	subs	r2, #1
 8001678:	d005      	beq.n	8001686 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800167a:	6903      	ldr	r3, [r0, #16]
 800167c:	f013 0310 	ands.w	r3, r3, #16
 8001680:	d1f9      	bne.n	8001676 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8001682:	4618      	mov	r0, r3
 8001684:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001686:	2003      	movs	r0, #3
}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	00030d41 	.word	0x00030d41

08001690 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8001690:	b510      	push	{r4, lr}
 8001692:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8001696:	b94c      	cbnz	r4, 80016ac <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8001698:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800169a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800169e:	f023 0303 	bic.w	r3, r3, #3
 80016a2:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 80016a6:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 80016a8:	4299      	cmp	r1, r3
 80016aa:	d101      	bne.n	80016b0 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 80016ac:	2000      	movs	r0, #0
 80016ae:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80016b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80016b4:	6010      	str	r0, [r2, #0]
 80016b6:	e7f7      	b.n	80016a8 <USB_WritePacket+0x18>

080016b8 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 80016b8:	3203      	adds	r2, #3
 80016ba:	f022 0203 	bic.w	r2, r2, #3
 80016be:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80016c0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80016c4:	4291      	cmp	r1, r2
 80016c6:	d101      	bne.n	80016cc <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 80016c8:	4608      	mov	r0, r1
 80016ca:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80016cc:	6803      	ldr	r3, [r0, #0]
 80016ce:	f841 3b04 	str.w	r3, [r1], #4
 80016d2:	e7f7      	b.n	80016c4 <USB_ReadPacket+0xc>

080016d4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 80016d4:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 80016d6:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 80016d8:	4010      	ands	r0, r2
 80016da:	4770      	bx	lr

080016dc <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 80016dc:	6940      	ldr	r0, [r0, #20]
}
 80016de:	f000 0001 	and.w	r0, r0, #1
 80016e2:	4770      	bx	lr

080016e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80016e6:	3b01      	subs	r3, #1
 80016e8:	d101      	bne.n	80016ee <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80016ea:	2003      	movs	r0, #3
 80016ec:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80016ee:	6902      	ldr	r2, [r0, #16]
 80016f0:	2a00      	cmp	r2, #0
 80016f2:	daf8      	bge.n	80016e6 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80016f4:	6903      	ldr	r3, [r0, #16]
 80016f6:	4a06      	ldr	r2, [pc, #24]	; (8001710 <USB_CoreReset+0x2c>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80016fe:	3a01      	subs	r2, #1
 8001700:	d0f3      	beq.n	80016ea <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001702:	6903      	ldr	r3, [r0, #16]
 8001704:	f013 0301 	ands.w	r3, r3, #1
 8001708:	d1f9      	bne.n	80016fe <USB_CoreReset+0x1a>
  
  return HAL_OK;
 800170a:	4618      	mov	r0, r3
}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	00030d41 	.word	0x00030d41

08001714 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001714:	b084      	sub	sp, #16
 8001716:	b538      	push	{r3, r4, r5, lr}
 8001718:	4604      	mov	r4, r0
 800171a:	a805      	add	r0, sp, #20
 800171c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 8001726:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001728:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172c:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 800172e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001730:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001734:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001736:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001738:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800173c:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 800173e:	9b07      	ldr	r3, [sp, #28]
 8001740:	2b03      	cmp	r3, #3
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8001742:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8001746:	d13c      	bne.n	80017c2 <USB_HostInit+0xae>
 8001748:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800174c:	d039      	beq.n	80017c2 <USB_HostInit+0xae>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8001756:	2110      	movs	r1, #16
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff ff77 	bl	800164c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff ff86 	bl	8001670 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8001764:	2300      	movs	r3, #0
 8001766:	9906      	ldr	r1, [sp, #24]
 8001768:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800176c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 8001770:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8001772:	428b      	cmp	r3, r1
 8001774:	d12a      	bne.n	80017cc <USB_HostInit+0xb8>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 8001776:	2101      	movs	r1, #1
 8001778:	4620      	mov	r0, r4
 800177a:	f000 f873 	bl	8001864 <USB_DriveVbus>
  
  HAL_Delay(200U);
 800177e:	20c8      	movs	r0, #200	; 0xc8
 8001780:	f7fe fefa 	bl	8000578 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
  
  if(USBx == USB_OTG_FS)
 8001788:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTSTS = 0xFFFFFFFFU;
 800178c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001790:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 8001792:	d120      	bne.n	80017d6 <USB_HostInit+0xc2>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8001798:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 800179c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <USB_HostInit+0xd8>)
 80017a0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80017a4:	9b08      	ldr	r3, [sp, #32]
 80017a6:	b91b      	cbnz	r3, 80017b0 <USB_HostInit+0x9c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80017a8:	69a3      	ldr	r3, [r4, #24]
 80017aa:	f043 0310 	orr.w	r3, r3, #16
 80017ae:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80017b0:	69a2      	ldr	r2, [r4, #24]
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <USB_HostInit+0xdc>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 80017b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017bc:	2000      	movs	r0, #0
 80017be:	b004      	add	sp, #16
 80017c0:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 80017c2:	f023 0304 	bic.w	r3, r3, #4
 80017c6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 80017ca:	e7c4      	b.n	8001756 <USB_HostInit+0x42>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80017cc:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 80017ce:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 80017d0:	60d5      	str	r5, [r2, #12]
 80017d2:	3220      	adds	r2, #32
 80017d4:	e7cd      	b.n	8001772 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x200U; 
 80017d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017da:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 80017dc:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80017e0:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <USB_HostInit+0xe0>)
 80017e4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80017e8:	e7dc      	b.n	80017a4 <USB_HostInit+0x90>
 80017ea:	bf00      	nop
 80017ec:	004000e0 	.word	0x004000e0
 80017f0:	a3200008 	.word	0xa3200008
 80017f4:	00e00300 	.word	0x00e00300

080017f8 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80017f8:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80017fc:	f023 0303 	bic.w	r3, r3, #3
{
 8001800:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001802:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8001806:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 800180a:	f001 0303 	and.w	r3, r1, #3
 800180e:	4323      	orrs	r3, r4
  
  if (freq ==  HCFG_48_MHZ)
 8001810:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001812:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8001816:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 800181a:	d104      	bne.n	8001826 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 800181c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001820:	6053      	str	r3, [r2, #4]
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
  } 
  return HAL_OK;  
}
 8001822:	2000      	movs	r0, #0
 8001824:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 8001826:	2902      	cmp	r1, #2
    USBx_HOST->HFIR = 6000U;
 8001828:	bf04      	itt	eq
 800182a:	f241 7370 	movweq	r3, #6000	; 0x1770
 800182e:	6053      	streq	r3, [r2, #4]
 8001830:	e7f7      	b.n	8001822 <USB_InitFSLSPClkSel+0x2a>

08001832 <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8001832:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8001834:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8001838:	9301      	str	r3, [sp, #4]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 800183a:	9b01      	ldr	r3, [sp, #4]
 800183c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001840:	9301      	str	r3, [sp, #4]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8001842:	9b01      	ldr	r3, [sp, #4]
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001848:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 800184a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (10U);                                /* See Note #1 */
 800184e:	200a      	movs	r0, #10
 8001850:	f7fe fe92 	bl	8000578 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8001854:	9b01      	ldr	r3, [sp, #4]
  return HAL_OK;
}
 8001856:	2000      	movs	r0, #0
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8001858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800185c:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 8001860:	b002      	add	sp, #8
 8001862:	bd10      	pop	{r4, pc}

08001864 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8001864:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8001866:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800186a:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 800186c:	9b01      	ldr	r3, [sp, #4]
 800186e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001872:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8001874:	9b01      	ldr	r3, [sp, #4]
 8001876:	04da      	lsls	r2, r3, #19
 8001878:	d406      	bmi.n	8001888 <USB_DriveVbus+0x24>
 800187a:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 800187c:	bf02      	ittt	eq
 800187e:	9b01      	ldreq	r3, [sp, #4]
 8001880:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8001884:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8001888:	9b01      	ldr	r3, [sp, #4]
 800188a:	04db      	lsls	r3, r3, #19
 800188c:	d505      	bpl.n	800189a <USB_DriveVbus+0x36>
 800188e:	b921      	cbnz	r1, 800189a <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 8001890:	9b01      	ldr	r3, [sp, #4]
 8001892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001896:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 800189a:	2000      	movs	r0, #0
 800189c:	b002      	add	sp, #8
 800189e:	4770      	bx	lr

080018a0 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 80018a0:	b082      	sub	sp, #8
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 80018a2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80018a6:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 80018a8:	9801      	ldr	r0, [sp, #4]
}
 80018aa:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80018ae:	b002      	add	sp, #8
 80018b0:	4770      	bx	lr

080018b2 <USB_GetCurrentFrame>:
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80018b2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80018b6:	6880      	ldr	r0, [r0, #8]
}
 80018b8:	b280      	uxth	r0, r0
 80018ba:	4770      	bx	lr

080018bc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 80018be:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 80018c2:	eb04 1441 	add.w	r4, r4, r1, lsl #5
{
 80018c6:	f89d 5018 	ldrb.w	r5, [sp, #24]
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 80018ca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80018ce:	60a6      	str	r6, [r4, #8]
 80018d0:	b257      	sxtb	r7, r2
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 80018d2:	2d03      	cmp	r5, #3
 80018d4:	d814      	bhi.n	8001900 <USB_HC_Init+0x44>
 80018d6:	e8df f005 	tbb	[pc, r5]
 80018da:	5302      	.short	0x5302
 80018dc:	4d02      	.short	0x4d02
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80018de:	f240 469d 	movw	r6, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 80018e2:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80018e4:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 80018e6:	da04      	bge.n	80018f2 <USB_HC_Init+0x36>
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80018e8:	68e6      	ldr	r6, [r4, #12]
 80018ea:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 80018ee:	60e6      	str	r6, [r4, #12]
 80018f0:	e006      	b.n	8001900 <USB_HC_Init+0x44>
      if(USBx != USB_OTG_FS)
 80018f2:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80018f6:	d003      	beq.n	8001900 <USB_HC_Init+0x44>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80018f8:	68e6      	ldr	r6, [r4, #12]
 80018fa:	f046 0660 	orr.w	r6, r6, #96	; 0x60
 80018fe:	60e6      	str	r6, [r4, #12]
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8001900:	f8d0 c418 	ldr.w	ip, [r0, #1048]	; 0x418
 8001904:	2601      	movs	r6, #1
 8001906:	fa06 f101 	lsl.w	r1, r6, r1
 800190a:	ea41 010c 	orr.w	r1, r1, ip
 800190e:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8001912:	6981      	ldr	r1, [r0, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8001914:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8001916:	02d2      	lsls	r2, r2, #11
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8001918:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 800191c:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8001920:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8001924:	6181      	str	r1, [r0, #24]
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8001926:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8001928:	f8bd 101c 	ldrh.w	r1, [sp, #28]
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 800192c:	f89d 3014 	ldrb.w	r3, [sp, #20]
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8001930:	2f00      	cmp	r7, #0
 8001932:	bfb4      	ite	lt
 8001934:	f44f 4600 	movlt.w	r6, #32768	; 0x8000
 8001938:	2600      	movge	r6, #0
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 800193a:	f3c1 010a 	ubfx	r1, r1, #0, #11
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 800193e:	2b02      	cmp	r3, #2
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8001940:	ea4f 4385 	mov.w	r3, r5, lsl #18
 8001944:	ea42 0201 	orr.w	r2, r2, r1
 8001948:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800194c:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8001950:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8001954:	ea43 0306 	orr.w	r3, r3, r6
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8001958:	bf0c      	ite	eq
 800195a:	f44f 3000 	moveq.w	r0, #131072	; 0x20000
 800195e:	2000      	movne	r0, #0
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8001960:	4303      	orrs	r3, r0
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8001962:	6023      	str	r3, [r4, #0]
    
  if (ep_type == EP_TYPE_INTR)
 8001964:	2d03      	cmp	r5, #3
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8001966:	bf02      	ittt	eq
 8001968:	6823      	ldreq	r3, [r4, #0]
 800196a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 800196e:	6023      	streq	r3, [r4, #0]
  }

  return HAL_OK; 
}
 8001970:	2000      	movs	r0, #0
 8001972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8001974:	f240 669d 	movw	r6, #1693	; 0x69d
    if (epnum & 0x80U) 
 8001978:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800197a:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 800197c:	dac0      	bge.n	8001900 <USB_HC_Init+0x44>
 800197e:	e7b3      	b.n	80018e8 <USB_HC_Init+0x2c>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8001980:	f240 2625 	movw	r6, #549	; 0x225
 8001984:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8001986:	2f00      	cmp	r7, #0
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8001988:	bfbe      	ittt	lt
 800198a:	68e6      	ldrlt	r6, [r4, #12]
 800198c:	f446 76c0 	orrlt.w	r6, r6, #384	; 0x180
 8001990:	60e6      	strlt	r6, [r4, #12]
 8001992:	e7b5      	b.n	8001900 <USB_HC_Init+0x44>

08001994 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	4613      	mov	r3, r2
 80019a0:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 80019a2:	2300      	movs	r3, #0
 80019a4:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 80019a6:	2300      	movs	r3, #0
 80019a8:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 80019ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b2:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019be:	d02b      	beq.n	8001a18 <USB_HC_StartXfer+0x84>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	791b      	ldrb	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d127      	bne.n	8001a18 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10b      	bne.n	80019e6 <USB_HC_StartXfer+0x52>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	795b      	ldrb	r3, [r3, #5]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d107      	bne.n	80019e6 <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	785b      	ldrb	r3, [r3, #1]
 80019da:	4619      	mov	r1, r3
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 fa0f 	bl	8001e00 <USB_DoPing>
      return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e10d      	b.n	8001c02 <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d115      	bne.n	8001a18 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	015a      	lsls	r2, r3, #5
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4413      	add	r3, r2
 80019f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fa:	4619      	mov	r1, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	785b      	ldrb	r3, [r3, #1]
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001a10:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2200      	movs	r2, #0
 8001a16:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d019      	beq.n	8001a54 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	8912      	ldrh	r2, [r2, #8]
 8001a28:	4413      	add	r3, r2
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	8912      	ldrh	r2, [r2, #8]
 8001a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a34:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 8001a36:	8bfa      	ldrh	r2, [r7, #30]
 8001a38:	8b3b      	ldrh	r3, [r7, #24]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d90c      	bls.n	8001a58 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8001a3e:	8b3b      	ldrh	r3, [r7, #24]
 8001a40:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 8001a42:	8bfb      	ldrh	r3, [r7, #30]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	8912      	ldrh	r2, [r2, #8]
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	e001      	b.n	8001a58 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 8001a54:	2301      	movs	r3, #1
 8001a56:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	78db      	ldrb	r3, [r3, #3]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 8001a60:	8bfb      	ldrh	r3, [r7, #30]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	8912      	ldrh	r2, [r2, #8]
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	785b      	ldrb	r3, [r3, #1]
 8001a74:	015a      	lsls	r2, r3, #5
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a7e:	4619      	mov	r1, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8001a88:	8bfb      	ldrh	r3, [r7, #30]
 8001a8a:	04db      	lsls	r3, r3, #19
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	4b5f      	ldr	r3, [pc, #380]	; (8001c0c <USB_HC_StartXfer+0x278>)
 8001a90:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8001a92:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	7a9b      	ldrb	r3, [r3, #10]
 8001a98:	075b      	lsls	r3, r3, #29
 8001a9a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8001a9e:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8001aa0:	610b      	str	r3, [r1, #16]
  
  if (dma)
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00a      	beq.n	8001abe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	785b      	ldrb	r3, [r3, #1]
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bf0c      	ite	eq
 8001ace:	2301      	moveq	r3, #1
 8001ad0:	2300      	movne	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	785b      	ldrb	r3, [r3, #1]
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	015a      	lsls	r2, r3, #5
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001afa:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	785b      	ldrb	r3, [r3, #1]
 8001b00:	015a      	lsls	r2, r3, #5
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	785b      	ldrb	r3, [r3, #1]
 8001b10:	015a      	lsls	r2, r3, #5
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	7f7a      	ldrb	r2, [r7, #29]
 8001b1e:	0752      	lsls	r2, r2, #29
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	785b      	ldrb	r3, [r3, #1]
 8001b28:	015a      	lsls	r2, r3, #5
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b3c:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b44:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	785b      	ldrb	r3, [r3, #1]
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b54:	461a      	mov	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d14f      	bne.n	8001c00 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	78db      	ldrb	r3, [r3, #3]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d14b      	bne.n	8001c00 <USB_HC_StartXfer+0x26c>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d047      	beq.n	8001c00 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	79db      	ldrb	r3, [r3, #7]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d831      	bhi.n	8001bdc <USB_HC_StartXfer+0x248>
 8001b78:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <USB_HC_StartXfer+0x1ec>)
 8001b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7e:	bf00      	nop
 8001b80:	08001b91 	.word	0x08001b91
 8001b84:	08001bb5 	.word	0x08001bb5
 8001b88:	08001b91 	.word	0x08001b91
 8001b8c:	08001bb5 	.word	0x08001bb5
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	3303      	adds	r3, #3
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 8001b9a:	8b7a      	ldrh	r2, [r7, #26]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d91c      	bls.n	8001be0 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f043 0220 	orr.w	r2, r3, #32
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	619a      	str	r2, [r3, #24]
        }
        break;
 8001bb2:	e015      	b.n	8001be0 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	3303      	adds	r3, #3
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 8001bbe:	8b7a      	ldrh	r2, [r7, #26]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d90a      	bls.n	8001be4 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	619a      	str	r2, [r3, #24]
        }
        break;
 8001bda:	e003      	b.n	8001be4 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 8001bdc:	bf00      	nop
 8001bde:	e002      	b.n	8001be6 <USB_HC_StartXfer+0x252>
        break;
 8001be0:	bf00      	nop
 8001be2:	e000      	b.n	8001be6 <USB_HC_StartXfer+0x252>
        break;
 8001be4:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	68d9      	ldr	r1, [r3, #12]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	785a      	ldrb	r2, [r3, #1]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	b298      	uxth	r0, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f7ff fd48 	bl	8001690 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	1ff80000 	.word	0x1ff80000

08001c10 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	b29b      	uxth	r3, r3
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	015a      	lsls	r2, r3, #5
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0c9b      	lsrs	r3, r3, #18
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <USB_HC_Halt+0x40>
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c62:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8001c64:	0c9b      	lsrs	r3, r3, #18
 8001c66:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d160      	bne.n	8001d30 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c8e:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d135      	bne.n	8001d08 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca8:	4619      	mov	r1, r3
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cbc:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cca:	4619      	mov	r1, r3
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	015a      	lsls	r2, r3, #5
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cde:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cec:	d81e      	bhi.n	8001d2c <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	015a      	lsls	r2, r3, #5
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d04:	d0ec      	beq.n	8001ce0 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8001d06:	e074      	b.n	8001df2 <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	015a      	lsls	r2, r3, #5
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d14:	4619      	mov	r1, r3
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d28:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8001d2a:	e062      	b.n	8001df2 <USB_HC_Halt+0x1c4>
          break;
 8001d2c:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8001d2e:	e060      	b.n	8001df2 <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	015a      	lsls	r2, r3, #5
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d50:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d135      	bne.n	8001dcc <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d80:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8e:	4619      	mov	r1, r3
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	015a      	lsls	r2, r3, #5
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001da2:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3301      	adds	r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001db0:	d81e      	bhi.n	8001df0 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dc8:	d0ec      	beq.n	8001da4 <USB_HC_Halt+0x176>
 8001dca:	e012      	b.n	8001df2 <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	4619      	mov	r1, r3
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dec:	600b      	str	r3, [r1, #0]
 8001dee:	e000      	b.n	8001df2 <USB_HC_Halt+0x1c4>
          break;
 8001df0:	bf00      	nop
    }
  }
  
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e20:	461a      	mov	r2, r3
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	04db      	lsls	r3, r3, #19
 8001e26:	4619      	mov	r1, r3
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <USB_DoPing+0x74>)
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e30:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e48:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e50:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	1ff80000 	.word	0x1ff80000

08001e78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fbc3 	bl	8001610 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff fbdd 	bl	800164c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fbec 	bl	8001670 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	75fb      	strb	r3, [r7, #23]
 8001e9c:	e01f      	b.n	8001ede <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001eb4:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ebc:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ec4:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	015a      	lsls	r2, r3, #5
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	3301      	adds	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	2b0f      	cmp	r3, #15
 8001ee2:	d9dc      	bls.n	8001e9e <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	75fb      	strb	r3, [r7, #23]
 8001ee8:	e034      	b.n	8001f54 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f00:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f08:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f10:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	3301      	adds	r3, #1
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f30:	d80c      	bhi.n	8001f4c <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001f32:	7dfb      	ldrb	r3, [r7, #23]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f48:	d0ec      	beq.n	8001f24 <USB_StopHost+0xac>
 8001f4a:	e000      	b.n	8001f4e <USB_StopHost+0xd6>
        break;
 8001f4c:	bf00      	nop
  for (i = 0; i <= 15; i++)
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	3301      	adds	r3, #1
 8001f52:	75fb      	strb	r3, [r7, #23]
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
 8001f56:	2b0f      	cmp	r3, #15
 8001f58:	d9c7      	bls.n	8001eea <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f60:	461a      	mov	r2, r3
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f66:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f6e:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff fb47 	bl	8001604 <USB_EnableGlobalInt>
  return HAL_OK;  
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <USBH_AUDIO_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess (USBH_HandleTypeDef *phost)
{  
  return USBH_OK;
}
 8001f80:	2000      	movs	r0, #0
 8001f82:	4770      	bx	lr

08001f84 <USBH_AUDIO_FindLinkedUnit>:
static int32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
  uint8_t Index;  
  AUDIO_HandleTypeDef *AUDIO_Handle;
  
  AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;    
 8001f84:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 8001f88:	69db      	ldr	r3, [r3, #28]
{
 8001f8a:	b570      	push	{r4, r5, r6, lr}
  
  /* Find Feature Unit */
  for(Index = 0; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8001f8c:	f8b3 50ee 	ldrh.w	r5, [r3, #238]	; 0xee
 8001f90:	2200      	movs	r2, #0
 8001f92:	b2d0      	uxtb	r0, r2
 8001f94:	42a8      	cmp	r0, r5
 8001f96:	d314      	bcc.n	8001fc2 <USBH_AUDIO_FindLinkedUnit+0x3e>
      return ((UnitID << 16) | (UAC_FEATURE_UNIT << 8) | Index);
    }
  }
  
  /* Find Mixer Unit */
  for(Index = 0; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8001f98:	f8b3 50f2 	ldrh.w	r5, [r3, #242]	; 0xf2
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	b2d0      	uxtb	r0, r2
 8001fa0:	42a8      	cmp	r0, r5
 8001fa2:	d31c      	bcc.n	8001fde <USBH_AUDIO_FindLinkedUnit+0x5a>
    }
  }
  
  
  /* Find Selector Unit */
  for(Index = 0; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8001fa4:	f8b3 50f0 	ldrh.w	r5, [r3, #240]	; 0xf0
 8001fa8:	2200      	movs	r2, #0
 8001faa:	b2d0      	uxtb	r0, r2
 8001fac:	42a8      	cmp	r0, r5
 8001fae:	d327      	bcc.n	8002000 <USBH_AUDIO_FindLinkedUnit+0x7c>
    }
  }  
  
  
  /* Find OT Unit */  
  for(Index = 0; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8001fb0:	f8b3 50ec 	ldrh.w	r5, [r3, #236]	; 0xec
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	b2d0      	uxtb	r0, r2
 8001fb8:	42a8      	cmp	r0, r5
 8001fba:	d32d      	bcc.n	8002018 <USBH_AUDIO_FindLinkedUnit+0x94>
      return ((UnitID << 16) | (UAC_OUTPUT_TERMINAL << 8) | Index);
    }
  } 
  
  /* No associated Unit found */
  return -1;
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001fc0:	bd70      	pop	{r4, r5, r6, pc}
    if(AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 8001fc2:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8001fc6:	3201      	adds	r2, #1
 8001fc8:	f8d4 4090 	ldr.w	r4, [r4, #144]	; 0x90
 8001fcc:	7926      	ldrb	r6, [r4, #4]
 8001fce:	428e      	cmp	r6, r1
 8001fd0:	d1df      	bne.n	8001f92 <USBH_AUDIO_FindLinkedUnit+0xe>
      return ((UnitID << 16) | (UAC_FEATURE_UNIT << 8) | Index);
 8001fd2:	78e3      	ldrb	r3, [r4, #3]
 8001fd4:	f440 60c0 	orr.w	r0, r0, #1536	; 0x600
      return ((UnitID << 16) | (UAC_OUTPUT_TERMINAL << 8) | Index);
 8001fd8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001fdc:	bd70      	pop	{r4, r5, r6, pc}
    if((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID)||
 8001fde:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8001fe2:	f8d4 40a0 	ldr.w	r4, [r4, #160]	; 0xa0
 8001fe6:	7966      	ldrb	r6, [r4, #5]
 8001fe8:	428e      	cmp	r6, r1
 8001fea:	d103      	bne.n	8001ff4 <USBH_AUDIO_FindLinkedUnit+0x70>
      return ((UnitID << 16) | (UAC_MIXER_UNIT << 8) | Index);
 8001fec:	78e3      	ldrb	r3, [r4, #3]
 8001fee:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8001ff2:	e7f1      	b.n	8001fd8 <USBH_AUDIO_FindLinkedUnit+0x54>
    if((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID)||
 8001ff4:	79a6      	ldrb	r6, [r4, #6]
 8001ff6:	428e      	cmp	r6, r1
 8001ff8:	f102 0201 	add.w	r2, r2, #1
 8001ffc:	d1cf      	bne.n	8001f9e <USBH_AUDIO_FindLinkedUnit+0x1a>
 8001ffe:	e7f5      	b.n	8001fec <USBH_AUDIO_FindLinkedUnit+0x68>
    if(AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8002000:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8002004:	3201      	adds	r2, #1
 8002006:	f8d4 40b0 	ldr.w	r4, [r4, #176]	; 0xb0
 800200a:	7966      	ldrb	r6, [r4, #5]
 800200c:	428e      	cmp	r6, r1
 800200e:	d1cc      	bne.n	8001faa <USBH_AUDIO_FindLinkedUnit+0x26>
      return ((UnitID << 16) | (UAC_SELECTOR_UNIT << 8) | Index); 
 8002010:	78e3      	ldrb	r3, [r4, #3]
 8002012:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
 8002016:	e7df      	b.n	8001fd8 <USBH_AUDIO_FindLinkedUnit+0x54>
    if(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8002018:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800201c:	3201      	adds	r2, #1
 800201e:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 8002022:	79e6      	ldrb	r6, [r4, #7]
 8002024:	428e      	cmp	r6, r1
 8002026:	d1c6      	bne.n	8001fb6 <USBH_AUDIO_FindLinkedUnit+0x32>
      return ((UnitID << 16) | (UAC_OUTPUT_TERMINAL << 8) | Index);
 8002028:	78e3      	ldrb	r3, [r4, #3]
 800202a:	f440 7040 	orr.w	r0, r0, #768	; 0x300
 800202e:	e7d3      	b.n	8001fd8 <USBH_AUDIO_FindLinkedUnit+0x54>

08002030 <USBH_AUDIO_InterfaceDeInit>:
{
 8002030:	b538      	push	{r3, r4, r5, lr}
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData; 
 8002032:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 8002036:	69dc      	ldr	r4, [r3, #28]
  if(AUDIO_Handle->microphone.Pipe != 0x00)
 8002038:	f894 1143 	ldrb.w	r1, [r4, #323]	; 0x143
{
 800203c:	4605      	mov	r5, r0
  if(AUDIO_Handle->microphone.Pipe != 0x00)
 800203e:	b149      	cbz	r1, 8002054 <USBH_AUDIO_InterfaceDeInit+0x24>
    USBH_ClosePipe  (phost, AUDIO_Handle->microphone.Pipe);
 8002040:	f003 f830 	bl	80050a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, AUDIO_Handle->microphone.Pipe);
 8002044:	f894 1143 	ldrb.w	r1, [r4, #323]	; 0x143
 8002048:	4628      	mov	r0, r5
 800204a:	f003 f848 	bl	80050de <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0;     /* Reset the pipe as Free */  
 800204e:	2300      	movs	r3, #0
 8002050:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
  if( AUDIO_Handle->headphone.Pipe != 0x00)
 8002054:	f894 10fb 	ldrb.w	r1, [r4, #251]	; 0xfb
 8002058:	b151      	cbz	r1, 8002070 <USBH_AUDIO_InterfaceDeInit+0x40>
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 800205a:	4628      	mov	r0, r5
 800205c:	f003 f822 	bl	80050a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost,  AUDIO_Handle->headphone.Pipe);
 8002060:	f894 10fb 	ldrb.w	r1, [r4, #251]	; 0xfb
 8002064:	4628      	mov	r0, r5
 8002066:	f003 f83a 	bl	80050de <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0;     /* Reset the pipe as Free */  
 800206a:	2300      	movs	r3, #0
 800206c:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
  if( AUDIO_Handle->control.Pipe != 0x00)
 8002070:	f894 118a 	ldrb.w	r1, [r4, #394]	; 0x18a
 8002074:	b151      	cbz	r1, 800208c <USBH_AUDIO_InterfaceDeInit+0x5c>
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8002076:	4628      	mov	r0, r5
 8002078:	f003 f814 	bl	80050a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost,  AUDIO_Handle->control.Pipe);
 800207c:	f894 118a 	ldrb.w	r1, [r4, #394]	; 0x18a
 8002080:	4628      	mov	r0, r5
 8002082:	f003 f82c 	bl	80050de <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0;     /* Reset the pipe as Free */  
 8002086:	2300      	movs	r3, #0
 8002088:	f884 318a 	strb.w	r3, [r4, #394]	; 0x18a
  if(phost->pActiveClass->pData)
 800208c:	f8d5 3544 	ldr.w	r3, [r5, #1348]	; 0x544
 8002090:	69d8      	ldr	r0, [r3, #28]
 8002092:	b128      	cbz	r0, 80020a0 <USBH_AUDIO_InterfaceDeInit+0x70>
    USBH_free (phost->pActiveClass->pData);
 8002094:	f003 fba0 	bl	80057d8 <free>
    phost->pActiveClass->pData = 0;
 8002098:	f8d5 3544 	ldr.w	r3, [r5, #1348]	; 0x544
 800209c:	2200      	movs	r2, #0
 800209e:	61da      	str	r2, [r3, #28]
}
 80020a0:	2000      	movs	r0, #0
 80020a2:	bd38      	pop	{r3, r4, r5, pc}

080020a4 <USBH_AUDIO_InterfaceInit>:
{
 80020a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00);
 80020a8:	2201      	movs	r2, #1
{
 80020aa:	b087      	sub	sp, #28
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00);
 80020ac:	2300      	movs	r3, #0
 80020ae:	4611      	mov	r1, r2
{
 80020b0:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00);
 80020b2:	f002 fb9f 	bl	80047f4 <USBH_FindInterface>
  if(interface == 0xFF) /* Not Valid Interface */
 80020b6:	28ff      	cmp	r0, #255	; 0xff
 80020b8:	d103      	bne.n	80020c2 <USBH_AUDIO_InterfaceInit+0x1e>
    status = USBH_FAIL;      
 80020ba:	2002      	movs	r0, #2
}
 80020bc:	b007      	add	sp, #28
 80020be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc (sizeof(AUDIO_HandleTypeDef));
 80020c2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80020c6:	f8d5 6544 	ldr.w	r6, [r5, #1348]	; 0x544
 80020ca:	f003 fb7d 	bl	80057c8 <malloc>
    USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 80020ce:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc (sizeof(AUDIO_HandleTypeDef));
 80020d2:	61f0      	str	r0, [r6, #28]
    USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 80020d4:	2100      	movs	r1, #0
    phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc (sizeof(AUDIO_HandleTypeDef));
 80020d6:	4604      	mov	r4, r0
    USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 80020d8:	f003 fb91 	bl	80057fe <memset>
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData; 
 80020dc:	69f6      	ldr	r6, [r6, #28]
 80020de:	462f      	mov	r7, r5
 80020e0:	f505 78fa 	add.w	r8, r5, #500	; 0x1f4
 80020e4:	462b      	mov	r3, r5
  alt_settings = 0;
 80020e6:	2200      	movs	r2, #0
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;   
 80020e8:	f04f 090a 	mov.w	r9, #10
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 80020ec:	f893 c341 	ldrb.w	ip, [r3, #833]	; 0x341
 80020f0:	f1bc 0f01 	cmp.w	ip, #1
 80020f4:	d123      	bne.n	800213e <USBH_AUDIO_InterfaceInit+0x9a>
 80020f6:	f893 1342 	ldrb.w	r1, [r3, #834]	; 0x342
 80020fa:	2902      	cmp	r1, #2
 80020fc:	d11f      	bne.n	800213e <USBH_AUDIO_InterfaceInit+0x9a>
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)&&
 80020fe:	f893 0348 	ldrb.w	r0, [r3, #840]	; 0x348
 8002102:	0601      	lsls	r1, r0, #24
 8002104:	d51b      	bpl.n	800213e <USBH_AUDIO_InterfaceInit+0x9a>
         (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0))
 8002106:	f8b3 134a 	ldrh.w	r1, [r3, #842]	; 0x34a
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)&&
 800210a:	b1c1      	cbz	r1, 800213e <USBH_AUDIO_InterfaceInit+0x9a>
 800210c:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
 8002110:	eb06 0e4e 	add.w	lr, r6, lr, lsl #1
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002114:	f88e 0006 	strb.w	r0, [lr, #6]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002118:	f8ae 1008 	strh.w	r1, [lr, #8]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;        
 800211c:	f893 133e 	ldrb.w	r1, [r3, #830]	; 0x33e
 8002120:	f88e 100b 	strb.w	r1, [lr, #11]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8002124:	f893 133f 	ldrb.w	r1, [r3, #831]	; 0x33f
 8002128:	f88e 100a 	strb.w	r1, [lr, #10]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;   
 800212c:	fb09 6102 	mla	r1, r9, r2, r6
 8002130:	f893 034c 	ldrb.w	r0, [r3, #844]	; 0x34c
 8002134:	81c8      	strh	r0, [r1, #14]
        alt_settings++;
 8002136:	3201      	adds	r2, #1
        AUDIO_Handle->stream_in[alt_settings].valid = 1; 
 8002138:	f88e c00c 	strb.w	ip, [lr, #12]
        alt_settings++;
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	3332      	adds	r3, #50	; 0x32
  for (interface = 0;  interface < USBH_MAX_NUM_INTERFACES ; interface ++ )
 8002140:	4543      	cmp	r3, r8
 8002142:	d1d3      	bne.n	80020ec <USBH_AUDIO_InterfaceInit+0x48>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8002144:	2a00      	cmp	r2, #0
 8002146:	bf14      	ite	ne
 8002148:	f04f 0900 	movne.w	r9, #0
 800214c:	f04f 0902 	moveq.w	r9, #2
     status = USBH_OK;
 8002150:	462a      	mov	r2, r5
  alt_settings = 0;
 8002152:	2100      	movs	r1, #0
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002154:	f04f 0a0a 	mov.w	sl, #10
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 8002158:	f892 8341 	ldrb.w	r8, [r2, #833]	; 0x341
 800215c:	f1b8 0f01 	cmp.w	r8, #1
 8002160:	d121      	bne.n	80021a6 <USBH_AUDIO_InterfaceInit+0x102>
 8002162:	f892 0342 	ldrb.w	r0, [r2, #834]	; 0x342
 8002166:	2802      	cmp	r0, #2
 8002168:	d11d      	bne.n	80021a6 <USBH_AUDIO_InterfaceInit+0x102>
      if(((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80) == 0x00)&&
 800216a:	f892 e348 	ldrb.w	lr, [r2, #840]	; 0x348
 800216e:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8002172:	d118      	bne.n	80021a6 <USBH_AUDIO_InterfaceInit+0x102>
         (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0))        
 8002174:	f8b2 034a 	ldrh.w	r0, [r2, #842]	; 0x34a
      if(((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80) == 0x00)&&
 8002178:	b1a8      	cbz	r0, 80021a6 <USBH_AUDIO_InterfaceInit+0x102>
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800217a:	fb0a 6c01 	mla	ip, sl, r1, r6
        alt_settings++;
 800217e:	3101      	adds	r1, #1
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002180:	f88c e038 	strb.w	lr, [ip, #56]	; 0x38
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002184:	f8ac 003a 	strh.w	r0, [ip, #58]	; 0x3a
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8002188:	f892 033e 	ldrb.w	r0, [r2, #830]	; 0x33e
 800218c:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8002190:	f892 033f 	ldrb.w	r0, [r2, #831]	; 0x33f
 8002194:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;           
 8002198:	f892 034c 	ldrb.w	r0, [r2, #844]	; 0x34c
 800219c:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40
        AUDIO_Handle->stream_out[alt_settings].valid = 1; 
 80021a0:	f88c 803e 	strb.w	r8, [ip, #62]	; 0x3e
        alt_settings++;
 80021a4:	b2c9      	uxtb	r1, r1
 80021a6:	3232      	adds	r2, #50	; 0x32
  for (interface = 0;  interface < USBH_MAX_NUM_INTERFACES ; interface ++ )
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d1d5      	bne.n	8002158 <USBH_AUDIO_InterfaceInit+0xb4>
  if(alt_settings > 0)
 80021ac:	2900      	cmp	r1, #0
 80021ae:	f000 81fa 	beq.w	80025a6 <USBH_AUDIO_InterfaceInit+0x502>
  alt_settings = 0;
 80021b2:	2200      	movs	r2, #0
 80021b4:	4623      	mov	r3, r4
 80021b6:	f104 0c32 	add.w	ip, r4, #50	; 0x32
 80021ba:	4610      	mov	r0, r2
        if( AUDIO_Handle->stream_out[index].valid == 1)
 80021bc:	f893 e03e 	ldrb.w	lr, [r3, #62]	; 0x3e
 80021c0:	f1be 0f01 	cmp.w	lr, #1
 80021c4:	d117      	bne.n	80021f6 <USBH_AUDIO_InterfaceInit+0x152>
          if(ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 80021c6:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 80021c8:	4281      	cmp	r1, r0
 80021ca:	d914      	bls.n	80021f6 <USBH_AUDIO_InterfaceInit+0x152>
            AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 80021cc:	f893 003d 	ldrb.w	r0, [r3, #61]	; 0x3d
 80021d0:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
            AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;           
 80021d4:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
 80021d8:	f884 00f9 	strb.w	r0, [r4, #249]	; 0xf9
            AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 80021dc:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 80021e0:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
            AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize; 
 80021e4:	f8a4 10f6 	strh.w	r1, [r4, #246]	; 0xf6
            AUDIO_Handle->headphone.Poll = AUDIO_Handle->stream_out[index].Poll;
 80021e8:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
 80021ec:	f884 00fc 	strb.w	r0, [r4, #252]	; 0xfc
            AUDIO_Handle->headphone.supported = 1;  
 80021f0:	f884 e0fa 	strb.w	lr, [r4, #250]	; 0xfa
 80021f4:	4608      	mov	r0, r1
        if( AUDIO_Handle->stream_in[index].valid == 1)
 80021f6:	f893 e00c 	ldrb.w	lr, [r3, #12]
 80021fa:	f1be 0f01 	cmp.w	lr, #1
 80021fe:	d114      	bne.n	800222a <USBH_AUDIO_InterfaceInit+0x186>
          if(ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8002200:	8919      	ldrh	r1, [r3, #8]
 8002202:	4291      	cmp	r1, r2
 8002204:	d911      	bls.n	800222a <USBH_AUDIO_InterfaceInit+0x186>
            AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 8002206:	7ada      	ldrb	r2, [r3, #11]
 8002208:	f884 2140 	strb.w	r2, [r4, #320]	; 0x140
            AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;                
 800220c:	7a9a      	ldrb	r2, [r3, #10]
 800220e:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
            AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 8002212:	799a      	ldrb	r2, [r3, #6]
 8002214:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
            AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 8002218:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
            AUDIO_Handle->microphone.Poll = AUDIO_Handle->stream_out[index].Poll;         
 800221c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002220:	f884 2144 	strb.w	r2, [r4, #324]	; 0x144
            AUDIO_Handle->microphone.supported = 1;       
 8002224:	f884 e142 	strb.w	lr, [r4, #322]	; 0x142
 8002228:	460a      	mov	r2, r1
 800222a:	330a      	adds	r3, #10
      for (index = 0; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 800222c:	459c      	cmp	ip, r3
 800222e:	d1c5      	bne.n	80021bc <USBH_AUDIO_InterfaceInit+0x118>
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFF);
 8002230:	2201      	movs	r2, #1
 8002232:	23ff      	movs	r3, #255	; 0xff
 8002234:	4611      	mov	r1, r2
 8002236:	4628      	mov	r0, r5
 8002238:	f002 fadc 	bl	80047f4 <USBH_FindInterface>
  if(interface != 0xFF)
 800223c:	28ff      	cmp	r0, #255	; 0xff
 800223e:	d020      	beq.n	8002282 <USBH_AUDIO_InterfaceInit+0x1de>
 8002240:	2300      	movs	r3, #0
      if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03)&& /*HID*/
 8002242:	f897 2341 	ldrb.w	r2, [r7, #833]	; 0x341
 8002246:	2a03      	cmp	r2, #3
 8002248:	d14a      	bne.n	80022e0 <USBH_AUDIO_InterfaceInit+0x23c>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0))
 800224a:	f8b7 234a 	ldrh.w	r2, [r7, #842]	; 0x34a
      if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03)&& /*HID*/
 800224e:	2a00      	cmp	r2, #0
 8002250:	d046      	beq.n	80022e0 <USBH_AUDIO_InterfaceInit+0x23c>
        if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80) == 0x80)
 8002252:	f897 1348 	ldrb.w	r1, [r7, #840]	; 0x348
 8002256:	0608      	lsls	r0, r1, #24
 8002258:	d542      	bpl.n	80022e0 <USBH_AUDIO_InterfaceInit+0x23c>
          AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800225a:	f8a6 2186 	strh.w	r2, [r6, #390]	; 0x186
          AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;          
 800225e:	2232      	movs	r2, #50	; 0x32
 8002260:	fb02 5303 	mla	r3, r2, r3, r5
          AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002264:	f886 1184 	strb.w	r1, [r6, #388]	; 0x184
          AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;          
 8002268:	f893 233e 	ldrb.w	r2, [r3, #830]	; 0x33e
 800226c:	f886 2188 	strb.w	r2, [r6, #392]	; 0x188
          AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8002270:	f893 334c 	ldrb.w	r3, [r3, #844]	; 0x34c
 8002274:	f886 318b 	strb.w	r3, [r6, #395]	; 0x18b
          AUDIO_Handle->control.supported = 1;
 8002278:	2301      	movs	r3, #1
 800227a:	f886 3189 	strb.w	r3, [r6, #393]	; 0x189
        AUDIO_Handle->control.supported = 1;
 800227e:	f884 3189 	strb.w	r3, [r4, #393]	; 0x189
  AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;  
 8002282:	f8d5 3544 	ldr.w	r3, [r5, #1348]	; 0x544
  ptr = USB_LEN_CFG_DESC;
 8002286:	f10d 0918 	add.w	r9, sp, #24
  AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;  
 800228a:	69de      	ldr	r6, [r3, #28]
  ptr = USB_LEN_CFG_DESC;
 800228c:	2309      	movs	r3, #9
 800228e:	f829 3d02 	strh.w	r3, [r9, #-2]!
  AUDIO_Handle->class_desc.FeatureUnitNum = 0;
 8002292:	2300      	movs	r3, #0
  pdesc   = (USBH_DescHeader_t *)(phost->device.CfgDesc_Raw);
 8002294:	f105 071c 	add.w	r7, r5, #28
  AUDIO_Handle->class_desc.FeatureUnitNum = 0;
 8002298:	f8a6 30ee 	strh.w	r3, [r6, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0;
 800229c:	f8a6 30ea 	strh.w	r3, [r6, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0;  
 80022a0:	f8a6 30ec 	strh.w	r3, [r6, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0;
 80022a4:	f8a6 30e8 	strh.w	r3, [r6, #232]	; 0xe8
  int8_t                        itf_number = 0; 
 80022a8:	4698      	mov	r8, r3
  int8_t                        itf_index = 0;
 80022aa:	469b      	mov	fp, r3
        ParseCSDescriptors(&AUDIO_Handle->class_desc,
 80022ac:	f04f 0a32 	mov.w	sl, #50	; 0x32
  while(ptr < phost->device.CfgDesc.wTotalLength)
 80022b0:	f8b5 2334 	ldrh.w	r2, [r5, #820]	; 0x334
 80022b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d817      	bhi.n	80022ec <USBH_AUDIO_InterfaceInit+0x248>
      if(AUDIO_Handle->headphone.supported == 1)
 80022bc:	f894 30fa 	ldrb.w	r3, [r4, #250]	; 0xfa
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	f040 80ef 	bne.w	80024a4 <USBH_AUDIO_InterfaceInit+0x400>
  uint8_t UnitID = 0, Type, Index;
  uint32_t value;
  uint8_t terminalIndex;  
  AUDIO_HandleTypeDef *AUDIO_Handle;
  
  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;    
 80022c6:	f8d5 3544 	ldr.w	r3, [r5, #1348]	; 0x544
 80022ca:	69de      	ldr	r6, [r3, #28]
  
  /* Find association between audio streaming and microphone */
  for(terminalIndex = 0; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80022cc:	f8b6 00ea 	ldrh.w	r0, [r6, #234]	; 0xea
 80022d0:	2200      	movs	r2, #0
  {
    if(LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 80022d2:	f240 1701 	movw	r7, #257	; 0x101
  for(terminalIndex = 0; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80022d6:	b2d3      	uxtb	r3, r2
 80022d8:	4283      	cmp	r3, r0
 80022da:	d379      	bcc.n	80023d0 <USBH_AUDIO_InterfaceInit+0x32c>
  uint8_t UnitID = 0, Type, Index;
 80022dc:	2100      	movs	r1, #0
 80022de:	e087      	b.n	80023f0 <USBH_AUDIO_InterfaceInit+0x34c>
 80022e0:	3301      	adds	r3, #1
    for (interface = 0;  interface < USBH_MAX_NUM_INTERFACES ; interface ++ )
 80022e2:	2b0a      	cmp	r3, #10
 80022e4:	f107 0732 	add.w	r7, r7, #50	; 0x32
 80022e8:	d1ab      	bne.n	8002242 <USBH_AUDIO_InterfaceInit+0x19e>
 80022ea:	e7ca      	b.n	8002282 <USBH_AUDIO_InterfaceInit+0x1de>
    pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 80022ec:	4638      	mov	r0, r7
 80022ee:	4649      	mov	r1, r9
 80022f0:	f002 fc1b 	bl	8004b2a <USBH_GetNextDesc>
    switch (pdesc->bDescriptorType)
 80022f4:	7843      	ldrb	r3, [r0, #1]
 80022f6:	2b04      	cmp	r3, #4
    pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 80022f8:	4607      	mov	r7, r0
    switch (pdesc->bDescriptorType)
 80022fa:	d014      	beq.n	8002326 <USBH_AUDIO_InterfaceInit+0x282>
 80022fc:	2b24      	cmp	r3, #36	; 0x24
 80022fe:	d1d7      	bne.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
      if(itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8002300:	f895 3336 	ldrb.w	r3, [r5, #822]	; 0x336
 8002304:	4598      	cmp	r8, r3
 8002306:	dcd3      	bgt.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
        ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8002308:	fb0a 530b 	mla	r3, sl, fp, r5
 800230c:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
  if(ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 8002310:	2b01      	cmp	r3, #1
 8002312:	d145      	bne.n	80023a0 <USBH_AUDIO_InterfaceInit+0x2fc>
    switch(pdesc[2])
 8002314:	7883      	ldrb	r3, [r0, #2]
 8002316:	3b01      	subs	r3, #1
 8002318:	2b05      	cmp	r3, #5
 800231a:	d8c9      	bhi.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
 800231c:	e8df f003 	tbb	[pc, r3]
 8002320:	36180f0d 	.word	0x36180f0d
 8002324:	222c      	.short	0x222c
      itf_number = *((uint8_t *)pdesc + 2);
 8002326:	7881      	ldrb	r1, [r0, #2]
      itf_index = USBH_FindInterfaceIndex (phost, itf_number, alt_setting);     
 8002328:	78c2      	ldrb	r2, [r0, #3]
 800232a:	4628      	mov	r0, r5
      itf_number = *((uint8_t *)pdesc + 2);
 800232c:	fa4f f881 	sxtb.w	r8, r1
      itf_index = USBH_FindInterfaceIndex (phost, itf_number, alt_setting);     
 8002330:	f002 fa7d 	bl	800482e <USBH_FindInterfaceIndex>
 8002334:	fa4f fb80 	sxtb.w	fp, r0
 8002338:	e7ba      	b.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
      class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)pdesc;    
 800233a:	66f0      	str	r0, [r6, #108]	; 0x6c
 800233c:	e7b8      	b.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
      class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef*) pdesc;    
 800233e:	f8b6 30ea 	ldrh.w	r3, [r6, #234]	; 0xea
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002348:	f8a6 20ea 	strh.w	r2, [r6, #234]	; 0xea
 800234c:	6718      	str	r0, [r3, #112]	; 0x70
 800234e:	e7af      	b.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
      class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef*) pdesc;   
 8002350:	f8b6 30ec 	ldrh.w	r3, [r6, #236]	; 0xec
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800235a:	f8a6 20ec 	strh.w	r2, [r6, #236]	; 0xec
 800235e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 8002362:	e7a5      	b.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
      class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef*) pdesc; 
 8002364:	f8b6 30ee 	ldrh.w	r3, [r6, #238]	; 0xee
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800236e:	f8a6 20ee 	strh.w	r2, [r6, #238]	; 0xee
 8002372:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
 8002376:	e79b      	b.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
      class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef*) pdesc; 
 8002378:	f8b6 30f0 	ldrh.w	r3, [r6, #240]	; 0xf0
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002382:	f8a6 20f0 	strh.w	r2, [r6, #240]	; 0xf0
 8002386:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
 800238a:	e791      	b.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
      class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef*) pdesc; 
 800238c:	f8b6 30f2 	ldrh.w	r3, [r6, #242]	; 0xf2
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002396:	f8a6 20f2 	strh.w	r2, [r6, #242]	; 0xf2
 800239a:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
 800239e:	e787      	b.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
  else if(ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d185      	bne.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
    switch(pdesc[2])
 80023a4:	7883      	ldrb	r3, [r0, #2]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d00b      	beq.n	80023c2 <USBH_AUDIO_InterfaceInit+0x31e>
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d180      	bne.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
      class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef*) pdesc; 
 80023ae:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80023b8:	f8a6 20e8 	strh.w	r2, [r6, #232]	; 0xe8
 80023bc:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
 80023c0:	e776      	b.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
      class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef*) pdesc; 
 80023c2:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80023c6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80023ca:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 80023ce:	e76f      	b.n	80022b0 <USBH_AUDIO_InterfaceInit+0x20c>
    if(LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 80023d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80023d4:	3201      	adds	r2, #1
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	f893 e005 	ldrb.w	lr, [r3, #5]
 80023dc:	7919      	ldrb	r1, [r3, #4]
 80023de:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 80023e2:	42b9      	cmp	r1, r7
 80023e4:	f47f af77 	bne.w	80022d6 <USBH_AUDIO_InterfaceInit+0x232>
    {    
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 80023e8:	78d9      	ldrb	r1, [r3, #3]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 80023ea:	79db      	ldrb	r3, [r3, #7]
 80023ec:	f886 3109 	strb.w	r3, [r6, #265]	; 0x109
      break;
    }
  }
  
  for(Index = 0; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80023f0:	f8b6 00e8 	ldrh.w	r0, [r6, #232]	; 0xe8
 80023f4:	2200      	movs	r2, #0
 80023f6:	b2d3      	uxtb	r3, r2
 80023f8:	4283      	cmp	r3, r0
 80023fa:	d209      	bcs.n	8002410 <USBH_AUDIO_InterfaceInit+0x36c>
  {
    if(AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 80023fc:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 8002400:	3201      	adds	r2, #1
 8002402:	f8d7 70c0 	ldr.w	r7, [r7, #192]	; 0xc0
 8002406:	78ff      	ldrb	r7, [r7, #3]
 8002408:	428f      	cmp	r7, r1
 800240a:	d1f4      	bne.n	80023f6 <USBH_AUDIO_InterfaceInit+0x352>
    {    
      AUDIO_Handle->headphone.asociated_as = Index;
 800240c:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
      AUDIO_Handle->headphone.asociated_selector = Index;
      break;
      
    case UAC_OUTPUT_TERMINAL:
      AUDIO_Handle->headphone.asociated_terminal = Index;
      if(LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 8002410:	f240 1703 	movw	r7, #259	; 0x103
    value =  USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8002414:	4628      	mov	r0, r5
 8002416:	f7ff fdb5 	bl	8001f84 <USBH_AUDIO_FindLinkedUnit>
    Type   = (value >> 8) & 0xFF;
 800241a:	f3c0 2207 	ubfx	r2, r0, #8, #8
    switch (Type)
 800241e:	f1a2 0e03 	sub.w	lr, r2, #3
    Index = value & 0xFF;
 8002422:	b2c3      	uxtb	r3, r0
    UnitID   = (value >> 16) & 0xFF;
 8002424:	f3c0 4107 	ubfx	r1, r0, #16, #8
    switch (Type)
 8002428:	f1be 0f03 	cmp.w	lr, #3
 800242c:	d805      	bhi.n	800243a <USBH_AUDIO_InterfaceInit+0x396>
 800242e:	e8df f00e 	tbb	[pc, lr]
 8002432:	090f      	.short	0x090f
 8002434:	020c      	.short	0x020c
      AUDIO_Handle->headphone.asociated_feature = Index;
 8002436:	f886 3107 	strb.w	r3, [r6, #263]	; 0x107
        return  USBH_OK;
      }
      break;    
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0));
 800243a:	2a03      	cmp	r2, #3
 800243c:	d015      	beq.n	800246a <USBH_AUDIO_InterfaceInit+0x3c6>
 800243e:	2800      	cmp	r0, #0
 8002440:	d1e8      	bne.n	8002414 <USBH_AUDIO_InterfaceInit+0x370>
 8002442:	e012      	b.n	800246a <USBH_AUDIO_InterfaceInit+0x3c6>
      AUDIO_Handle->headphone.asociated_mixer = Index;
 8002444:	f886 3105 	strb.w	r3, [r6, #261]	; 0x105
 8002448:	e7f7      	b.n	800243a <USBH_AUDIO_InterfaceInit+0x396>
      AUDIO_Handle->headphone.asociated_selector = Index;
 800244a:	f886 3106 	strb.w	r3, [r6, #262]	; 0x106
 800244e:	e7f4      	b.n	800243a <USBH_AUDIO_InterfaceInit+0x396>
      AUDIO_Handle->headphone.asociated_terminal = Index;
 8002450:	f886 3108 	strb.w	r3, [r6, #264]	; 0x108
      if(LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 8002454:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800245c:	f893 e005 	ldrb.w	lr, [r3, #5]
 8002460:	791b      	ldrb	r3, [r3, #4]
 8002462:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8002466:	42bb      	cmp	r3, r7
 8002468:	d0e7      	beq.n	800243a <USBH_AUDIO_InterfaceInit+0x396>
        AUDIO_Handle->headphone.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 800246a:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
 800246e:	4628      	mov	r0, r5
 8002470:	f002 fe1d 	bl	80050ae <USBH_AllocPipe>
 8002474:	4601      	mov	r1, r0
 8002476:	f884 00fb 	strb.w	r0, [r4, #251]	; 0xfb
        USBH_OpenPipe  (phost,
 800247a:	f8b4 00f6 	ldrh.w	r0, [r4, #246]	; 0xf6
 800247e:	9002      	str	r0, [sp, #8]
 8002480:	2001      	movs	r0, #1
 8002482:	9001      	str	r0, [sp, #4]
 8002484:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002488:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
 800248c:	9000      	str	r0, [sp, #0]
 800248e:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002492:	4628      	mov	r0, r5
 8002494:	f002 fdf7 	bl	8005086 <USBH_OpenPipe>
        USBH_LL_SetToggle (phost,  AUDIO_Handle->headphone.Pipe, 0);          
 8002498:	2200      	movs	r2, #0
 800249a:	f894 10fb 	ldrb.w	r1, [r4, #251]	; 0xfb
 800249e:	4628      	mov	r0, r5
 80024a0:	f003 f91b 	bl	80056da <USBH_LL_SetToggle>
      if(AUDIO_Handle->microphone.supported == 1)
 80024a4:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d14d      	bne.n	8002548 <USBH_AUDIO_InterfaceInit+0x4a4>
  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;    
 80024ac:	f8d5 3544 	ldr.w	r3, [r5, #1348]	; 0x544
 80024b0:	69de      	ldr	r6, [r3, #28]
  for(terminalIndex = 0; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80024b2:	f8b6 00ea 	ldrh.w	r0, [r6, #234]	; 0xea
 80024b6:	2200      	movs	r2, #0
    if(LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 80024b8:	f240 2701 	movw	r7, #513	; 0x201
  for(terminalIndex = 0; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80024bc:	b2d3      	uxtb	r3, r2
 80024be:	4283      	cmp	r3, r0
 80024c0:	d301      	bcc.n	80024c6 <USBH_AUDIO_InterfaceInit+0x422>
  uint8_t UnitID = 0, Type, Index;
 80024c2:	2100      	movs	r1, #0
 80024c4:	e00e      	b.n	80024e4 <USBH_AUDIO_InterfaceInit+0x440>
    if(LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 80024c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80024ca:	3201      	adds	r2, #1
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	f893 e005 	ldrb.w	lr, [r3, #5]
 80024d2:	7919      	ldrb	r1, [r3, #4]
 80024d4:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 80024d8:	42b9      	cmp	r1, r7
 80024da:	d1ef      	bne.n	80024bc <USBH_AUDIO_InterfaceInit+0x418>
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 80024dc:	78d9      	ldrb	r1, [r3, #3]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 80024de:	79db      	ldrb	r3, [r3, #7]
 80024e0:	f886 3151 	strb.w	r3, [r6, #337]	; 0x151
    value =  USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 80024e4:	4628      	mov	r0, r5
 80024e6:	f7ff fd4d 	bl	8001f84 <USBH_AUDIO_FindLinkedUnit>
    Type   = (value >> 8) & 0xFF;
 80024ea:	f3c0 2207 	ubfx	r2, r0, #8, #8
    switch (Type)
 80024ee:	1ed7      	subs	r7, r2, #3
    Index = value & 0xFF;
 80024f0:	b2c3      	uxtb	r3, r0
    UnitID   = (value >> 16) & 0xFF;
 80024f2:	f3c0 4107 	ubfx	r1, r0, #16, #8
    switch (Type)
 80024f6:	2f03      	cmp	r7, #3
 80024f8:	d805      	bhi.n	8002506 <USBH_AUDIO_InterfaceInit+0x462>
 80024fa:	e8df f007 	tbb	[pc, r7]
 80024fe:	4b51      	.short	0x4b51
 8002500:	024e      	.short	0x024e
      AUDIO_Handle->microphone.asociated_feature = Index;
 8002502:	f886 314f 	strb.w	r3, [r6, #335]	; 0x14f
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0));
 8002506:	2a03      	cmp	r2, #3
 8002508:	d001      	beq.n	800250e <USBH_AUDIO_InterfaceInit+0x46a>
 800250a:	2800      	cmp	r0, #0
 800250c:	d1ea      	bne.n	80024e4 <USBH_AUDIO_InterfaceInit+0x440>
        AUDIO_Handle->microphone.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 800250e:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
 8002512:	4628      	mov	r0, r5
 8002514:	f002 fdcb 	bl	80050ae <USBH_AllocPipe>
 8002518:	4601      	mov	r1, r0
 800251a:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
        USBH_OpenPipe  (phost,
 800251e:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
 8002522:	9002      	str	r0, [sp, #8]
 8002524:	2001      	movs	r0, #1
 8002526:	9001      	str	r0, [sp, #4]
 8002528:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800252c:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
 8002530:	9000      	str	r0, [sp, #0]
 8002532:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002536:	4628      	mov	r0, r5
 8002538:	f002 fda5 	bl	8005086 <USBH_OpenPipe>
        USBH_LL_SetToggle (phost,  AUDIO_Handle->microphone.Pipe, 0);  
 800253c:	2200      	movs	r2, #0
 800253e:	f894 1143 	ldrb.w	r1, [r4, #323]	; 0x143
 8002542:	4628      	mov	r0, r5
 8002544:	f003 f8c9 	bl	80056da <USBH_LL_SetToggle>
      if(AUDIO_Handle->control.supported == 1)
 8002548:	f894 3189 	ldrb.w	r3, [r4, #393]	; 0x189
 800254c:	2b01      	cmp	r3, #1
 800254e:	d11c      	bne.n	800258a <USBH_AUDIO_InterfaceInit+0x4e6>
        AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8002550:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
 8002554:	4628      	mov	r0, r5
 8002556:	f002 fdaa 	bl	80050ae <USBH_AllocPipe>
 800255a:	4601      	mov	r1, r0
 800255c:	f884 018a 	strb.w	r0, [r4, #394]	; 0x18a
        USBH_OpenPipe  (phost,
 8002560:	f8b4 0186 	ldrh.w	r0, [r4, #390]	; 0x186
 8002564:	9002      	str	r0, [sp, #8]
 8002566:	2003      	movs	r0, #3
 8002568:	9001      	str	r0, [sp, #4]
 800256a:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800256e:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
 8002572:	9000      	str	r0, [sp, #0]
 8002574:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002578:	4628      	mov	r0, r5
 800257a:	f002 fd84 	bl	8005086 <USBH_OpenPipe>
        USBH_LL_SetToggle (phost,  AUDIO_Handle->control.Pipe, 0);          
 800257e:	2200      	movs	r2, #0
 8002580:	f894 118a 	ldrb.w	r1, [r4, #394]	; 0x18a
 8002584:	4628      	mov	r0, r5
 8002586:	f003 f8a8 	bl	80056da <USBH_LL_SetToggle>
      AUDIO_Handle->req_state     = AUDIO_REQ_INIT;
 800258a:	2301      	movs	r3, #1
 800258c:	7023      	strb	r3, [r4, #0]
      AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800258e:	70e3      	strb	r3, [r4, #3]
      status = USBH_OK;
 8002590:	2000      	movs	r0, #0
  return status;
 8002592:	e593      	b.n	80020bc <USBH_AUDIO_InterfaceInit+0x18>
      AUDIO_Handle->microphone.asociated_mixer = Index;
 8002594:	f886 314d 	strb.w	r3, [r6, #333]	; 0x14d
 8002598:	e7b5      	b.n	8002506 <USBH_AUDIO_InterfaceInit+0x462>
      AUDIO_Handle->microphone.asociated_selector = Index;
 800259a:	f886 314e 	strb.w	r3, [r6, #334]	; 0x14e
 800259e:	e7b2      	b.n	8002506 <USBH_AUDIO_InterfaceInit+0x462>
      AUDIO_Handle->microphone.asociated_terminal = Index;
 80025a0:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
 80025a4:	e7af      	b.n	8002506 <USBH_AUDIO_InterfaceInit+0x462>
    if((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 80025a6:	f1b9 0f00 	cmp.w	r9, #0
 80025aa:	f43f ae02 	beq.w	80021b2 <USBH_AUDIO_InterfaceInit+0x10e>
 80025ae:	e584      	b.n	80020ba <USBH_AUDIO_InterfaceInit+0x16>

080025b0 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute (USBH_HandleTypeDef *phost, uint8_t attrib)
{
 80025b0:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef status = USBH_BUSY ;
  AUDIO_HandleTypeDef *AUDIO_Handle; 

  
  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 80025b2:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 80025b6:	69dc      	ldr	r4, [r3, #28]
  
  switch (attrib)
 80025b8:	2901      	cmp	r1, #1
 80025ba:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 80025be:	d047      	beq.n	8002650 <USBH_AUDIO_SetControlAttribute+0xa0>
 80025c0:	2902      	cmp	r1, #2
 80025c2:	d04b      	beq.n	800265c <USBH_AUDIO_SetControlAttribute+0xac>
    AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution; 
    break;
    
  }
  
  if(AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 80025c4:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 80025c8:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80025cc:	429a      	cmp	r2, r3
  {
    AUDIO_Handle->headphone.attribute.volume =AUDIO_Handle->headphone.attribute.volumeMax;
 80025ce:	bf88      	it	hi
 80025d0:	f8c4 3134 	strhi.w	r3, [r4, #308]	; 0x134
  }
  
  if(AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 80025d4:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 80025d8:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 80025dc:	429a      	cmp	r2, r3
  {
    AUDIO_Handle->headphone.attribute.volume =AUDIO_Handle->headphone.attribute.volumeMin;
 80025de:	bf38      	it	cc
 80025e0:	f8c4 3134 	strcc.w	r3, [r4, #308]	; 0x134
  }
  
  if(AUDIO_SetVolume (phost, 
 80025e4:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
 80025e8:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
 80025ec:	f8a4 1190 	strh.w	r1, [r4, #400]	; 0x190
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80025f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  if(AUDIO_SetVolume (phost, 
 80025f4:	f894 21a1 	ldrb.w	r2, [r4, #417]	; 0x1a1
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    wIndex = ( UnitID << 8 ) | InterfaceNum ;
 80025fc:	78db      	ldrb	r3, [r3, #3]
    wValue =  (controlSelector << 8) | channel;
 80025fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    wIndex = ( UnitID << 8 ) | InterfaceNum ;
 8002602:	021b      	lsls	r3, r3, #8
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8002604:	2121      	movs	r1, #33	; 0x21
  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8002606:	2501      	movs	r5, #1
  phost->Control.setup.b.wValue.w = wValue;
 8002608:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wLength.w = wLength; 
 800260a:	2202      	movs	r2, #2
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800260c:	7401      	strb	r1, [r0, #16]
  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 800260e:	7445      	strb	r5, [r0, #17]
  phost->Control.setup.b.wIndex.w = wIndex;
 8002610:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = wLength; 
 8002612:	82c2      	strh	r2, [r0, #22]
  return(USBH_CtlReq(phost, (uint8_t *)(AUDIO_Handle->mem) , wLength ));    
 8002614:	f504 71c8 	add.w	r1, r4, #400	; 0x190
 8002618:	f002 fa8d 	bl	8004b36 <USBH_CtlReq>
  if(AUDIO_SetVolume (phost, 
 800261c:	42a8      	cmp	r0, r5
 800261e:	d016      	beq.n	800264e <USBH_AUDIO_SetControlAttribute+0x9e>
                                 AUDIO_Handle->temp_feature, 
                                 AUDIO_Handle->temp_channels, 
                                 AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
  {
    
    if(AUDIO_Handle->temp_channels ==  1)
 8002620:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
 8002624:	42ab      	cmp	r3, r5
    {
      AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8002626:	bf05      	ittet	eq
 8002628:	f894 3107 	ldrbeq.w	r3, [r4, #263]	; 0x107
 800262c:	f884 31a0 	strbeq.w	r3, [r4, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
      status = USBH_OK;
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8002630:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8002634:	f894 3109 	ldrbeq.w	r3, [r4, #265]	; 0x109
 8002638:	bf0c      	ite	eq
 800263a:	f884 31a1 	strbeq.w	r3, [r4, #417]	; 0x1a1
      AUDIO_Handle->temp_channels--;
 800263e:	f884 31a1 	strbne.w	r3, [r4, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8002642:	f04f 0306 	mov.w	r3, #6
      status = USBH_OK;
 8002646:	bf0c      	ite	eq
 8002648:	2000      	moveq	r0, #0
  USBH_StatusTypeDef status = USBH_BUSY ;
 800264a:	4628      	movne	r0, r5
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800264c:	7063      	strb	r3, [r4, #1]
  }
  
 
  return status;
}
 800264e:	bd38      	pop	{r3, r4, r5, pc}
    AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 8002650:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 8002654:	4413      	add	r3, r2
    AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution; 
 8002656:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    break;
 800265a:	e7b3      	b.n	80025c4 <USBH_AUDIO_SetControlAttribute+0x14>
    AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution; 
 800265c:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	e7f8      	b.n	8002656 <USBH_AUDIO_SetControlAttribute+0xa6>

08002664 <USBH_AUDIO_ClassRequest>:
{   
 8002664:	b538      	push	{r3, r4, r5, lr}
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;  
 8002666:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 800266a:	69dc      	ldr	r4, [r3, #28]
  switch (AUDIO_Handle->req_state)
 800266c:	7823      	ldrb	r3, [r4, #0]
 800266e:	3b01      	subs	r3, #1
 8002670:	2b06      	cmp	r3, #6
 8002672:	d834      	bhi.n	80026de <USBH_AUDIO_ClassRequest+0x7a>
 8002674:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002678:	00f60007 	.word	0x00f60007
 800267c:	00170007 	.word	0x00170007
 8002680:	00e500d4 	.word	0x00e500d4
 8002684:	0035      	.short	0x0035
    if(AUDIO_Handle->microphone.supported == 1)
 8002686:	f894 5142 	ldrb.w	r5, [r4, #322]	; 0x142
 800268a:	2d01      	cmp	r5, #1
 800268c:	d108      	bne.n	80026a0 <USBH_AUDIO_ClassRequest+0x3c>
      req_status = USBH_SetInterface(phost, 
 800268e:	2200      	movs	r2, #0
 8002690:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8002694:	f002 fc5b 	bl	8004f4e <USBH_SetInterface>
      if(req_status == USBH_OK)
 8002698:	bb08      	cbnz	r0, 80026de <USBH_AUDIO_ClassRequest+0x7a>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 800269a:	2304      	movs	r3, #4
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800269c:	7023      	strb	r3, [r4, #0]
 800269e:	e018      	b.n	80026d2 <USBH_AUDIO_ClassRequest+0x6e>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 80026a0:	2304      	movs	r3, #4
     AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 80026a2:	7023      	strb	r3, [r4, #0]
 80026a4:	e01b      	b.n	80026de <USBH_AUDIO_ClassRequest+0x7a>
    if(AUDIO_Handle->headphone.supported == 1)
 80026a6:	f894 50fa 	ldrb.w	r5, [r4, #250]	; 0xfa
 80026aa:	2d01      	cmp	r5, #1
 80026ac:	d113      	bne.n	80026d6 <USBH_AUDIO_ClassRequest+0x72>
      req_status = USBH_SetInterface(phost, 
 80026ae:	2200      	movs	r2, #0
 80026b0:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
 80026b4:	f002 fc4b 	bl	8004f4e <USBH_SetInterface>
      if(req_status == USBH_OK)
 80026b8:	b988      	cbnz	r0, 80026de <USBH_AUDIO_ClassRequest+0x7a>
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 80026ba:	2307      	movs	r3, #7
 80026bc:	7023      	strb	r3, [r4, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80026be:	2306      	movs	r3, #6
 80026c0:	7063      	strb	r3, [r4, #1]
        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 80026c2:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 80026c6:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80026ca:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
 80026ce:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
}
 80026d2:	4628      	mov	r0, r5
 80026d4:	bd38      	pop	{r3, r4, r5, pc}
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 80026d6:	2307      	movs	r3, #7
 80026d8:	7023      	strb	r3, [r4, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80026da:	2306      	movs	r3, #6
 80026dc:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef status = USBH_BUSY;
 80026de:	2501      	movs	r5, #1
  return status; 
 80026e0:	e7f7      	b.n	80026d2 <USBH_AUDIO_ClassRequest+0x6e>
  switch (AUDIO_Handle->cs_req_state)
 80026e2:	7861      	ldrb	r1, [r4, #1]
  cs_status = USBH_AUDIO_CSRequest(phost, 
 80026e4:	f894 21a0 	ldrb.w	r2, [r4, #416]	; 0x1a0
 80026e8:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
  switch (AUDIO_Handle->cs_req_state)
 80026ec:	3904      	subs	r1, #4
 80026ee:	2904      	cmp	r1, #4
 80026f0:	d8f5      	bhi.n	80026de <USBH_AUDIO_ClassRequest+0x7a>
 80026f2:	e8df f001 	tbb	[pc, r1]
 80026f6:	4524      	.short	0x4524
 80026f8:	6e03      	.short	0x6e03
 80026fa:	bf          	.byte	0xbf
 80026fb:	00          	.byte	0x00
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80026fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8002700:	21a1      	movs	r1, #161	; 0xa1
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8002702:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
    wIndex = ( UnitID << 8 ) | InterfaceNum ;
 8002706:	78d2      	ldrb	r2, [r2, #3]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8002708:	7401      	strb	r1, [r0, #16]
    wIndex = ( UnitID << 8 ) | InterfaceNum ;
 800270a:	0212      	lsls	r2, r2, #8
  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 800270c:	2181      	movs	r1, #129	; 0x81
    wValue =  (controlSelector << 8) | channel;
 800270e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  phost->Control.setup.b.wIndex.w = wIndex;
 8002712:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = wLength; 
 8002714:	2202      	movs	r2, #2
  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8002716:	7441      	strb	r1, [r0, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8002718:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wLength.w = wLength; 
 800271a:	82c2      	strh	r2, [r0, #22]
  return(USBH_CtlReq(phost, (uint8_t *)(AUDIO_Handle->mem) , wLength ));    
 800271c:	f504 71c8 	add.w	r1, r4, #400	; 0x190
 8002720:	f002 fa09 	bl	8004b36 <USBH_CtlReq>
    if(req_status != USBH_BUSY)
 8002724:	2801      	cmp	r0, #1
 8002726:	d0da      	beq.n	80026de <USBH_AUDIO_ClassRequest+0x7a>
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8002728:	2304      	movs	r3, #4
 800272a:	7063      	strb	r3, [r4, #1]
      AUDIO_Handle->headphone.attribute.volume = LE16(&(AUDIO_Handle->mem[0]));
 800272c:	f894 2191 	ldrb.w	r2, [r4, #401]	; 0x191
 8002730:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
 8002734:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002738:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 800273c:	e7cf      	b.n	80026de <USBH_AUDIO_ClassRequest+0x7a>
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800273e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8002742:	21a1      	movs	r1, #161	; 0xa1
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8002744:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
    wIndex = ( UnitID << 8 ) | InterfaceNum ;
 8002748:	78d2      	ldrb	r2, [r2, #3]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800274a:	7401      	strb	r1, [r0, #16]
    wIndex = ( UnitID << 8 ) | InterfaceNum ;
 800274c:	0212      	lsls	r2, r2, #8
  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 800274e:	2182      	movs	r1, #130	; 0x82
    wValue =  (controlSelector << 8) | channel;
 8002750:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  phost->Control.setup.b.wIndex.w = wIndex;
 8002754:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = wLength; 
 8002756:	2202      	movs	r2, #2
  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 8002758:	7441      	strb	r1, [r0, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800275a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wLength.w = wLength; 
 800275c:	82c2      	strh	r2, [r0, #22]
  return(USBH_CtlReq(phost, (uint8_t *)(AUDIO_Handle->mem) , wLength ));    
 800275e:	f504 71c8 	add.w	r1, r4, #400	; 0x190
 8002762:	f002 f9e8 	bl	8004b36 <USBH_CtlReq>
    if(req_status != USBH_BUSY)
 8002766:	2801      	cmp	r0, #1
 8002768:	d0b9      	beq.n	80026de <USBH_AUDIO_ClassRequest+0x7a>
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 800276a:	2305      	movs	r3, #5
 800276c:	7063      	strb	r3, [r4, #1]
      AUDIO_Handle->headphone.attribute.volumeMin = LE16(&AUDIO_Handle->mem[0]);
 800276e:	f894 2191 	ldrb.w	r2, [r4, #401]	; 0x191
 8002772:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
 8002776:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800277a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 800277e:	e7ae      	b.n	80026de <USBH_AUDIO_ClassRequest+0x7a>
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8002780:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8002784:	21a1      	movs	r1, #161	; 0xa1
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8002786:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
    wIndex = ( UnitID << 8 ) | InterfaceNum ;
 800278a:	78d2      	ldrb	r2, [r2, #3]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800278c:	7401      	strb	r1, [r0, #16]
    wIndex = ( UnitID << 8 ) | InterfaceNum ;
 800278e:	0212      	lsls	r2, r2, #8
  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8002790:	2183      	movs	r1, #131	; 0x83
    wValue =  (controlSelector << 8) | channel;
 8002792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  phost->Control.setup.b.wIndex.w = wIndex;
 8002796:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = wLength; 
 8002798:	2202      	movs	r2, #2
  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 800279a:	7441      	strb	r1, [r0, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800279c:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wLength.w = wLength; 
 800279e:	82c2      	strh	r2, [r0, #22]
  return(USBH_CtlReq(phost, (uint8_t *)(AUDIO_Handle->mem) , wLength ));    
 80027a0:	f504 71c8 	add.w	r1, r4, #400	; 0x190
 80027a4:	f002 f9c7 	bl	8004b36 <USBH_CtlReq>
    if(req_status != USBH_BUSY)
 80027a8:	2801      	cmp	r0, #1
 80027aa:	d098      	beq.n	80026de <USBH_AUDIO_ClassRequest+0x7a>
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 80027ac:	2307      	movs	r3, #7
      AUDIO_Handle->headphone.attribute.volumeMax = LE16(&AUDIO_Handle->mem[0]);   
 80027ae:	f894 2191 	ldrb.w	r2, [r4, #401]	; 0x191
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 80027b2:	7063      	strb	r3, [r4, #1]
      AUDIO_Handle->headphone.attribute.volumeMax = LE16(&AUDIO_Handle->mem[0]);   
 80027b4:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
 80027b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 80027bc:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
      AUDIO_Handle->headphone.attribute.volumeMax = LE16(&AUDIO_Handle->mem[0]);   
 80027c0:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
      if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d28a      	bcs.n	80026de <USBH_AUDIO_ClassRequest+0x7a>
        AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00; 
 80027c8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80027cc:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 80027d0:	e785      	b.n	80026de <USBH_AUDIO_ClassRequest+0x7a>
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80027d2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80027d6:	21a1      	movs	r1, #161	; 0xa1
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80027d8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
    wIndex = ( UnitID << 8 ) | InterfaceNum ;
 80027dc:	78d2      	ldrb	r2, [r2, #3]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80027de:	7401      	strb	r1, [r0, #16]
    wIndex = ( UnitID << 8 ) | InterfaceNum ;
 80027e0:	0212      	lsls	r2, r2, #8
  phost->Control.setup.b.bRequest = UAC_GET_RES;
 80027e2:	2184      	movs	r1, #132	; 0x84
    wValue =  (controlSelector << 8) | channel;
 80027e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  phost->Control.setup.b.wIndex.w = wIndex;
 80027e8:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = wLength; 
 80027ea:	2202      	movs	r2, #2
  phost->Control.setup.b.bRequest = UAC_GET_RES;
 80027ec:	7441      	strb	r1, [r0, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80027ee:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wLength.w = wLength; 
 80027f0:	82c2      	strh	r2, [r0, #22]
  return(USBH_CtlReq(phost, (uint8_t *)(AUDIO_Handle->mem) , wLength ));    
 80027f2:	f504 71c8 	add.w	r1, r4, #400	; 0x190
 80027f6:	f002 f99e 	bl	8004b36 <USBH_CtlReq>
    if(req_status != USBH_BUSY)
 80027fa:	2801      	cmp	r0, #1
 80027fc:	f43f af6f 	beq.w	80026de <USBH_AUDIO_ClassRequest+0x7a>
      AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8002800:	2308      	movs	r3, #8
 8002802:	7063      	strb	r3, [r4, #1]
      AUDIO_Handle->headphone.attribute.resolution = LE16(&AUDIO_Handle->mem[0]);    
 8002804:	f894 2191 	ldrb.w	r2, [r4, #401]	; 0x191
 8002808:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
 800280c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002810:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8002814:	e763      	b.n	80026de <USBH_AUDIO_ClassRequest+0x7a>
      AUDIO_Handle->temp_channels--;
 8002816:	3b01      	subs	r3, #1
 8002818:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
  USBH_StatusTypeDef status = USBH_BUSY;
 800281c:	2301      	movs	r3, #1
 800281e:	e032      	b.n	8002886 <USBH_AUDIO_ClassRequest+0x222>
    if(AUDIO_Handle->microphone.supported == 1)
 8002820:	f894 5142 	ldrb.w	r5, [r4, #322]	; 0x142
 8002824:	2d01      	cmp	r5, #1
 8002826:	d10a      	bne.n	800283e <USBH_AUDIO_ClassRequest+0x1da>
      req_status = USBH_SetInterface(phost, 
 8002828:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
 800282c:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8002830:	f002 fb8d 	bl	8004f4e <USBH_SetInterface>
      if(req_status == USBH_OK)
 8002834:	2800      	cmp	r0, #0
 8002836:	f47f af52 	bne.w	80026de <USBH_AUDIO_ClassRequest+0x7a>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800283a:	2306      	movs	r3, #6
 800283c:	e72e      	b.n	800269c <USBH_AUDIO_ClassRequest+0x38>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800283e:	2306      	movs	r3, #6
 8002840:	e72f      	b.n	80026a2 <USBH_AUDIO_ClassRequest+0x3e>
   if(AUDIO_Handle->headphone.supported == 1)
 8002842:	f894 50fa 	ldrb.w	r5, [r4, #250]	; 0xfa
 8002846:	2d01      	cmp	r5, #1
 8002848:	d10a      	bne.n	8002860 <USBH_AUDIO_ClassRequest+0x1fc>
      req_status = USBH_SetInterface(phost, 
 800284a:	f894 20f9 	ldrb.w	r2, [r4, #249]	; 0xf9
 800284e:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
 8002852:	f002 fb7c 	bl	8004f4e <USBH_SetInterface>
      if(req_status == USBH_OK)
 8002856:	2800      	cmp	r0, #0
 8002858:	f47f af41 	bne.w	80026de <USBH_AUDIO_ClassRequest+0x7a>
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 800285c:	2302      	movs	r3, #2
 800285e:	e71d      	b.n	800269c <USBH_AUDIO_ClassRequest+0x38>
     AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8002860:	2302      	movs	r3, #2
 8002862:	e71e      	b.n	80026a2 <USBH_AUDIO_ClassRequest+0x3e>
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8002864:	2301      	movs	r3, #1
 8002866:	70a3      	strb	r3, [r4, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 8002868:	2102      	movs	r1, #2
 800286a:	f8d0 3594 	ldr.w	r3, [r0, #1428]	; 0x594
 800286e:	4798      	blx	r3
    status  = USBH_OK;    
 8002870:	2500      	movs	r5, #0
 8002872:	e72e      	b.n	80026d2 <USBH_AUDIO_ClassRequest+0x6e>
    if(AUDIO_Handle->temp_channels ==  1)
 8002874:	2b01      	cmp	r3, #1
 8002876:	d1ce      	bne.n	8002816 <USBH_AUDIO_ClassRequest+0x1b2>
        AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8002878:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 800287c:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8002886:	2206      	movs	r2, #6
 8002888:	7062      	strb	r2, [r4, #1]
    if(USBH_AUDIO_HandleCSRequest (phost) == USBH_OK)
 800288a:	2b00      	cmp	r3, #0
 800288c:	f47f af27 	bne.w	80026de <USBH_AUDIO_ClassRequest+0x7a>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8002890:	2305      	movs	r3, #5
 8002892:	e706      	b.n	80026a2 <USBH_AUDIO_ClassRequest+0x3e>

08002894 <USBH_AUDIO_FrequencySet>:
 8002894:	4770      	bx	lr

08002896 <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 8002896:	4770      	bx	lr

08002898 <USBH_AUDIO_Process>:
{   
 8002898:	b570      	push	{r4, r5, r6, lr}
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;  
 800289a:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 800289e:	69dc      	ldr	r4, [r3, #28]
  if(AUDIO_Handle->headphone.supported == 1)
 80028a0:	f894 30fa 	ldrb.w	r3, [r4, #250]	; 0xfa
 80028a4:	2b01      	cmp	r3, #1
{   
 80028a6:	4605      	mov	r5, r0
  if(AUDIO_Handle->headphone.supported == 1)
 80028a8:	d111      	bne.n	80028ce <USBH_AUDIO_Process+0x36>
  switch(AUDIO_Handle->play_state)
 80028aa:	78a3      	ldrb	r3, [r4, #2]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d80d      	bhi.n	80028ce <USBH_AUDIO_Process+0x36>
 80028b2:	e8df f003 	tbb	[pc, r3]
 80028b6:	2902      	.short	0x2902
 80028b8:	4110      	.short	0x4110
    if( AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0)
 80028ba:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80028be:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80028c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80028c6:	79db      	ldrb	r3, [r3, #7]
 80028c8:	b91b      	cbnz	r3, 80028d2 <USBH_AUDIO_Process+0x3a>
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;        
 80028ca:	2303      	movs	r3, #3
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;    
 80028cc:	70a3      	strb	r3, [r4, #2]
}
 80028ce:	2001      	movs	r0, #1
 80028d0:	bd70      	pop	{r4, r5, r6, pc}
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	e7fa      	b.n	80028cc <USBH_AUDIO_Process+0x34>
    buff = (uint8_t*)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];    
 80028d6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80028da:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 80028de:	2222      	movs	r2, #34	; 0x22
    buff = (uint8_t*)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];    
 80028e0:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
  wIndex = Ep; 
 80028e4:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 80028e8:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 80028ea:	2201      	movs	r2, #1
 80028ec:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80028ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f2:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wLength.w = wLength; 
 80028f4:	2203      	movs	r2, #3
  phost->Control.setup.b.wIndex.w = wIndex;
 80028f6:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = wLength; 
 80028f8:	82c2      	strh	r2, [r0, #22]
  return(USBH_CtlReq(phost, (uint8_t *)buff, wLength ));
 80028fa:	3108      	adds	r1, #8
 80028fc:	f002 f91b 	bl	8004b36 <USBH_CtlReq>
    if(status == USBH_OK) 
 8002900:	2800      	cmp	r0, #0
 8002902:	d1e4      	bne.n	80028ce <USBH_AUDIO_Process+0x36>
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;    
 8002904:	2305      	movs	r3, #5
 8002906:	e7e1      	b.n	80028cc <USBH_AUDIO_Process+0x34>
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8002908:	2222      	movs	r2, #34	; 0x22
  wIndex = Ep; 
 800290a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 800290e:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8002910:	2201      	movs	r2, #1
 8002912:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8002914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002918:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wLength.w = wLength; 
 800291a:	2203      	movs	r2, #3
  phost->Control.setup.b.wIndex.w = wIndex;
 800291c:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = wLength; 
 800291e:	82c2      	strh	r2, [r0, #22]
  return(USBH_CtlReq(phost, (uint8_t *)buff, wLength ));
 8002920:	f504 7186 	add.w	r1, r4, #268	; 0x10c
 8002924:	f002 f907 	bl	8004b36 <USBH_CtlReq>
    if(status == USBH_OK)
 8002928:	2800      	cmp	r0, #0
 800292a:	d1d0      	bne.n	80028ce <USBH_AUDIO_Process+0x36>
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800292c:	2305      	movs	r3, #5
 800292e:	70a3      	strb	r3, [r4, #2]
      USBH_AUDIO_FrequencySet(phost);
 8002930:	4628      	mov	r0, r5
 8002932:	f7ff ffaf 	bl	8002894 <USBH_AUDIO_FrequencySet>
 8002936:	e7ca      	b.n	80028ce <USBH_AUDIO_Process+0x36>
  switch(AUDIO_Handle->processing_state)
 8002938:	7923      	ldrb	r3, [r4, #4]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d024      	beq.n	8002988 <USBH_AUDIO_Process+0xf0>
 800293e:	2b02      	cmp	r3, #2
 8002940:	d1c5      	bne.n	80028ce <USBH_AUDIO_Process+0x36>
    if((USBH_LL_GetURBState(phost , AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE)&&
 8002942:	f894 10fb 	ldrb.w	r1, [r4, #251]	; 0xfb
 8002946:	f002 feb7 	bl	80056b8 <USBH_LL_GetURBState>
 800294a:	2801      	cmp	r0, #1
 800294c:	d1bf      	bne.n	80028ce <USBH_AUDIO_Process+0x36>
       (( phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 800294e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8002952:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	f894 20fc 	ldrb.w	r2, [r4, #252]	; 0xfc
    if((USBH_LL_GetURBState(phost , AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE)&&
 800295c:	4293      	cmp	r3, r2
 800295e:	d3b6      	bcc.n	80028ce <USBH_AUDIO_Process+0x36>
      AUDIO_Handle->headphone.timer = phost->Timer;
 8002960:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
 8002964:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      if(AUDIO_Handle->control.supported == 1)
 8002968:	f894 3189 	ldrb.w	r3, [r4, #393]	; 0x189
 800296c:	2b01      	cmp	r3, #1
 800296e:	d169      	bne.n	8002a44 <USBH_AUDIO_Process+0x1ac>
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData; 
 8002970:	f8d5 3544 	ldr.w	r3, [r5, #1348]	; 0x544
 8002974:	69de      	ldr	r6, [r3, #28]
  switch(AUDIO_Handle->control_state)
 8002976:	78f3      	ldrb	r3, [r6, #3]
 8002978:	3b01      	subs	r3, #1
 800297a:	2b04      	cmp	r3, #4
 800297c:	d862      	bhi.n	8002a44 <USBH_AUDIO_Process+0x1ac>
 800297e:	e8df f003 	tbb	[pc, r3]
 8002982:	3c20      	.short	0x3c20
 8002984:	8261      	.short	0x8261
 8002986:	8a          	.byte	0x8a
 8002987:	00          	.byte	0x00
    if((phost->Timer & 1) == 0)
 8002988:	f8d0 3588 	ldr.w	r3, [r0, #1416]	; 0x588
 800298c:	07da      	lsls	r2, r3, #31
 800298e:	d49e      	bmi.n	80028ce <USBH_AUDIO_Process+0x36>
      AUDIO_Handle->headphone.timer = phost->Timer;
 8002990:	f8d0 3588 	ldr.w	r3, [r0, #1416]	; 0x588
 8002994:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8002998:	2302      	movs	r3, #2
 800299a:	7123      	strb	r3, [r4, #4]
      USBH_IsocSendData(phost, 
 800299c:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
 80029a0:	f894 30fb 	ldrb.w	r3, [r4, #251]	; 0xfb
 80029a4:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80029a8:	f002 fb5c 	bl	8005064 <USBH_IsocSendData>
      AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length; 
 80029ac:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
 80029b0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
      AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length; 
 80029b4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
      AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 80029b8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80029bc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80029c0:	e785      	b.n	80028ce <USBH_AUDIO_Process+0x36>
    if((phost->Timer & 1) == 0)
 80029c2:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
 80029c6:	07db      	lsls	r3, r3, #31
 80029c8:	d43c      	bmi.n	8002a44 <USBH_AUDIO_Process+0x1ac>
      AUDIO_Handle->control.timer = phost->Timer;
 80029ca:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
 80029ce:	f8c6 318c 	str.w	r3, [r6, #396]	; 0x18c
      USBH_InterruptReceiveData(phost, 
 80029d2:	f896 2186 	ldrb.w	r2, [r6, #390]	; 0x186
 80029d6:	f896 318a 	ldrb.w	r3, [r6, #394]	; 0x18a
 80029da:	f506 71c8 	add.w	r1, r6, #400	; 0x190
 80029de:	4628      	mov	r0, r5
 80029e0:	f002 fb30 	bl	8005044 <USBH_InterruptReceiveData>
      AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 80029e4:	f896 3107 	ldrb.w	r3, [r6, #263]	; 0x107
 80029e8:	f886 31a0 	strb.w	r3, [r6, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80029ec:	f896 3109 	ldrb.w	r3, [r6, #265]	; 0x109
 80029f0:	f886 31a1 	strb.w	r3, [r6, #417]	; 0x1a1
      AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 80029f4:	2302      	movs	r3, #2
         AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;         
 80029f6:	70f3      	strb	r3, [r6, #3]
 80029f8:	e024      	b.n	8002a44 <USBH_AUDIO_Process+0x1ac>
    if(USBH_LL_GetURBState(phost , AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 80029fa:	f896 118a 	ldrb.w	r1, [r6, #394]	; 0x18a
 80029fe:	4628      	mov	r0, r5
 8002a00:	f002 fe5a 	bl	80056b8 <USBH_LL_GetURBState>
 8002a04:	2801      	cmp	r0, #1
 8002a06:	d016      	beq.n	8002a36 <USBH_AUDIO_Process+0x19e>
    if(( phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 8002a08:	f8d6 218c 	ldr.w	r2, [r6, #396]	; 0x18c
 8002a0c:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	f896 218b 	ldrb.w	r2, [r6, #395]	; 0x18b
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d314      	bcc.n	8002a44 <USBH_AUDIO_Process+0x1ac>
      AUDIO_Handle->control.timer = phost->Timer;
 8002a1a:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
 8002a1e:	f8c6 318c 	str.w	r3, [r6, #396]	; 0x18c
      USBH_InterruptReceiveData(phost, 
 8002a22:	f896 2186 	ldrb.w	r2, [r6, #390]	; 0x186
 8002a26:	f896 318a 	ldrb.w	r3, [r6, #394]	; 0x18a
 8002a2a:	f506 71c8 	add.w	r1, r6, #400	; 0x190
 8002a2e:	4628      	mov	r0, r5
 8002a30:	f002 fb08 	bl	8005044 <USBH_InterruptReceiveData>
 8002a34:	e006      	b.n	8002a44 <USBH_AUDIO_Process+0x1ac>
      if(USBH_AUDIO_SetControlAttribute (phost, attribute) == USBH_BUSY)
 8002a36:	f896 1190 	ldrb.w	r1, [r6, #400]	; 0x190
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	f7ff fdb8 	bl	80025b0 <USBH_AUDIO_SetControlAttribute>
 8002a40:	2801      	cmp	r0, #1
 8002a42:	d1e1      	bne.n	8002a08 <USBH_AUDIO_Process+0x170>
      if(AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8002a44:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8002a48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d824      	bhi.n	8002a9a <USBH_AUDIO_Process+0x202>
        USBH_IsocSendData(phost, 
 8002a50:	f894 30fb 	ldrb.w	r3, [r4, #251]	; 0xfb
 8002a54:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
 8002a58:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	f002 fb01 	bl	8005064 <USBH_IsocSendData>
        AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8002a62:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
 8002a66:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8002a70:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8002a74:	4413      	add	r3, r2
 8002a76:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8002a7a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8002a7e:	4413      	add	r3, r2
 8002a80:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8002a84:	e723      	b.n	80028ce <USBH_AUDIO_Process+0x36>
       if( USBH_AUDIO_SetControlAttribute (phost, 1) == USBH_OK)
 8002a86:	2101      	movs	r1, #1
       if( USBH_AUDIO_SetControlAttribute (phost, 2) == USBH_OK)
 8002a88:	4628      	mov	r0, r5
 8002a8a:	f7ff fd91 	bl	80025b0 <USBH_AUDIO_SetControlAttribute>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d1d8      	bne.n	8002a44 <USBH_AUDIO_Process+0x1ac>
         AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;         
 8002a92:	2301      	movs	r3, #1
 8002a94:	e7af      	b.n	80029f6 <USBH_AUDIO_Process+0x15e>
       if( USBH_AUDIO_SetControlAttribute (phost, 2) == USBH_OK)
 8002a96:	2102      	movs	r1, #2
 8002a98:	e7f6      	b.n	8002a88 <USBH_AUDIO_Process+0x1f0>
       AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFF;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a9e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
       AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8002aa2:	2305      	movs	r3, #5
 8002aa4:	70a3      	strb	r3, [r4, #2]
       USBH_AUDIO_BufferEmptyCallback(phost);
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	f7ff fef5 	bl	8002896 <USBH_AUDIO_BufferEmptyCallback>
 8002aac:	e70f      	b.n	80028ce <USBH_AUDIO_Process+0x36>

08002aae <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;  
}
 8002aae:	2000      	movs	r0, #0
 8002ab0:	4770      	bx	lr

08002ab2 <USBH_CDC_InterfaceDeInit>:
{
 8002ab2:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002ab4:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 8002ab8:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8002aba:	7821      	ldrb	r1, [r4, #0]
{
 8002abc:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8002abe:	b139      	cbz	r1, 8002ad0 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8002ac0:	f002 faf0 	bl	80050a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8002ac4:	7821      	ldrb	r1, [r4, #0]
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	f002 fb09 	bl	80050de <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0;     /* Reset the Channel as Free */
 8002acc:	2300      	movs	r3, #0
 8002ace:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8002ad0:	7b21      	ldrb	r1, [r4, #12]
 8002ad2:	b141      	cbz	r1, 8002ae6 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	f002 fae5 	bl	80050a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8002ada:	7b21      	ldrb	r1, [r4, #12]
 8002adc:	4628      	mov	r0, r5
 8002ade:	f002 fafe 	bl	80050de <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0;     /* Reset the Channel as Free */
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8002ae6:	7b61      	ldrb	r1, [r4, #13]
 8002ae8:	b141      	cbz	r1, 8002afc <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8002aea:	4628      	mov	r0, r5
 8002aec:	f002 fada 	bl	80050a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8002af0:	7b61      	ldrb	r1, [r4, #13]
 8002af2:	4628      	mov	r0, r5
 8002af4:	f002 faf3 	bl	80050de <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0;     /* Reset the Channel as Free */
 8002af8:	2300      	movs	r3, #0
 8002afa:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8002afc:	f8d5 3544 	ldr.w	r3, [r5, #1348]	; 0x544
 8002b00:	69d8      	ldr	r0, [r3, #28]
 8002b02:	b128      	cbz	r0, 8002b10 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8002b04:	f002 fe68 	bl	80057d8 <free>
    phost->pActiveClass->pData = 0;
 8002b08:	f8d5 3544 	ldr.w	r3, [r5, #1348]	; 0x544
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	61da      	str	r2, [r3, #28]
}
 8002b10:	2000      	movs	r0, #0
 8002b12:	bd38      	pop	{r3, r4, r5, pc}

08002b14 <USBH_CDC_InterfaceInit>:
{	
 8002b14:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, 
 8002b16:	2202      	movs	r2, #2
{	
 8002b18:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, 
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	4611      	mov	r1, r2
{	
 8002b1e:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, 
 8002b20:	f001 fe68 	bl	80047f4 <USBH_FindInterface>
  if(interface == 0xFF) /* No Valid Interface */
 8002b24:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, 
 8002b26:	4606      	mov	r6, r0
  if(interface == 0xFF) /* No Valid Interface */
 8002b28:	d102      	bne.n	8002b30 <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8002b2a:	2002      	movs	r0, #2
}
 8002b2c:	b005      	add	sp, #20
 8002b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8002b30:	4601      	mov	r1, r0
 8002b32:	4628      	mov	r0, r5
 8002b34:	f001 fe55 	bl	80047e2 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002b38:	2050      	movs	r0, #80	; 0x50
 8002b3a:	f8d5 7544 	ldr.w	r7, [r5, #1348]	; 0x544
 8002b3e:	f002 fe43 	bl	80057c8 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8002b42:	2332      	movs	r3, #50	; 0x32
 8002b44:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002b48:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8002b4a:	f896 3348 	ldrb.w	r3, [r6, #840]	; 0x348
 8002b4e:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002b50:	bf42      	ittt	mi
 8002b52:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002b54:	f8b6 334a 	ldrhmi.w	r3, [r6, #842]	; 0x34a
 8002b58:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8002b5a:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8002b5c:	7841      	ldrb	r1, [r0, #1]
 8002b5e:	4628      	mov	r0, r5
 8002b60:	f002 faa5 	bl	80050ae <USBH_AllocPipe>
 8002b64:	4601      	mov	r1, r0
 8002b66:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8002b68:	8960      	ldrh	r0, [r4, #10]
 8002b6a:	9002      	str	r0, [sp, #8]
 8002b6c:	2003      	movs	r0, #3
 8002b6e:	9001      	str	r0, [sp, #4]
 8002b70:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002b74:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002b78:	7862      	ldrb	r2, [r4, #1]
 8002b7a:	9000      	str	r0, [sp, #0]
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	f002 fa82 	bl	8005086 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0);    
 8002b82:	2200      	movs	r2, #0
 8002b84:	7821      	ldrb	r1, [r4, #0]
 8002b86:	4628      	mov	r0, r5
 8002b88:	f002 fda7 	bl	80056da <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost, 
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	210a      	movs	r1, #10
 8002b92:	4628      	mov	r0, r5
 8002b94:	f001 fe2e 	bl	80047f4 <USBH_FindInterface>
    if(interface == 0xFF) /* No Valid Interface */
 8002b98:	28ff      	cmp	r0, #255	; 0xff
 8002b9a:	d0c6      	beq.n	8002b2a <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8002b9c:	2332      	movs	r3, #50	; 0x32
 8002b9e:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8002ba2:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8002ba6:	f891 2348 	ldrb.w	r2, [r1, #840]	; 0x348
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8002baa:	f890 3350 	ldrb.w	r3, [r0, #848]	; 0x350
 8002bae:	f8b1 134a 	ldrh.w	r1, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8002bb2:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002bb6:	bf0d      	iteet	eq
 8002bb8:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002bba:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002bbc:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002bbe:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8002bc0:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002bc4:	bf08      	it	eq
 8002bc6:	73a3      	strbeq	r3, [r4, #14]
 8002bc8:	f8b0 2352 	ldrh.w	r2, [r0, #850]	; 0x352
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002bcc:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002bce:	bf18      	it	ne
 8002bd0:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002bd2:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8002bd4:	bf14      	ite	ne
 8002bd6:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8002bd8:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002bda:	f002 fa68 	bl	80050ae <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 8002bde:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002be0:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 8002be2:	4628      	mov	r0, r5
 8002be4:	f002 fa63 	bl	80050ae <USBH_AllocPipe>
 8002be8:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8002bea:	8b20      	ldrh	r0, [r4, #24]
 8002bec:	9002      	str	r0, [sp, #8]
 8002bee:	2602      	movs	r6, #2
 8002bf0:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002bf4:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002bf8:	7ba2      	ldrb	r2, [r4, #14]
 8002bfa:	7b61      	ldrb	r1, [r4, #13]
 8002bfc:	9601      	str	r6, [sp, #4]
 8002bfe:	9000      	str	r0, [sp, #0]
 8002c00:	4628      	mov	r0, r5
 8002c02:	f002 fa40 	bl	8005086 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8002c06:	8b60      	ldrh	r0, [r4, #26]
 8002c08:	9002      	str	r0, [sp, #8]
 8002c0a:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002c0e:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002c12:	7be2      	ldrb	r2, [r4, #15]
 8002c14:	7b21      	ldrb	r1, [r4, #12]
 8002c16:	9601      	str	r6, [sp, #4]
 8002c18:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8002c1a:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	f002 fa32 	bl	8005086 <USBH_OpenPipe>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 8002c22:	4632      	mov	r2, r6
 8002c24:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8002c26:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	f002 fd55 	bl	80056da <USBH_LL_SetToggle>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.InPipe,0);
 8002c30:	4632      	mov	r2, r6
 8002c32:	7b21      	ldrb	r1, [r4, #12]
 8002c34:	4628      	mov	r0, r5
 8002c36:	f002 fd50 	bl	80056da <USBH_LL_SetToggle>
      status = USBH_OK; 
 8002c3a:	4630      	mov	r0, r6
 8002c3c:	e776      	b.n	8002b2c <USBH_CDC_InterfaceInit+0x18>

08002c3e <USBH_CDC_ClassRequest>:
{   
 8002c3e:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;  
 8002c40:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 8002c44:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8002c46:	23a1      	movs	r3, #161	; 0xa1
 8002c48:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8002c4a:	2321      	movs	r3, #33	; 0x21
 8002c4c:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002c4e:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8002c54:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002c56:	82c2      	strh	r2, [r0, #22]
 
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002c58:	3140      	adds	r1, #64	; 0x40
{   
 8002c5a:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002c5c:	f001 ff6b 	bl	8004b36 <USBH_CtlReq>
  if(status == USBH_OK)
 8002c60:	4605      	mov	r5, r0
 8002c62:	b920      	cbnz	r0, 8002c6e <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 8002c64:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 8002c68:	2102      	movs	r1, #2
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	4798      	blx	r3
}
 8002c6e:	4628      	mov	r0, r5
 8002c70:	bd38      	pop	{r3, r4, r5, pc}

08002c72 <USBH_CDC_TransmitCallback>:
 8002c72:	4770      	bx	lr

08002c74 <USBH_CDC_ReceiveCallback>:
 8002c74:	4770      	bx	lr

08002c76 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8002c76:	4770      	bx	lr

08002c78 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 8002c78:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{
 8002c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 8002c7e:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8002c80:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 8002c84:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d83d      	bhi.n	8002d06 <USBH_CDC_Process+0x8e>
 8002c8a:	e8df f003 	tbb	[pc, r3]
 8002c8e:	0603      	.short	0x0603
 8002c90:	4217      	.short	0x4217
 8002c92:	a8          	.byte	0xa8
 8002c93:	00          	.byte	0x00
    status = USBH_OK;
 8002c94:	2000      	movs	r0, #0
}
 8002c96:	b002      	add	sp, #8
 8002c98:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8002c9a:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8002c9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8002c9e:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002ca4:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8002caa:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002cac:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecodin->Array , LINE_CODING_STRUCTURE_SIZE );  
 8002cae:	f001 ff42 	bl	8004b36 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002cb2:	bb50      	cbnz	r0, 8002d0a <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE; 
 8002cb4:	2302      	movs	r3, #2
      CDC_Handle->state = CDC_ERROR_STATE; 
 8002cb6:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8002cba:	e024      	b.n	8002d06 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8002cbc:	23a1      	movs	r3, #161	; 0xa1
 8002cbe:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8002cc0:	2321      	movs	r3, #33	; 0x21
 8002cc2:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002cc4:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8002cca:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8002ccc:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002cce:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8002cd2:	f001 ff30 	bl	8004b36 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002cd6:	b9c0      	cbnz	r0, 8002d0a <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 8002cd8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002cda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE; 
 8002cdc:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 8002ce0:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8002cea:	4291      	cmp	r1, r2
 8002cec:	d10b      	bne.n	8002d06 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8002cee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cf2:	795a      	ldrb	r2, [r3, #5]
 8002cf4:	4291      	cmp	r1, r2
 8002cf6:	d106      	bne.n	8002d06 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8002cf8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d102      	bne.n	8002d06 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 8002d00:	4628      	mov	r0, r5
 8002d02:	f7ff ffb8 	bl	8002c76 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8002d06:	2001      	movs	r0, #1
 8002d08:	e7c5      	b.n	8002c96 <USBH_CDC_Process+0x1e>
    else if(req_status != USBH_BUSY)
 8002d0a:	2801      	cmp	r0, #1
 8002d0c:	d0fb      	beq.n	8002d06 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_ERROR_STATE; 
 8002d0e:	2304      	movs	r3, #4
 8002d10:	e7d1      	b.n	8002cb6 <USBH_CDC_Process+0x3e>
  switch(CDC_Handle->data_tx_state)
 8002d12:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8002d16:	2901      	cmp	r1, #1
 8002d18:	d023      	beq.n	8002d62 <USBH_CDC_Process+0xea>
 8002d1a:	2902      	cmp	r1, #2
 8002d1c:	d030      	beq.n	8002d80 <USBH_CDC_Process+0x108>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002d1e:	f8d5 3544 	ldr.w	r3, [r5, #1348]	; 0x544
 8002d22:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8002d24:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d047      	beq.n	8002dbc <USBH_CDC_Process+0x144>
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d1ea      	bne.n	8002d06 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe); 
 8002d30:	7b31      	ldrb	r1, [r6, #12]
 8002d32:	4628      	mov	r0, r5
 8002d34:	f002 fcc0 	bl	80056b8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 8002d38:	2801      	cmp	r0, #1
 8002d3a:	d1e4      	bne.n	8002d06 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8002d3c:	7b31      	ldrb	r1, [r6, #12]
 8002d3e:	4628      	mov	r0, r5
 8002d40:	f002 fc76 	bl	8005630 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 8002d44:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8002d46:	b282      	uxth	r2, r0
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	d040      	beq.n	8002dd0 <USBH_CDC_Process+0x158>
 8002d4e:	8b71      	ldrh	r1, [r6, #26]
 8002d50:	4291      	cmp	r1, r2
 8002d52:	d23d      	bcs.n	8002dd0 <USBH_CDC_Process+0x158>
        CDC_Handle->RxDataLength -= length ;
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8002d58:	6a33      	ldr	r3, [r6, #32]
 8002d5a:	4418      	add	r0, r3
 8002d5c:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e033      	b.n	8002dca <USBH_CDC_Process+0x152>
    if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002d62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d64:	8b22      	ldrh	r2, [r4, #24]
 8002d66:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 8002d68:	9100      	str	r1, [sp, #0]
    if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002d6a:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 8002d6c:	bf98      	it	ls
 8002d6e:	b282      	uxthls	r2, r0
 8002d70:	69e1      	ldr	r1, [r4, #28]
 8002d72:	4628      	mov	r0, r5
 8002d74:	f002 f93f 	bl	8004ff6 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8002d78:	2302      	movs	r3, #2
      CDC_Handle->data_tx_state = CDC_SEND_DATA; 
 8002d7a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8002d7e:	e7ce      	b.n	8002d1e <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe); 
 8002d80:	7b61      	ldrb	r1, [r4, #13]
 8002d82:	f002 fc99 	bl	80056b8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 8002d86:	2801      	cmp	r0, #1
 8002d88:	d115      	bne.n	8002db6 <USBH_CDC_Process+0x13e>
      if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d8c:	8b22      	ldrh	r2, [r4, #24]
 8002d8e:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize ;
 8002d90:	bf83      	ittte	hi
 8002d92:	1a9b      	subhi	r3, r3, r2
 8002d94:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002d96:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0;
 8002d98:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002d9a:	bf8a      	itet	hi
 8002d9c:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0;
 8002d9e:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002da0:	61e3      	strhi	r3, [r4, #28]
      if( CDC_Handle->TxDataLength > 0)
 8002da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002da4:	b10b      	cbz	r3, 8002daa <USBH_CDC_Process+0x132>
      CDC_Handle->data_tx_state = CDC_SEND_DATA; 
 8002da6:	2301      	movs	r3, #1
 8002da8:	e7e7      	b.n	8002d7a <USBH_CDC_Process+0x102>
        CDC_Handle->data_tx_state = CDC_IDLE;    
 8002daa:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8002dae:	4628      	mov	r0, r5
 8002db0:	f7ff ff5f 	bl	8002c72 <USBH_CDC_TransmitCallback>
 8002db4:	e7b3      	b.n	8002d1e <USBH_CDC_Process+0xa6>
    else if( URB_Status == USBH_URB_NOTREADY )
 8002db6:	2802      	cmp	r0, #2
 8002db8:	d1b1      	bne.n	8002d1e <USBH_CDC_Process+0xa6>
 8002dba:	e7f4      	b.n	8002da6 <USBH_CDC_Process+0x12e>
    USBH_BulkReceiveData (phost,
 8002dbc:	7b33      	ldrb	r3, [r6, #12]
 8002dbe:	8b72      	ldrh	r2, [r6, #26]
 8002dc0:	6a31      	ldr	r1, [r6, #32]
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	f002 f92e 	bl	8005024 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8002dc8:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 8002dca:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8002dce:	e79a      	b.n	8002d06 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	f7ff ff4c 	bl	8002c74 <USBH_CDC_ReceiveCallback>
 8002ddc:	e793      	b.n	8002d06 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00); 
 8002dde:	2100      	movs	r1, #0
 8002de0:	f002 f8c3 	bl	8004f6a <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8002de4:	2800      	cmp	r0, #0
 8002de6:	d18e      	bne.n	8002d06 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8002de8:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8002dec:	e78b      	b.n	8002d06 <USBH_CDC_Process+0x8e>

08002dee <USBH_HID_SOFProcess>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8002dee:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 8002df2:	69db      	ldr	r3, [r3, #28]
  
  if(HID_Handle->state == HID_POLL)
 8002df4:	789a      	ldrb	r2, [r3, #2]
 8002df6:	2a06      	cmp	r2, #6
 8002df8:	d108      	bne.n	8002e0c <USBH_HID_SOFProcess+0x1e>
  {
    if(( phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8002dfa:	f8d0 2588 	ldr.w	r2, [r0, #1416]	; 0x588
 8002dfe:	6a19      	ldr	r1, [r3, #32]
 8002e00:	1a52      	subs	r2, r2, r1
 8002e02:	8b99      	ldrh	r1, [r3, #28]
 8002e04:	428a      	cmp	r2, r1
    {
      HID_Handle->state = HID_GET_DATA;
 8002e06:	bf24      	itt	cs
 8002e08:	2204      	movcs	r2, #4
 8002e0a:	709a      	strbcs	r2, [r3, #2]
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
  }
  return USBH_OK;
}
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	4770      	bx	lr

08002e10 <USBH_HID_InterfaceDeInit>:
{	
 8002e10:	b538      	push	{r3, r4, r5, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8002e12:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 8002e16:	69dc      	ldr	r4, [r3, #28]
  if(HID_Handle->InPipe != 0x00)
 8002e18:	7861      	ldrb	r1, [r4, #1]
{	
 8002e1a:	4605      	mov	r5, r0
  if(HID_Handle->InPipe != 0x00)
 8002e1c:	b139      	cbz	r1, 8002e2e <USBH_HID_InterfaceDeInit+0x1e>
    USBH_ClosePipe  (phost, HID_Handle->InPipe);
 8002e1e:	f002 f941 	bl	80050a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->InPipe);
 8002e22:	7861      	ldrb	r1, [r4, #1]
 8002e24:	4628      	mov	r0, r5
 8002e26:	f002 f95a 	bl	80050de <USBH_FreePipe>
    HID_Handle->InPipe = 0;     /* Reset the pipe as Free */  
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	7063      	strb	r3, [r4, #1]
  if(HID_Handle->OutPipe != 0x00)
 8002e2e:	7821      	ldrb	r1, [r4, #0]
 8002e30:	b141      	cbz	r1, 8002e44 <USBH_HID_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8002e32:	4628      	mov	r0, r5
 8002e34:	f002 f936 	bl	80050a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->OutPipe);
 8002e38:	7821      	ldrb	r1, [r4, #0]
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	f002 f94f 	bl	80050de <USBH_FreePipe>
    HID_Handle->OutPipe = 0;     /* Reset the pipe as Free */  
 8002e40:	2300      	movs	r3, #0
 8002e42:	7023      	strb	r3, [r4, #0]
  if(phost->pActiveClass->pData)
 8002e44:	f8d5 3544 	ldr.w	r3, [r5, #1348]	; 0x544
 8002e48:	69d8      	ldr	r0, [r3, #28]
 8002e4a:	b108      	cbz	r0, 8002e50 <USBH_HID_InterfaceDeInit+0x40>
    USBH_free (phost->pActiveClass->pData);
 8002e4c:	f002 fcc4 	bl	80057d8 <free>
}
 8002e50:	2000      	movs	r0, #0
 8002e52:	bd38      	pop	{r3, r4, r5, pc}

08002e54 <USBH_HID_InterfaceInit>:
{	
 8002e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFF);
 8002e58:	f8d0 1544 	ldr.w	r1, [r0, #1348]	; 0x544
{	
 8002e5c:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFF);
 8002e5e:	7909      	ldrb	r1, [r1, #4]
 8002e60:	23ff      	movs	r3, #255	; 0xff
 8002e62:	2201      	movs	r2, #1
{	
 8002e64:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFF);
 8002e66:	f001 fcc5 	bl	80047f4 <USBH_FindInterface>
  if(interface == 0xFF) /* No Valid Interface */
 8002e6a:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFF);
 8002e6c:	4601      	mov	r1, r0
  if(interface == 0xFF) /* No Valid Interface */
 8002e6e:	d103      	bne.n	8002e78 <USBH_HID_InterfaceInit+0x24>
    status = USBH_FAIL;  
 8002e70:	2002      	movs	r0, #2
}
 8002e72:	b005      	add	sp, #20
 8002e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    USBH_SelectInterface (phost, interface);
 8002e78:	4628      	mov	r0, r5
 8002e7a:	f001 fcb2 	bl	80047e2 <USBH_SelectInterface>
    phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc (sizeof(HID_HandleTypeDef));
 8002e7e:	2034      	movs	r0, #52	; 0x34
 8002e80:	f8d5 6544 	ldr.w	r6, [r5, #1348]	; 0x544
 8002e84:	f002 fca0 	bl	80057c8 <malloc>
    HID_Handle->state = HID_ERROR;
 8002e88:	2307      	movs	r3, #7
    phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc (sizeof(HID_HandleTypeDef));
 8002e8a:	61f0      	str	r0, [r6, #28]
    HID_Handle->state = HID_ERROR;
 8002e8c:	7083      	strb	r3, [r0, #2]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8002e8e:	f895 331f 	ldrb.w	r3, [r5, #799]	; 0x31f
 8002e92:	2232      	movs	r2, #50	; 0x32
 8002e94:	fb02 5203 	mla	r2, r2, r3, r5
    phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc (sizeof(HID_HandleTypeDef));
 8002e98:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8002e9a:	f892 2343 	ldrb.w	r2, [r2, #835]	; 0x343
 8002e9e:	2a01      	cmp	r2, #1
 8002ea0:	d124      	bne.n	8002eec <USBH_HID_InterfaceInit+0x98>
      HID_Handle->Init =  USBH_HID_KeybdInit;     
 8002ea2:	4a32      	ldr	r2, [pc, #200]	; (8002f6c <USBH_HID_InterfaceInit+0x118>)
      HID_Handle->Init =  USBH_HID_MouseInit;     
 8002ea4:	6322      	str	r2, [r4, #48]	; 0x30
    HID_Handle->state     = HID_INIT;
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	70a2      	strb	r2, [r4, #2]
    HID_Handle->ctl_state = HID_REQ_INIT; 
 8002eaa:	7162      	strb	r2, [r4, #5]
    HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 8002eac:	2232      	movs	r2, #50	; 0x32
 8002eae:	fb02 5103 	mla	r1, r2, r3, r5
              phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
 8002eb2:	fb02 5303 	mla	r3, r2, r3, r5
    HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 8002eb6:	f891 0348 	ldrb.w	r0, [r1, #840]	; 0x348
 8002eba:	76a0      	strb	r0, [r4, #26]
    HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8002ebc:	f8b1 034a 	ldrh.w	r0, [r1, #842]	; 0x34a
    HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval ;
 8002ec0:	f891 134c 	ldrb.w	r1, [r1, #844]	; 0x34c
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
 8002ec4:	f893 7340 	ldrb.w	r7, [r3, #832]	; 0x340
    HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8002ec8:	8320      	strh	r0, [r4, #24]
    if (HID_Handle->poll  < HID_MIN_POLL) 
 8002eca:	2909      	cmp	r1, #9
      HID_Handle->poll = HID_MIN_POLL;
 8002ecc:	bf98      	it	ls
 8002ece:	210a      	movls	r1, #10
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
 8002ed0:	2f05      	cmp	r7, #5
      HID_Handle->poll = HID_MIN_POLL;
 8002ed2:	83a1      	strh	r1, [r4, #28]
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
 8002ed4:	bf28      	it	cs
 8002ed6:	2705      	movcs	r7, #5
    for ( ;num < max_ep; num++)
 8002ed8:	2600      	movs	r6, #0
      if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80)
 8002eda:	f04f 0932 	mov.w	r9, #50	; 0x32
        USBH_OpenPipe  (phost,
 8002ede:	f04f 0803 	mov.w	r8, #3
    for ( ;num < max_ep; num++)
 8002ee2:	b2f3      	uxtb	r3, r6
 8002ee4:	429f      	cmp	r7, r3
 8002ee6:	d805      	bhi.n	8002ef4 <USBH_HID_InterfaceInit+0xa0>
    status = USBH_OK;
 8002ee8:	2000      	movs	r0, #0
 8002eea:	e7c2      	b.n	8002e72 <USBH_HID_InterfaceInit+0x1e>
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)		  
 8002eec:	2a02      	cmp	r2, #2
 8002eee:	d1bf      	bne.n	8002e70 <USBH_HID_InterfaceInit+0x1c>
      HID_Handle->Init =  USBH_HID_MouseInit;     
 8002ef0:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <USBH_HID_InterfaceInit+0x11c>)
 8002ef2:	e7d7      	b.n	8002ea4 <USBH_HID_InterfaceInit+0x50>
      if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80)
 8002ef4:	f895 331f 	ldrb.w	r3, [r5, #799]	; 0x31f
 8002ef8:	3601      	adds	r6, #1
 8002efa:	fb09 f303 	mul.w	r3, r9, r3
 8002efe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002f02:	442b      	add	r3, r5
 8002f04:	f893 1340 	ldrb.w	r1, [r3, #832]	; 0x340
 8002f08:	060b      	lsls	r3, r1, #24
 8002f0a:	d518      	bpl.n	8002f3e <USBH_HID_InterfaceInit+0xea>
          USBH_AllocPipe(phost, HID_Handle->InEp);
 8002f0c:	4628      	mov	r0, r5
        HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8002f0e:	7121      	strb	r1, [r4, #4]
          USBH_AllocPipe(phost, HID_Handle->InEp);
 8002f10:	f002 f8cd 	bl	80050ae <USBH_AllocPipe>
 8002f14:	4601      	mov	r1, r0
        HID_Handle->InPipe  =\
 8002f16:	7060      	strb	r0, [r4, #1]
        USBH_OpenPipe  (phost,
 8002f18:	8b20      	ldrh	r0, [r4, #24]
 8002f1a:	9002      	str	r0, [sp, #8]
 8002f1c:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002f20:	7922      	ldrb	r2, [r4, #4]
 8002f22:	9000      	str	r0, [sp, #0]
 8002f24:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002f28:	f8cd 8004 	str.w	r8, [sp, #4]
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	f002 f8aa 	bl	8005086 <USBH_OpenPipe>
        USBH_LL_SetToggle (phost, HID_Handle->InPipe, 0);
 8002f32:	7861      	ldrb	r1, [r4, #1]
 8002f34:	2200      	movs	r2, #0
        USBH_LL_SetToggle (phost, HID_Handle->OutPipe, 0);        
 8002f36:	4628      	mov	r0, r5
 8002f38:	f002 fbcf 	bl	80056da <USBH_LL_SetToggle>
 8002f3c:	e7d1      	b.n	8002ee2 <USBH_HID_InterfaceInit+0x8e>
          USBH_AllocPipe(phost, HID_Handle->OutEp);
 8002f3e:	4628      	mov	r0, r5
        HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8002f40:	70e1      	strb	r1, [r4, #3]
          USBH_AllocPipe(phost, HID_Handle->OutEp);
 8002f42:	f002 f8b4 	bl	80050ae <USBH_AllocPipe>
 8002f46:	4601      	mov	r1, r0
        HID_Handle->OutPipe  =\
 8002f48:	7020      	strb	r0, [r4, #0]
        USBH_OpenPipe  (phost,
 8002f4a:	8b20      	ldrh	r0, [r4, #24]
 8002f4c:	9002      	str	r0, [sp, #8]
 8002f4e:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002f52:	78e2      	ldrb	r2, [r4, #3]
 8002f54:	9000      	str	r0, [sp, #0]
 8002f56:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002f5a:	f8cd 8004 	str.w	r8, [sp, #4]
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f002 f891 	bl	8005086 <USBH_OpenPipe>
        USBH_LL_SetToggle (phost, HID_Handle->OutPipe, 0);        
 8002f64:	2200      	movs	r2, #0
 8002f66:	7821      	ldrb	r1, [r4, #0]
 8002f68:	e7e5      	b.n	8002f36 <USBH_HID_InterfaceInit+0xe2>
 8002f6a:	bf00      	nop
 8002f6c:	080031d1 	.word	0x080031d1
 8002f70:	0800321d 	.word	0x0800321d

08002f74 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor (USBH_HandleTypeDef *phost,
                                                         uint16_t length)
{
 8002f74:	b507      	push	{r0, r1, r2, lr}
  
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor(phost,
 8002f76:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8002f7a:	9100      	str	r1, [sp, #0]
 8002f7c:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8002f80:	2101      	movs	r1, #1
 8002f82:	f001 fe95 	bl	8004cb0 <USBH_GetDescriptor>
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/
  
  
  return status;
}
 8002f86:	b003      	add	sp, #12
 8002f88:	f85d fb04 	ldr.w	pc, [sp], #4

08002f8c <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor (USBH_HandleTypeDef *phost,
                                            uint16_t length)
{
 8002f8c:	b507      	push	{r0, r1, r2, lr}
  
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor( phost,
 8002f8e:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8002f92:	9100      	str	r1, [sp, #0]
 8002f94:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8002f98:	2101      	movs	r1, #1
 8002f9a:	f001 fe89 	bl	8004cb0 <USBH_GetDescriptor>
                              USB_DESC_HID,
                              phost->device.Data,
                              length);
 
  return status;
}
 8002f9e:	b003      	add	sp, #12
 8002fa0:	f85d fb04 	ldr.w	pc, [sp], #4

08002fa4 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle (USBH_HandleTypeDef *phost,
                                         uint8_t duration,
                                         uint8_t reportId)
{
 8002fa4:	b410      	push	{r4}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
  phost->Control.setup.b.wValue.w = (duration << 8 ) | reportId;
 8002fa6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8002faa:	2421      	movs	r4, #33	; 0x21
 8002fac:	7404      	strb	r4, [r0, #16]
  phost->Control.setup.b.wValue.w = (duration << 8 ) | reportId;
 8002fae:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8002fb0:	240a      	movs	r4, #10
  
  phost->Control.setup.b.wIndex.w = 0;
 8002fb2:	2200      	movs	r2, #0
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8002fb4:	7444      	strb	r4, [r0, #17]
  phost->Control.setup.b.wIndex.w = 0;
 8002fb6:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 0;
 8002fb8:	82c2      	strh	r2, [r0, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 8002fba:	4611      	mov	r1, r2
}
 8002fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return USBH_CtlReq(phost, 0 , 0 );
 8002fc0:	f001 bdb9 	b.w	8004b36 <USBH_CtlReq>

08002fc4 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport (USBH_HandleTypeDef *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t* reportBuff,
                                    uint8_t reportLen)
{
 8002fc4:	b470      	push	{r4, r5, r6}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE |\
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 8002fc6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
{
 8002fca:	f89d 500c 	ldrb.w	r5, [sp, #12]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 8002fce:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE |\
 8002fd0:	26a1      	movs	r6, #161	; 0xa1
  
  phost->Control.setup.b.wIndex.w = 0;
 8002fd2:	2200      	movs	r2, #0
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE |\
 8002fd4:	7406      	strb	r6, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0;
 8002fd6:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8002fd8:	2601      	movs	r6, #1
  phost->Control.setup.b.wLength.w = reportLen;
 8002fda:	b2aa      	uxth	r2, r5
  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8002fdc:	7446      	strb	r6, [r0, #17]
  phost->Control.setup.b.wLength.w = reportLen;
 8002fde:	82c2      	strh	r2, [r0, #22]
  
  return USBH_CtlReq(phost, reportBuff , reportLen );
 8002fe0:	4619      	mov	r1, r3
}
 8002fe2:	bc70      	pop	{r4, r5, r6}
  return USBH_CtlReq(phost, reportBuff , reportLen );
 8002fe4:	f001 bda7 	b.w	8004b36 <USBH_CtlReq>

08002fe8 <USBH_HID_SetProtocol>:
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                            uint8_t protocol)
{
  
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8002fe8:	2221      	movs	r2, #33	; 0x21
 8002fea:	7402      	strb	r2, [r0, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
  phost->Control.setup.b.wValue.w = protocol != 0 ? 0 : 1;
 8002fec:	fab1 f181 	clz	r1, r1
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8002ff0:	220b      	movs	r2, #11
  phost->Control.setup.b.wValue.w = protocol != 0 ? 0 : 1;
 8002ff2:	0949      	lsrs	r1, r1, #5
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8002ff4:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wIndex.w = 0;
 8002ff6:	2200      	movs	r2, #0
  phost->Control.setup.b.wValue.w = protocol != 0 ? 0 : 1;
 8002ff8:	8241      	strh	r1, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8002ffa:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 0;
 8002ffc:	82c2      	strh	r2, [r0, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 8002ffe:	4611      	mov	r1, r2
 8003000:	f001 bd99 	b.w	8004b36 <USBH_CtlReq>

08003004 <USBH_HID_ClassRequest>:
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8003004:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{   
 8003008:	b570      	push	{r4, r5, r6, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 800300a:	69dd      	ldr	r5, [r3, #28]
  switch (HID_Handle->ctl_state)
 800300c:	796b      	ldrb	r3, [r5, #5]
{   
 800300e:	4604      	mov	r4, r0
  switch (HID_Handle->ctl_state)
 8003010:	2b05      	cmp	r3, #5
 8003012:	d808      	bhi.n	8003026 <USBH_HID_ClassRequest+0x22>
 8003014:	e8df f003 	tbb	[pc, r3]
 8003018:	032e0703 	.word	0x032e0703
 800301c:	3f35      	.short	0x3f35
    if (USBH_HID_GetHIDDescriptor (phost, USB_HID_DESC_SIZE)== USBH_OK)
 800301e:	2109      	movs	r1, #9
 8003020:	f7ff ffb4 	bl	8002f8c <USBH_HID_GetHIDDescriptor>
 8003024:	b108      	cbz	r0, 800302a <USBH_HID_ClassRequest+0x26>
  USBH_StatusTypeDef status         = USBH_BUSY;
 8003026:	2601      	movs	r6, #1
 8003028:	e042      	b.n	80030b0 <USBH_HID_ClassRequest+0xac>
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc (HID_DescTypeDef *desc, uint8_t *buf)
{
  
  desc->bLength                  = *(uint8_t  *) (buf + 0);
 800302a:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800302e:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 8003032:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8003036:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
  desc->bcdHID                   =  LE16  (buf + 2);
 800303a:	f894 211f 	ldrb.w	r2, [r4, #287]	; 0x11f
 800303e:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8003042:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003046:	852b      	strh	r3, [r5, #40]	; 0x28
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 8003048:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 800304c:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 8003050:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8003054:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 8003058:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 800305c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  desc->wItemLength              =  LE16  (buf + 7);
 8003060:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 8003064:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8003068:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800306c:	85eb      	strh	r3, [r5, #46]	; 0x2e
      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800306e:	2302      	movs	r3, #2
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;        
 8003070:	716b      	strb	r3, [r5, #5]
 8003072:	e7d8      	b.n	8003026 <USBH_HID_ClassRequest+0x22>
    if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 8003074:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 8003076:	f7ff ff7d 	bl	8002f74 <USBH_HID_GetHIDReportDescriptor>
 800307a:	2800      	cmp	r0, #0
 800307c:	d1d3      	bne.n	8003026 <USBH_HID_ClassRequest+0x22>
      HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 800307e:	2304      	movs	r3, #4
 8003080:	e7f6      	b.n	8003070 <USBH_HID_ClassRequest+0x6c>
    classReqStatus = USBH_HID_SetIdle (phost, 0, 0);
 8003082:	2200      	movs	r2, #0
 8003084:	4611      	mov	r1, r2
 8003086:	f7ff ff8d 	bl	8002fa4 <USBH_HID_SetIdle>
    if (classReqStatus == USBH_OK)
 800308a:	b908      	cbnz	r0, 8003090 <USBH_HID_ClassRequest+0x8c>
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;        
 800308c:	2305      	movs	r3, #5
 800308e:	e7ef      	b.n	8003070 <USBH_HID_ClassRequest+0x6c>
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
 8003090:	2803      	cmp	r0, #3
 8003092:	d1c8      	bne.n	8003026 <USBH_HID_ClassRequest+0x22>
 8003094:	e7fa      	b.n	800308c <USBH_HID_ClassRequest+0x88>
    if (USBH_HID_SetProtocol (phost, 0) == USBH_OK)
 8003096:	2100      	movs	r1, #0
 8003098:	f7ff ffa6 	bl	8002fe8 <USBH_HID_SetProtocol>
 800309c:	4606      	mov	r6, r0
 800309e:	2800      	cmp	r0, #0
 80030a0:	d1c1      	bne.n	8003026 <USBH_HID_ClassRequest+0x22>
      HID_Handle->ctl_state = HID_REQ_IDLE;
 80030a2:	2301      	movs	r3, #1
 80030a4:	716b      	strb	r3, [r5, #5]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 80030a6:	2102      	movs	r1, #2
 80030a8:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 80030ac:	4620      	mov	r0, r4
 80030ae:	4798      	blx	r3
}
 80030b0:	4630      	mov	r0, r6
 80030b2:	bd70      	pop	{r4, r5, r6, pc}

080030b4 <fifo_init>:
  * @param  size: Fifo Size
  * @retval none
  */
void fifo_init(FIFO_TypeDef * f, uint8_t * buf, uint16_t size)
{
     f->head = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	8083      	strh	r3, [r0, #4]
     f->tail = 0;
 80030b8:	80c3      	strh	r3, [r0, #6]
     f->lock = 0;
 80030ba:	7283      	strb	r3, [r0, #10]
     f->size = size;
 80030bc:	8102      	strh	r2, [r0, #8]
     f->buf = buf;
 80030be:	6001      	str	r1, [r0, #0]
 80030c0:	4770      	bx	lr

080030c2 <fifo_write>:
  * @param  buf: read buffer 
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t  fifo_write(FIFO_TypeDef * f, const void * buf, uint16_t  nbytes)
{
 80030c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t  i;
  const uint8_t * p;
  p = (const uint8_t*) buf;
  if(f->lock == 0)
 80030c4:	7a87      	ldrb	r7, [r0, #10]
{
 80030c6:	4603      	mov	r3, r0
  if(f->lock == 0)
 80030c8:	b11f      	cbz	r7, 80030d2 <fifo_write+0x10>
          f->head = 0;
        }
      }
    }
  }
  f->lock = 0;
 80030ca:	2100      	movs	r1, #0
 80030cc:	7299      	strb	r1, [r3, #10]
  return nbytes;
 80030ce:	4610      	mov	r0, r2
 80030d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f->lock = 1;
 80030d2:	2401      	movs	r4, #1
 80030d4:	7284      	strb	r4, [r0, #10]
  p = (const uint8_t*) buf;
 80030d6:	468e      	mov	lr, r1
 80030d8:	ebae 0001 	sub.w	r0, lr, r1
 80030dc:	b280      	uxth	r0, r0
    for(i=0; i < nbytes; i++)
 80030de:	4282      	cmp	r2, r0
 80030e0:	d9f3      	bls.n	80030ca <fifo_write+0x8>
      if( (f->head + 1 == f->tail) ||
 80030e2:	889c      	ldrh	r4, [r3, #4]
 80030e4:	88dd      	ldrh	r5, [r3, #6]
 80030e6:	1c66      	adds	r6, r4, #1
 80030e8:	42ae      	cmp	r6, r5
 80030ea:	d102      	bne.n	80030f2 <fifo_write+0x30>
        f->lock = 0;
 80030ec:	2200      	movs	r2, #0
 80030ee:	729a      	strb	r2, [r3, #10]
        return i;
 80030f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 80030f2:	f8b3 c008 	ldrh.w	ip, [r3, #8]
      if( (f->head + 1 == f->tail) ||
 80030f6:	4566      	cmp	r6, ip
 80030f8:	d101      	bne.n	80030fe <fifo_write+0x3c>
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 80030fa:	2d00      	cmp	r5, #0
 80030fc:	d0f6      	beq.n	80030ec <fifo_write+0x2a>
        f->buf[f->head] = *p++;
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	f81e 5b01 	ldrb.w	r5, [lr], #1
 8003104:	5505      	strb	r5, [r0, r4]
        f->head++;
 8003106:	8898      	ldrh	r0, [r3, #4]
        if( f->head == f->size )
 8003108:	891c      	ldrh	r4, [r3, #8]
        f->head++;
 800310a:	3001      	adds	r0, #1
 800310c:	b280      	uxth	r0, r0
        if( f->head == f->size )
 800310e:	4284      	cmp	r4, r0
        f->head++;
 8003110:	8098      	strh	r0, [r3, #4]
          f->head = 0;
 8003112:	bf08      	it	eq
 8003114:	809f      	strheq	r7, [r3, #4]
 8003116:	e7df      	b.n	80030d8 <fifo_write+0x16>

08003118 <USBH_HID_EventCallback>:
* @brief  The function is a callback about HID Data events
*  @param  phost: Selected device
* @retval None
*/
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8003118:	4770      	bx	lr

0800311a <USBH_HID_Process>:
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800311a:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{
 800311e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8003120:	69dc      	ldr	r4, [r3, #28]
  switch (HID_Handle->state)
 8003122:	78a3      	ldrb	r3, [r4, #2]
{
 8003124:	4605      	mov	r5, r0
  switch (HID_Handle->state)
 8003126:	2b06      	cmp	r3, #6
 8003128:	d82c      	bhi.n	8003184 <USBH_HID_Process+0x6a>
 800312a:	e8df f003 	tbb	[pc, r3]
 800312e:	0604      	.short	0x0604
 8003130:	181e2b2b 	.word	0x181e2b2b
 8003134:	2e          	.byte	0x2e
 8003135:	00          	.byte	0x00
    HID_Handle->Init(phost); 
 8003136:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003138:	4798      	blx	r3
    if(USBH_HID_GetReport (phost,
 800313a:	7e23      	ldrb	r3, [r4, #24]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	6963      	ldr	r3, [r4, #20]
 8003140:	2200      	movs	r2, #0
 8003142:	2101      	movs	r1, #1
 8003144:	4628      	mov	r0, r5
 8003146:	f7ff ff3d 	bl	8002fc4 <USBH_HID_GetReport>
 800314a:	b9d8      	cbnz	r0, 8003184 <USBH_HID_Process+0x6a>
      fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);  
 800314c:	8b22      	ldrh	r2, [r4, #24]
 800314e:	6961      	ldr	r1, [r4, #20]
 8003150:	f104 0008 	add.w	r0, r4, #8
 8003154:	f7ff ffb5 	bl	80030c2 <fifo_write>
      HID_Handle->state = HID_SYNC;
 8003158:	2305      	movs	r3, #5
        HID_Handle->state = HID_GET_DATA;
 800315a:	70a3      	strb	r3, [r4, #2]
 800315c:	e012      	b.n	8003184 <USBH_HID_Process+0x6a>
    if(phost->Timer & 1)
 800315e:	f8d0 3588 	ldr.w	r3, [r0, #1416]	; 0x588
 8003162:	07db      	lsls	r3, r3, #31
 8003164:	d50e      	bpl.n	8003184 <USBH_HID_Process+0x6a>
        HID_Handle->state = HID_GET_DATA;
 8003166:	2304      	movs	r3, #4
 8003168:	e7f7      	b.n	800315a <USBH_HID_Process+0x40>
    USBH_InterruptReceiveData(phost, 
 800316a:	7863      	ldrb	r3, [r4, #1]
 800316c:	7e22      	ldrb	r2, [r4, #24]
 800316e:	6961      	ldr	r1, [r4, #20]
 8003170:	f001 ff68 	bl	8005044 <USBH_InterruptReceiveData>
    HID_Handle->state = HID_POLL;
 8003174:	2306      	movs	r3, #6
 8003176:	70a3      	strb	r3, [r4, #2]
    HID_Handle->timer = phost->Timer;
 8003178:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
 800317c:	6223      	str	r3, [r4, #32]
    HID_Handle->DataReady = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8003184:	2000      	movs	r0, #0
 8003186:	b002      	add	sp, #8
 8003188:	bd70      	pop	{r4, r5, r6, pc}
    if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_DONE)
 800318a:	7861      	ldrb	r1, [r4, #1]
 800318c:	f002 fa94 	bl	80056b8 <USBH_LL_GetURBState>
 8003190:	2801      	cmp	r0, #1
 8003192:	4606      	mov	r6, r0
 8003194:	d10f      	bne.n	80031b6 <USBH_HID_Process+0x9c>
      if(HID_Handle->DataReady == 0)
 8003196:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f2      	bne.n	8003184 <USBH_HID_Process+0x6a>
        fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800319e:	8b22      	ldrh	r2, [r4, #24]
 80031a0:	6961      	ldr	r1, [r4, #20]
 80031a2:	f104 0008 	add.w	r0, r4, #8
 80031a6:	f7ff ff8c 	bl	80030c2 <fifo_write>
        HID_Handle->DataReady = 1;
 80031aa:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
        USBH_HID_EventCallback(phost);
 80031ae:	4628      	mov	r0, r5
 80031b0:	f7ff ffb2 	bl	8003118 <USBH_HID_EventCallback>
 80031b4:	e7e6      	b.n	8003184 <USBH_HID_Process+0x6a>
    else if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_STALL) /* IN Endpoint Stalled */
 80031b6:	7861      	ldrb	r1, [r4, #1]
 80031b8:	4628      	mov	r0, r5
 80031ba:	f002 fa7d 	bl	80056b8 <USBH_LL_GetURBState>
 80031be:	2805      	cmp	r0, #5
 80031c0:	d1e0      	bne.n	8003184 <USBH_HID_Process+0x6a>
      if(USBH_ClrFeature(phost,
 80031c2:	7ea1      	ldrb	r1, [r4, #26]
 80031c4:	4628      	mov	r0, r5
 80031c6:	f001 fed0 	bl	8004f6a <USBH_ClrFeature>
 80031ca:	2800      	cmp	r0, #0
 80031cc:	d0cb      	beq.n	8003166 <USBH_HID_Process+0x4c>
 80031ce:	e7d9      	b.n	8003184 <USBH_HID_Process+0x6a>

080031d0 <USBH_HID_KeybdInit>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
  uint32_t x;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;  
 80031d0:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
    
  keybd_info.lctrl=keybd_info.lshift= 0;
 80031d4:	4a0f      	ldr	r2, [pc, #60]	; (8003214 <USBH_HID_KeybdInit+0x44>)
{
 80031d6:	b510      	push	{r4, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;  
 80031d8:	69dc      	ldr	r4, [r3, #28]
  keybd_info.lctrl=keybd_info.lshift= 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	7093      	strb	r3, [r2, #2]
 80031de:	7053      	strb	r3, [r2, #1]
  keybd_info.lalt=keybd_info.lgui= 0;
 80031e0:	7113      	strb	r3, [r2, #4]
 80031e2:	70d3      	strb	r3, [r2, #3]
  keybd_info.rctrl=keybd_info.rshift= 0;
 80031e4:	7193      	strb	r3, [r2, #6]
 80031e6:	7153      	strb	r3, [r2, #5]
  keybd_info.ralt=keybd_info.rgui=0;
 80031e8:	71d3      	strb	r3, [r2, #7]
 80031ea:	7213      	strb	r3, [r2, #8]
  
  
  for(x=0; x< (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
  {
    keybd_report_data[x]=0;
 80031ec:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <USBH_HID_KeybdInit+0x48>)
  
  if(HID_Handle->length > (sizeof(keybd_report_data)/sizeof(uint32_t)))
  {
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
  }
  HID_Handle->pData = (uint8_t*)keybd_report_data;
 80031ee:	6162      	str	r2, [r4, #20]
    keybd_report_data[x]=0;
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	6053      	str	r3, [r2, #4]
  if(HID_Handle->length > (sizeof(keybd_report_data)/sizeof(uint32_t)))
 80031f4:	8b23      	ldrh	r3, [r4, #24]
 80031f6:	2b02      	cmp	r3, #2
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
 80031f8:	bf88      	it	hi
 80031fa:	2302      	movhi	r3, #2
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 80031fc:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
 8003200:	bf88      	it	hi
 8003202:	8323      	strhhi	r3, [r4, #24]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8003204:	f104 0008 	add.w	r0, r4, #8
 8003208:	2250      	movs	r2, #80	; 0x50
 800320a:	f7ff ff53 	bl	80030b4 <fifo_init>
  
  return USBH_OK;    
}
 800320e:	2000      	movs	r0, #0
 8003210:	bd10      	pop	{r4, pc}
 8003212:	bf00      	nop
 8003214:	20000148 	.word	0x20000148
 8003218:	20000140 	.word	0x20000140

0800321c <USBH_HID_MouseInit>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800321c:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544

  mouse_info.x=0;
 8003220:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <USBH_HID_MouseInit+0x3c>)
{
 8003222:	b510      	push	{r4, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8003224:	69dc      	ldr	r4, [r3, #28]
  mouse_info.x=0;
 8003226:	2300      	movs	r3, #0
 8003228:	7013      	strb	r3, [r2, #0]
  mouse_info.y=0;
 800322a:	7053      	strb	r3, [r2, #1]
  mouse_info.buttons[0]=0;
 800322c:	7093      	strb	r3, [r2, #2]
  mouse_info.buttons[1]=0;
 800322e:	70d3      	strb	r3, [r2, #3]
  mouse_info.buttons[2]=0;
 8003230:	7113      	strb	r3, [r2, #4]
  
  mouse_report_data[0]=0;
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <USBH_HID_MouseInit+0x40>)
  
  if(HID_Handle->length > sizeof(mouse_report_data))
  {
    HID_Handle->length = sizeof(mouse_report_data);
  }
  HID_Handle->pData = (uint8_t *)mouse_report_data;
 8003234:	6162      	str	r2, [r4, #20]
  mouse_report_data[0]=0;
 8003236:	6013      	str	r3, [r2, #0]
  if(HID_Handle->length > sizeof(mouse_report_data))
 8003238:	8b23      	ldrh	r3, [r4, #24]
 800323a:	2b04      	cmp	r3, #4
    HID_Handle->length = sizeof(mouse_report_data);
 800323c:	bf88      	it	hi
 800323e:	2304      	movhi	r3, #4
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8003240:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    HID_Handle->length = sizeof(mouse_report_data);
 8003244:	bf88      	it	hi
 8003246:	8323      	strhhi	r3, [r4, #24]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8003248:	f104 0008 	add.w	r0, r4, #8
 800324c:	2228      	movs	r2, #40	; 0x28
 800324e:	f7ff ff31 	bl	80030b4 <fifo_init>

  return USBH_OK;  
}
 8003252:	2000      	movs	r0, #0
 8003254:	bd10      	pop	{r4, pc}
 8003256:	bf00      	nop
 8003258:	20000158 	.word	0x20000158
 800325c:	20000160 	.word	0x20000160

08003260 <USBH_MSC_SOFProcess>:
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{

  return USBH_OK;
}
 8003260:	2000      	movs	r0, #0
 8003262:	4770      	bx	lr

08003264 <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003264:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{
 8003268:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800326a:	69dd      	ldr	r5, [r3, #28]
  switch (MSC_Handle->state)
 800326c:	7b2b      	ldrb	r3, [r5, #12]
{
 800326e:	4606      	mov	r6, r0
  switch (MSC_Handle->state)
 8003270:	b123      	cbz	r3, 800327c <USBH_MSC_Process+0x18>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8003272:	f113 30ff 	adds.w	r0, r3, #4294967295	; 0xffffffff
 8003276:	bf18      	it	ne
 8003278:	2001      	movne	r0, #1
 800327a:	bd70      	pop	{r4, r5, r6, pc}
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 800327c:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 8003280:	682a      	ldr	r2, [r5, #0]
 8003282:	4291      	cmp	r1, r2
 8003284:	f04f 0401 	mov.w	r4, #1
 8003288:	f080 80c6 	bcs.w	8003418 <USBH_MSC_Process+0x1b4>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800328c:	2234      	movs	r2, #52	; 0x34
 800328e:	fb02 5301 	mla	r3, r2, r1, r5
 8003292:	f883 4091 	strb.w	r4, [r3, #145]	; 0x91
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8003296:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800329a:	4614      	mov	r4, r2
 800329c:	2b08      	cmp	r3, #8
 800329e:	d83a      	bhi.n	8003316 <USBH_MSC_Process+0xb2>
 80032a0:	e8df f003 	tbb	[pc, r3]
 80032a4:	64203905 	.word	0x64203905
 80032a8:	3939870e 	.word	0x3939870e
 80032ac:	b6          	.byte	0xb6
 80032ad:	00          	.byte	0x00
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80032ae:	fb04 5401 	mla	r4, r4, r1, r5
 80032b2:	2304      	movs	r3, #4
 80032b4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        MSC_Handle->timer = phost->Timer;
 80032b8:	f8d0 3588 	ldr.w	r3, [r0, #1416]	; 0x588
 80032bc:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80032c0:	2434      	movs	r4, #52	; 0x34
 80032c2:	fb04 5201 	mla	r2, r4, r1, r5
 80032c6:	329f      	adds	r2, #159	; 0x9f
 80032c8:	b2c9      	uxtb	r1, r1
 80032ca:	4630      	mov	r0, r6
 80032cc:	f000 fafd 	bl	80038ca <USBH_MSC_SCSI_Inquiry>
        if( scsi_status == USBH_OK)
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d15f      	bne.n	8003394 <USBH_MSC_Process+0x130>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
 80032d4:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80032d8:	fb04 5503 	mla	r5, r4, r3, r5
 80032dc:	2302      	movs	r3, #2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 80032de:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 80032e2:	e018      	b.n	8003316 <USBH_MSC_Process+0xb2>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
 80032e4:	b2c9      	uxtb	r1, r1
 80032e6:	f000 fa8b 	bl	8003800 <USBH_MSC_SCSI_TestUnitReady>
        if( ready_status == USBH_OK)
 80032ea:	b9b0      	cbnz	r0, 800331a <USBH_MSC_Process+0xb6>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80032ec:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80032f0:	2234      	movs	r2, #52	; 0x34
 80032f2:	fb02 5103 	mla	r1, r2, r3, r5
 80032f6:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 80032fa:	b100      	cbz	r0, 80032fe <USBH_MSC_Process+0x9a>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 80032fc:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80032fe:	fb02 5503 	mla	r5, r2, r3, r5
 8003302:	2303      	movs	r3, #3
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8003304:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8003308:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8003312:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
  USBH_StatusTypeDef error = USBH_BUSY ;
 8003316:	2001      	movs	r0, #1
}
 8003318:	bd70      	pop	{r4, r5, r6, pc}
        if( ready_status == USBH_FAIL)
 800331a:	2802      	cmp	r0, #2
 800331c:	d118      	bne.n	8003350 <USBH_MSC_Process+0xec>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800331e:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8003322:	2234      	movs	r2, #52	; 0x34
 8003324:	fb02 5103 	mla	r1, r2, r3, r5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8003328:	fb02 5503 	mla	r5, r2, r3, r5
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800332c:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 8003330:	2802      	cmp	r0, #2
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 8003332:	bf14      	ite	ne
 8003334:	2001      	movne	r0, #1
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8003336:	2000      	moveq	r0, #0
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8003338:	2305      	movs	r3, #5
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 800333a:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 800333e:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8003342:	2001      	movs	r0, #1
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8003344:	2302      	movs	r3, #2
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8003346:	f885 0091 	strb.w	r0, [r5, #145]	; 0x91
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800334a:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
 800334e:	bd70      	pop	{r4, r5, r6, pc}
        else if(ready_status == USBH_UNRECOVERED_ERROR)
 8003350:	2804      	cmp	r0, #4
 8003352:	d1e0      	bne.n	8003316 <USBH_MSC_Process+0xb2>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003354:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8003358:	2234      	movs	r2, #52	; 0x34
 800335a:	fb02 5503 	mla	r5, r2, r3, r5
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800335e:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8003360:	2302      	movs	r3, #2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003362:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8003366:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
 800336a:	bd70      	pop	{r4, r5, r6, pc}
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800336c:	fb04 5201 	mla	r2, r4, r1, r5
 8003370:	3294      	adds	r2, #148	; 0x94
 8003372:	b2c9      	uxtb	r1, r1
 8003374:	f000 fa6a 	bl	800384c <USBH_MSC_SCSI_ReadCapacity>
        if(scsi_status == USBH_OK)
 8003378:	b960      	cbnz	r0, 8003394 <USBH_MSC_Process+0x130>
          if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1)
 800337a:	f8b5 20f8 	ldrh.w	r2, [r5, #248]	; 0xf8
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800337e:	2301      	movs	r3, #1
 8003380:	fb04 5402 	mla	r4, r4, r2, r5
          MSC_Handle->current_lun++;
 8003384:	441a      	add	r2, r3
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003386:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800338a:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
          MSC_Handle->current_lun++;
 800338e:	f8a5 20f8 	strh.w	r2, [r5, #248]	; 0xf8
 8003392:	e7c0      	b.n	8003316 <USBH_MSC_Process+0xb2>
        else if( scsi_status == USBH_FAIL)
 8003394:	2802      	cmp	r0, #2
 8003396:	d105      	bne.n	80033a4 <USBH_MSC_Process+0x140>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8003398:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 800339c:	fb04 5503 	mla	r5, r4, r3, r5
 80033a0:	2305      	movs	r3, #5
 80033a2:	e79c      	b.n	80032de <USBH_MSC_Process+0x7a>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 80033a4:	2804      	cmp	r0, #4
 80033a6:	d1b6      	bne.n	8003316 <USBH_MSC_Process+0xb2>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80033a8:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80033ac:	fb04 5503 	mla	r5, r4, r3, r5
 80033b0:	e7d5      	b.n	800335e <USBH_MSC_Process+0xfa>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80033b2:	fb04 5201 	mla	r2, r4, r1, r5
 80033b6:	329c      	adds	r2, #156	; 0x9c
 80033b8:	b2c9      	uxtb	r1, r1
 80033ba:	f000 faf0 	bl	800399e <USBH_MSC_SCSI_RequestSense>
        if( scsi_status == USBH_OK)
 80033be:	b9f8      	cbnz	r0, 8003400 <USBH_MSC_Process+0x19c>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80033c0:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80033c4:	fb04 5403 	mla	r4, r4, r3, r5
 80033c8:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
 80033cc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 80033d0:	2a02      	cmp	r2, #2
 80033d2:	d10b      	bne.n	80033ec <USBH_MSC_Process+0x188>
            if((phost->Timer - MSC_Handle->timer) < 10000)
 80033d4:	f8d5 00fc 	ldr.w	r0, [r5, #252]	; 0xfc
 80033d8:	f8d6 1588 	ldr.w	r1, [r6, #1416]	; 0x588
 80033dc:	1a09      	subs	r1, r1, r0
 80033de:	f242 700f 	movw	r0, #9999	; 0x270f
 80033e2:	4281      	cmp	r1, r0
 80033e4:	d802      	bhi.n	80033ec <USBH_MSC_Process+0x188>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80033e6:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
 80033ea:	e794      	b.n	8003316 <USBH_MSC_Process+0xb2>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80033ec:	2234      	movs	r2, #52	; 0x34
 80033ee:	fb02 5203 	mla	r2, r2, r3, r5
 80033f2:	2001      	movs	r0, #1
          MSC_Handle->current_lun++;
 80033f4:	4403      	add	r3, r0
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80033f6:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
          MSC_Handle->current_lun++;
 80033fa:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
        if( scsi_status == USBH_FAIL)
 8003400:	2802      	cmp	r0, #2
 8003402:	d1cf      	bne.n	80033a4 <USBH_MSC_Process+0x140>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 8003404:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8003408:	fb04 5503 	mla	r5, r4, r3, r5
 800340c:	2308      	movs	r3, #8
 800340e:	e766      	b.n	80032de <USBH_MSC_Process+0x7a>
        MSC_Handle->current_lun++;
 8003410:	3101      	adds	r1, #1
 8003412:	f8a5 10f8 	strh.w	r1, [r5, #248]	; 0xf8
 8003416:	e77e      	b.n	8003316 <USBH_MSC_Process+0xb2>
      MSC_Handle->current_lun = 0;
 8003418:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
    MSC_Handle->state = MSC_IDLE;
 800341c:	732c      	strb	r4, [r5, #12]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
 800341e:	f8d0 3594 	ldr.w	r3, [r0, #1428]	; 0x594
 8003422:	2102      	movs	r1, #2
 8003424:	4798      	blx	r3
 8003426:	e776      	b.n	8003316 <USBH_MSC_Process+0xb2>

08003428 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 8003428:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{   
 800342c:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 800342e:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8003430:	7ba3      	ldrb	r3, [r4, #14]
 8003432:	2b02      	cmp	r3, #2
{   
 8003434:	4602      	mov	r2, r0
  switch (MSC_Handle->req_state)
 8003436:	d002      	beq.n	800343e <USBH_MSC_ClassRequest+0x16>
 8003438:	2b03      	cmp	r3, #3
 800343a:	d020      	beq.n	800347e <USBH_MSC_ClassRequest+0x56>
 800343c:	bb2b      	cbnz	r3, 800348a <USBH_MSC_ClassRequest+0x62>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 800343e:	4621      	mov	r1, r4
 8003440:	4610      	mov	r0, r2
 8003442:	f000 f8d2 	bl	80035ea <USBH_MSC_BOT_REQ_GetMaxLUN>
    if(status == USBH_NOT_SUPPORTED)
 8003446:	2803      	cmp	r0, #3
 8003448:	d10e      	bne.n	8003468 <USBH_MSC_ClassRequest+0x40>
      MSC_Handle->max_lun = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	6023      	str	r3, [r4, #0]
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 800344e:	7822      	ldrb	r2, [r4, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 8003450:	2300      	movs	r3, #0
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 8003452:	3201      	adds	r2, #1
 8003454:	6022      	str	r2, [r4, #0]
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8003456:	2034      	movs	r0, #52	; 0x34
 8003458:	2502      	movs	r5, #2
        MSC_Handle->unit[i].state_changed = 0;
 800345a:	461e      	mov	r6, r3
 800345c:	1c59      	adds	r1, r3, #1
      for(i = 0; i < MSC_Handle->max_lun; i++)
 800345e:	b2db      	uxtb	r3, r3
 8003460:	429a      	cmp	r2, r3
 8003462:	d804      	bhi.n	800346e <USBH_MSC_ClassRequest+0x46>
 8003464:	2000      	movs	r0, #0
 8003466:	bd70      	pop	{r4, r5, r6, pc}
    if(status == USBH_OK)
 8003468:	2800      	cmp	r0, #0
 800346a:	d0f0      	beq.n	800344e <USBH_MSC_ClassRequest+0x26>
}
 800346c:	bd70      	pop	{r4, r5, r6, pc}
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800346e:	fb00 4303 	mla	r3, r0, r3, r4
 8003472:	f883 5092 	strb.w	r5, [r3, #146]	; 0x92
        MSC_Handle->unit[i].state_changed = 0;
 8003476:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
 800347a:	460b      	mov	r3, r1
 800347c:	e7ee      	b.n	800345c <USBH_MSC_ClassRequest+0x34>
    if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
 800347e:	2100      	movs	r1, #0
 8003480:	f001 fd73 	bl	8004f6a <USBH_ClrFeature>
 8003484:	b908      	cbnz	r0, 800348a <USBH_MSC_ClassRequest+0x62>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
 8003486:	7be3      	ldrb	r3, [r4, #15]
 8003488:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 800348a:	2001      	movs	r0, #1
 800348c:	e7ee      	b.n	800346c <USBH_MSC_ClassRequest+0x44>

0800348e <USBH_MSC_InterfaceDeInit>:
{
 800348e:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003490:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 8003494:	69dd      	ldr	r5, [r3, #28]
  if ( MSC_Handle->OutPipe)
 8003496:	7969      	ldrb	r1, [r5, #5]
{
 8003498:	4604      	mov	r4, r0
  if ( MSC_Handle->OutPipe)
 800349a:	b139      	cbz	r1, 80034ac <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800349c:	f001 fe02 	bl	80050a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 80034a0:	7969      	ldrb	r1, [r5, #5]
 80034a2:	4620      	mov	r0, r4
 80034a4:	f001 fe1b 	bl	80050de <USBH_FreePipe>
    MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 80034a8:	2300      	movs	r3, #0
 80034aa:	716b      	strb	r3, [r5, #5]
  if ( MSC_Handle->InPipe)
 80034ac:	7929      	ldrb	r1, [r5, #4]
 80034ae:	b141      	cbz	r1, 80034c2 <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80034b0:	4620      	mov	r0, r4
 80034b2:	f001 fdf7 	bl	80050a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 80034b6:	7929      	ldrb	r1, [r5, #4]
 80034b8:	4620      	mov	r0, r4
 80034ba:	f001 fe10 	bl	80050de <USBH_FreePipe>
    MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
 80034be:	2300      	movs	r3, #0
 80034c0:	712b      	strb	r3, [r5, #4]
  if(phost->pActiveClass->pData)
 80034c2:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 80034c6:	69d8      	ldr	r0, [r3, #28]
 80034c8:	b128      	cbz	r0, 80034d6 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free (phost->pActiveClass->pData);
 80034ca:	f002 f985 	bl	80057d8 <free>
    phost->pActiveClass->pData = 0;
 80034ce:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 80034d2:	2200      	movs	r2, #0
 80034d4:	61da      	str	r2, [r3, #28]
}
 80034d6:	2000      	movs	r0, #0
 80034d8:	bd38      	pop	{r3, r4, r5, pc}

080034da <USBH_MSC_InterfaceInit>:
{	 
 80034da:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80034dc:	f8d0 1544 	ldr.w	r1, [r0, #1348]	; 0x544
{	 
 80034e0:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80034e2:	7909      	ldrb	r1, [r1, #4]
 80034e4:	2350      	movs	r3, #80	; 0x50
 80034e6:	2206      	movs	r2, #6
{	 
 80034e8:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80034ea:	f001 f983 	bl	80047f4 <USBH_FindInterface>
  if(interface == 0xFF) /* Not Valid Interface */
 80034ee:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80034f0:	4601      	mov	r1, r0
  if(interface == 0xFF) /* Not Valid Interface */
 80034f2:	d06d      	beq.n	80035d0 <USBH_MSC_InterfaceInit+0xf6>
    USBH_SelectInterface (phost, interface);
 80034f4:	4628      	mov	r0, r5
 80034f6:	f001 f974 	bl	80047e2 <USBH_SelectInterface>
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 80034fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034fe:	f8d5 6544 	ldr.w	r6, [r5, #1348]	; 0x544
 8003502:	f002 f961 	bl	80057c8 <malloc>
 8003506:	61f0      	str	r0, [r6, #28]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003508:	f895 231f 	ldrb.w	r2, [r5, #799]	; 0x31f
 800350c:	2332      	movs	r3, #50	; 0x32
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 800350e:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003510:	fb03 5002 	mla	r0, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8003514:	fb03 5302 	mla	r3, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003518:	f890 1348 	ldrb.w	r1, [r0, #840]	; 0x348
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 800351c:	f893 2350 	ldrb.w	r2, [r3, #848]	; 0x350
 8003520:	f8b0 034a 	ldrh.w	r0, [r0, #842]	; 0x34a
 8003524:	f8b3 3352 	ldrh.w	r3, [r3, #850]	; 0x352
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003528:	f011 0f80 	tst.w	r1, #128	; 0x80
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800352c:	bf19      	ittee	ne
 800352e:	71e1      	strbne	r1, [r4, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8003530:	8160      	strhne	r0, [r4, #10]
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8003532:	71a1      	strbeq	r1, [r4, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
 8003534:	8120      	strheq	r0, [r4, #8]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8003536:	f012 0f80 	tst.w	r2, #128	; 0x80
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800353a:	bf08      	it	eq
 800353c:	71a2      	strbeq	r2, [r4, #6]
    MSC_Handle->current_lun = 0;
 800353e:	f04f 0600 	mov.w	r6, #0
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8003542:	79a1      	ldrb	r1, [r4, #6]
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8003544:	bf18      	it	ne
 8003546:	71e2      	strbne	r2, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8003548:	4628      	mov	r0, r5
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 800354a:	bf14      	ite	ne
 800354c:	8163      	strhne	r3, [r4, #10]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 800354e:	8123      	strheq	r3, [r4, #8]
    MSC_Handle->current_lun = 0;
 8003550:	f8a4 60f8 	strh.w	r6, [r4, #248]	; 0xf8
    MSC_Handle->rw_lun = 0;
 8003554:	f8a4 60fa 	strh.w	r6, [r4, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 8003558:	7326      	strb	r6, [r4, #12]
    MSC_Handle->error = MSC_OK;
 800355a:	7366      	strb	r6, [r4, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 800355c:	73a6      	strb	r6, [r4, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800355e:	f001 fda6 	bl	80050ae <USBH_AllocPipe>
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8003562:	79e1      	ldrb	r1, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8003564:	7160      	strb	r0, [r4, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8003566:	4628      	mov	r0, r5
 8003568:	f001 fda1 	bl	80050ae <USBH_AllocPipe>
 800356c:	7120      	strb	r0, [r4, #4]
    USBH_MSC_BOT_Init(phost);
 800356e:	4628      	mov	r0, r5
 8003570:	f000 f846 	bl	8003600 <USBH_MSC_BOT_Init>
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 8003574:	2268      	movs	r2, #104	; 0x68
 8003576:	4631      	mov	r1, r6
 8003578:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800357c:	f002 f93f 	bl	80057fe <memset>
    USBH_OpenPipe  (phost,
 8003580:	8920      	ldrh	r0, [r4, #8]
 8003582:	9002      	str	r0, [sp, #8]
 8003584:	2702      	movs	r7, #2
 8003586:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800358a:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800358e:	79a2      	ldrb	r2, [r4, #6]
 8003590:	7961      	ldrb	r1, [r4, #5]
 8003592:	9000      	str	r0, [sp, #0]
 8003594:	9701      	str	r7, [sp, #4]
 8003596:	4628      	mov	r0, r5
 8003598:	f001 fd75 	bl	8005086 <USBH_OpenPipe>
    USBH_OpenPipe  (phost,
 800359c:	8960      	ldrh	r0, [r4, #10]
 800359e:	9002      	str	r0, [sp, #8]
 80035a0:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80035a4:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80035a8:	79e2      	ldrb	r2, [r4, #7]
 80035aa:	7921      	ldrb	r1, [r4, #4]
 80035ac:	9000      	str	r0, [sp, #0]
 80035ae:	9701      	str	r7, [sp, #4]
 80035b0:	4628      	mov	r0, r5
 80035b2:	f001 fd68 	bl	8005086 <USBH_OpenPipe>
    USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
 80035b6:	4632      	mov	r2, r6
 80035b8:	7921      	ldrb	r1, [r4, #4]
 80035ba:	4628      	mov	r0, r5
 80035bc:	f002 f88d 	bl	80056da <USBH_LL_SetToggle>
    USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
 80035c0:	4632      	mov	r2, r6
 80035c2:	7961      	ldrb	r1, [r4, #5]
 80035c4:	4628      	mov	r0, r5
 80035c6:	f002 f888 	bl	80056da <USBH_LL_SetToggle>
    status = USBH_OK; 
 80035ca:	4630      	mov	r0, r6
}
 80035cc:	b005      	add	sp, #20
 80035ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = USBH_FAIL;      
 80035d0:	2002      	movs	r0, #2
 80035d2:	e7fb      	b.n	80035cc <USBH_MSC_InterfaceInit+0xf2>

080035d4 <USBH_MSC_BOT_REQ_Reset>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 80035d4:	2221      	movs	r2, #33	; 0x21
 80035d6:	7402      	strb	r2, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80035d8:	22ff      	movs	r2, #255	; 0xff
 80035da:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
 80035dc:	2200      	movs	r2, #0
 80035de:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 80035e0:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 0;           
 80035e2:	82c2      	strh	r2, [r0, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );  
 80035e4:	4611      	mov	r1, r2
 80035e6:	f001 baa6 	b.w	8004b36 <USBH_CtlReq>

080035ea <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80035ea:	22a1      	movs	r2, #161	; 0xa1
 80035ec:	7402      	strb	r2, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80035ee:	22fe      	movs	r2, #254	; 0xfe
 80035f0:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
 80035f2:	2200      	movs	r2, #0
 80035f4:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 80035f6:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1;           
 80035f8:	2201      	movs	r2, #1
 80035fa:	82c2      	strh	r2, [r0, #22]
  
  return USBH_CtlReq(phost, Maxlun , 1 ); 
 80035fc:	f001 ba9b 	b.w	8004b36 <USBH_CtlReq>

08003600 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
  
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003600:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
  
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8003604:	4a05      	ldr	r2, [pc, #20]	; (800361c <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003606:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800360a:	4a05      	ldr	r2, [pc, #20]	; (8003620 <USBH_MSC_BOT_Init+0x20>)
 800360c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;    
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;   
 8003614:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  
  return USBH_OK;
}
 8003618:	2000      	movs	r0, #0
 800361a:	4770      	bx	lr
 800361c:	43425355 	.word	0x43425355
 8003620:	20304050 	.word	0x20304050

08003624 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;  
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003624:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{
 8003628:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800362a:	69dc      	ldr	r4, [r3, #28]
  uint8_t toggle = 0;
  
  switch (MSC_Handle->hbot.state)
 800362c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003630:	3b01      	subs	r3, #1
{
 8003632:	4606      	mov	r6, r0
  switch (MSC_Handle->hbot.state)
 8003634:	2b0a      	cmp	r3, #10
 8003636:	d859      	bhi.n	80036ec <USBH_MSC_BOT_Process+0xc8>
 8003638:	e8df f013 	tbh	[pc, r3, lsl #1]
 800363c:	001a000b 	.word	0x001a000b
 8003640:	003d0033 	.word	0x003d0033
 8003644:	0068005e 	.word	0x0068005e
 8003648:	0093008b 	.word	0x0093008b
 800364c:	00be00b4 	.word	0x00be00b4
 8003650:	00d6      	.short	0x00d6
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 8003652:	2302      	movs	r3, #2
    USBH_BulkSendData (phost,
 8003654:	2501      	movs	r5, #1
    MSC_Handle->hbot.cbw.field.LUN = lun;
 8003656:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 800365a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    USBH_BulkSendData (phost,
 800365e:	221f      	movs	r2, #31
 8003660:	7963      	ldrb	r3, [r4, #5]
 8003662:	9500      	str	r5, [sp, #0]
 8003664:	f104 0154 	add.w	r1, r4, #84	; 0x54
      } 
      
      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
      {
        USBH_BulkSendData (phost,
 8003668:	4630      	mov	r0, r6
 800366a:	f001 fcc4 	bl	8004ff6 <USBH_BulkSendData>
 800366e:	e03d      	b.n	80036ec <USBH_MSC_BOT_Process+0xc8>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe); 
 8003670:	7961      	ldrb	r1, [r4, #5]
 8003672:	f002 f821 	bl	80056b8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003676:	2801      	cmp	r0, #1
 8003678:	d10c      	bne.n	8003694 <USBH_MSC_BOT_Process+0x70>
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0 )
 800367a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800367c:	b143      	cbz	r3, 8003690 <USBH_MSC_BOT_Process+0x6c>
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800367e:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8003682:	2b00      	cmp	r3, #0
          MSC_Handle->hbot.state = BOT_DATA_IN;
 8003684:	bfb4      	ite	lt
 8003686:	2303      	movlt	r3, #3
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 8003688:	2305      	movge	r3, #5
    
  case BOT_UNRECOVERED_ERROR: 
    status = USBH_MSC_BOT_REQ_Reset(phost);
    if ( status == USBH_OK)
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 800368a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800368e:	e006      	b.n	800369e <USBH_MSC_BOT_Process+0x7a>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8003690:	2307      	movs	r3, #7
 8003692:	e7fa      	b.n	800368a <USBH_MSC_BOT_Process+0x66>
    else if(URB_Status == USBH_URB_NOTREADY)
 8003694:	2802      	cmp	r0, #2
 8003696:	d158      	bne.n	800374a <USBH_MSC_BOT_Process+0x126>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003698:	2001      	movs	r0, #1
 800369a:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    
  default:      
    break;
  }
  return status;
}
 800369e:	b002      	add	sp, #8
 80036a0:	bd70      	pop	{r4, r5, r6, pc}
    USBH_BulkReceiveData (phost,
 80036a2:	7923      	ldrb	r3, [r4, #4]
 80036a4:	8962      	ldrh	r2, [r4, #10]
 80036a6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80036aa:	f001 fcbb 	bl	8005024 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_DATA_IN_WAIT;
 80036ae:	2304      	movs	r3, #4
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80036b0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80036b4:	e01a      	b.n	80036ec <USBH_MSC_BOT_Process+0xc8>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 80036b6:	7921      	ldrb	r1, [r4, #4]
 80036b8:	f001 fffe 	bl	80056b8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE) 
 80036bc:	2801      	cmp	r0, #1
 80036be:	d117      	bne.n	80036f0 <USBH_MSC_BOT_Process+0xcc>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80036c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036c2:	8962      	ldrh	r2, [r4, #10]
 80036c4:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;  
 80036c6:	bf8a      	itet	hi
 80036c8:	1a9b      	subhi	r3, r3, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 80036ca:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80036cc:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 80036d0:	65e3      	str	r3, [r4, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 80036d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80036d4:	bf84      	itt	hi
 80036d6:	1889      	addhi	r1, r1, r2
 80036d8:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d065      	beq.n	80037ac <USBH_MSC_BOT_Process+0x188>
        USBH_BulkReceiveData (phost,
 80036e0:	7923      	ldrb	r3, [r4, #4]
 80036e2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80036e6:	4630      	mov	r0, r6
 80036e8:	f001 fc9c 	bl	8005024 <USBH_BulkReceiveData>
  USBH_StatusTypeDef   status = USBH_BUSY;
 80036ec:	2001      	movs	r0, #1
 80036ee:	e7d6      	b.n	800369e <USBH_MSC_BOT_Process+0x7a>
    else if(URB_Status == USBH_URB_STALL)
 80036f0:	2805      	cmp	r0, #5
 80036f2:	d1fb      	bne.n	80036ec <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80036f4:	2309      	movs	r3, #9
 80036f6:	e7db      	b.n	80036b0 <USBH_MSC_BOT_Process+0x8c>
    USBH_BulkSendData (phost,
 80036f8:	2501      	movs	r5, #1
 80036fa:	7963      	ldrb	r3, [r4, #5]
 80036fc:	8922      	ldrh	r2, [r4, #8]
 80036fe:	9500      	str	r5, [sp, #0]
 8003700:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003704:	f001 fc77 	bl	8004ff6 <USBH_BulkSendData>
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8003708:	2306      	movs	r3, #6
 800370a:	e7d1      	b.n	80036b0 <USBH_MSC_BOT_Process+0x8c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);     
 800370c:	7961      	ldrb	r1, [r4, #5]
 800370e:	f001 ffd3 	bl	80056b8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003712:	2801      	cmp	r0, #1
 8003714:	d115      	bne.n	8003742 <USBH_MSC_BOT_Process+0x11e>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8003716:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003718:	8922      	ldrh	r2, [r4, #8]
 800371a:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize; 
 800371c:	bf8a      	itet	hi
 800371e:	1a9b      	subhi	r3, r3, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8003720:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8003722:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8003726:	65e3      	str	r3, [r4, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8003728:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800372a:	bf84      	itt	hi
 800372c:	1889      	addhi	r1, r1, r2
 800372e:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
 8003732:	2501      	movs	r5, #1
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8003734:	2b00      	cmp	r3, #0
 8003736:	d039      	beq.n	80037ac <USBH_MSC_BOT_Process+0x188>
        USBH_BulkSendData (phost,
 8003738:	7963      	ldrb	r3, [r4, #5]
 800373a:	9500      	str	r5, [sp, #0]
 800373c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003740:	e792      	b.n	8003668 <USBH_MSC_BOT_Process+0x44>
    else if(URB_Status == USBH_URB_NOTREADY)
 8003742:	2802      	cmp	r0, #2
 8003744:	d101      	bne.n	800374a <USBH_MSC_BOT_Process+0x126>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8003746:	2305      	movs	r3, #5
 8003748:	e7b2      	b.n	80036b0 <USBH_MSC_BOT_Process+0x8c>
    else if(URB_Status == USBH_URB_STALL)
 800374a:	2805      	cmp	r0, #5
 800374c:	d1ce      	bne.n	80036ec <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800374e:	230a      	movs	r3, #10
 8003750:	e7ae      	b.n	80036b0 <USBH_MSC_BOT_Process+0x8c>
    USBH_BulkReceiveData (phost,
 8003752:	7923      	ldrb	r3, [r4, #4]
 8003754:	220d      	movs	r2, #13
 8003756:	f104 0178 	add.w	r1, r4, #120	; 0x78
 800375a:	f001 fc63 	bl	8005024 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800375e:	2308      	movs	r3, #8
 8003760:	e7a6      	b.n	80036b0 <USBH_MSC_BOT_Process+0x8c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 8003762:	7921      	ldrb	r1, [r4, #4]
 8003764:	f001 ffa8 	bl	80056b8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003768:	2801      	cmp	r0, #1
 800376a:	d1c1      	bne.n	80036f0 <USBH_MSC_BOT_Process+0xcc>
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800376c:	f8d6 3544 	ldr.w	r3, [r6, #1348]	; 0x544
      MSC_Handle->hbot.state = BOT_SEND_CBW;    
 8003770:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;        
 8003774:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003778:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
  
    /*Checking if the transfer length is different than 13*/    
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800377a:	4630      	mov	r0, r6
 800377c:	7921      	ldrb	r1, [r4, #4]
 800377e:	f001 ff57 	bl	8005630 <USBH_LL_GetLastXferSize>
 8003782:	280d      	cmp	r0, #13
 8003784:	d137      	bne.n	80037f6 <USBH_MSC_BOT_Process+0x1d2>
    }
    else
    { /* CSW length is Correct */
      
      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8003786:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003788:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <USBH_MSC_BOT_Process+0x1d8>)
 800378a:	429a      	cmp	r2, r3
 800378c:	d133      	bne.n	80037f6 <USBH_MSC_BOT_Process+0x1d2>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */
        
        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800378e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003790:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003792:	429a      	cmp	r2, r3
 8003794:	d12f      	bne.n	80037f6 <USBH_MSC_BOT_Process+0x1d2>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the 
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0) 
 8003796:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
        status = USBH_OK;
 800379a:	2b00      	cmp	r3, #0
 800379c:	bf14      	ite	ne
 800379e:	2002      	movne	r0, #2
 80037a0:	2000      	moveq	r0, #0
 80037a2:	e77c      	b.n	800369e <USBH_MSC_BOT_Process+0x7a>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80037a4:	79e1      	ldrb	r1, [r4, #7]
 80037a6:	f001 fbe0 	bl	8004f6a <USBH_ClrFeature>
    if (error == USBH_OK)
 80037aa:	b908      	cbnz	r0, 80037b0 <USBH_MSC_BOT_Process+0x18c>
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80037ac:	2307      	movs	r3, #7
 80037ae:	e77f      	b.n	80036b0 <USBH_MSC_BOT_Process+0x8c>
    else if (error == USBH_UNRECOVERED_ERROR)
 80037b0:	2804      	cmp	r0, #4
 80037b2:	d19b      	bne.n	80036ec <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80037b4:	230b      	movs	r3, #11
 80037b6:	e77b      	b.n	80036b0 <USBH_MSC_BOT_Process+0x8c>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80037b8:	79a1      	ldrb	r1, [r4, #6]
 80037ba:	f001 fbd6 	bl	8004f6a <USBH_ClrFeature>
    if ( error == USBH_OK)
 80037be:	4605      	mov	r5, r0
 80037c0:	b980      	cbnz	r0, 80037e4 <USBH_MSC_BOT_Process+0x1c0>
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe); 
 80037c2:	7961      	ldrb	r1, [r4, #5]
 80037c4:	4630      	mov	r0, r6
 80037c6:	f001 ff97 	bl	80056f8 <USBH_LL_GetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1- toggle);   
 80037ca:	f1c0 0201 	rsb	r2, r0, #1
 80037ce:	7961      	ldrb	r1, [r4, #5]
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	4630      	mov	r0, r6
 80037d4:	f001 ff81 	bl	80056da <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0);  
 80037d8:	462a      	mov	r2, r5
 80037da:	7921      	ldrb	r1, [r4, #4]
 80037dc:	4630      	mov	r0, r6
 80037de:	f001 ff7c 	bl	80056da <USBH_LL_SetToggle>
 80037e2:	e787      	b.n	80036f4 <USBH_MSC_BOT_Process+0xd0>
    else if (error == USBH_UNRECOVERED_ERROR)
 80037e4:	2804      	cmp	r0, #4
 80037e6:	e7e4      	b.n	80037b2 <USBH_MSC_BOT_Process+0x18e>
    status = USBH_MSC_BOT_REQ_Reset(phost);
 80037e8:	f7ff fef4 	bl	80035d4 <USBH_MSC_BOT_REQ_Reset>
    if ( status == USBH_OK)
 80037ec:	2800      	cmp	r0, #0
 80037ee:	f47f af56 	bne.w	800369e <USBH_MSC_BOT_Process+0x7a>
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 80037f2:	2301      	movs	r3, #1
 80037f4:	e749      	b.n	800368a <USBH_MSC_BOT_Process+0x66>
        status = USBH_FAIL;
 80037f6:	2002      	movs	r0, #2
 80037f8:	e751      	b.n	800369e <USBH_MSC_BOT_Process+0x7a>
 80037fa:	bf00      	nop
 80037fc:	53425355 	.word	0x53425355

08003800 <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost, 
                                                uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003800:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{
 8003804:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003806:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8003808:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800380c:	2d01      	cmp	r5, #1
 800380e:	d003      	beq.n	8003818 <USBH_MSC_SCSI_TestUnitReady+0x18>
 8003810:	2d02      	cmp	r5, #2
 8003812:	d017      	beq.n	8003844 <USBH_MSC_SCSI_TestUnitReady+0x44>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8003814:	2002      	movs	r0, #2
  default:
    break;
  }
  
  return error;
}
 8003816:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 8003818:	2600      	movs	r6, #0
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800381a:	230a      	movs	r3, #10
 800381c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 8003820:	65e6      	str	r6, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8003822:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003826:	2210      	movs	r2, #16
 8003828:	4631      	mov	r1, r6
 800382a:	f104 0063 	add.w	r0, r4, #99	; 0x63
 800382e:	f001 ffe6 	bl	80057fe <memset>
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003832:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY; 
 8003834:	f884 6063 	strb.w	r6, [r4, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003838:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800383c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    error = USBH_BUSY; 
 8003840:	4628      	mov	r0, r5
    break;
 8003842:	bd70      	pop	{r4, r5, r6, pc}
}
 8003844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    error = USBH_MSC_BOT_Process(phost, lun);
 8003848:	f7ff beec 	b.w	8003624 <USBH_MSC_BOT_Process>

0800384c <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost, 
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800384c:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{
 8003850:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003852:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8003854:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8003858:	2d01      	cmp	r5, #1
{
 800385a:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 800385c:	d003      	beq.n	8003866 <USBH_MSC_SCSI_ReadCapacity+0x1a>
 800385e:	2d02      	cmp	r5, #2
 8003860:	d01c      	beq.n	800389c <USBH_MSC_SCSI_ReadCapacity+0x50>
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8003862:	2001      	movs	r0, #1
  default:
    break;
  }
  
  return error;
}
 8003864:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8003866:	2308      	movs	r3, #8
 8003868:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003870:	230a      	movs	r3, #10
 8003872:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003876:	2210      	movs	r2, #16
 8003878:	2100      	movs	r1, #0
 800387a:	f104 0063 	add.w	r0, r4, #99	; 0x63
 800387e:	f001 ffbe 	bl	80057fe <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10; 
 8003882:	2325      	movs	r3, #37	; 0x25
 8003884:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003888:	2302      	movs	r3, #2
 800388a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 800388e:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003892:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8003896:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800389a:	e7e2      	b.n	8003862 <USBH_MSC_SCSI_ReadCapacity+0x16>
    error = USBH_MSC_BOT_Process(phost, lun);
 800389c:	f7ff fec2 	bl	8003624 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d1df      	bne.n	8003864 <USBH_MSC_SCSI_ReadCapacity+0x18>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 80038a4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 80038a8:	784b      	ldrb	r3, [r1, #1]
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 80038aa:	788a      	ldrb	r2, [r1, #2]
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 80038ac:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 80038ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80038b2:	78ca      	ldrb	r2, [r1, #3]
 80038b4:	4313      	orrs	r3, r2
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 80038b6:	780a      	ldrb	r2, [r1, #0]
 80038b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 80038bc:	6033      	str	r3, [r6, #0]
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
 80038be:	798a      	ldrb	r2, [r1, #6]
 80038c0:	79cb      	ldrb	r3, [r1, #7]
 80038c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80038c6:	80b3      	strh	r3, [r6, #4]
 80038c8:	bd70      	pop	{r4, r5, r6, pc}

080038ca <USBH_MSC_SCSI_Inquiry>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_StdInquiryDataTypeDef *inquiry)
{
 80038ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80038cc:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 80038d0:	69dc      	ldr	r4, [r3, #28]
  switch(MSC_Handle->hbot.cmd_state)
 80038d2:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80038d6:	2d01      	cmp	r5, #1
{
 80038d8:	460f      	mov	r7, r1
 80038da:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 80038dc:	d003      	beq.n	80038e6 <USBH_MSC_SCSI_Inquiry+0x1c>
 80038de:	2d02      	cmp	r5, #2
 80038e0:	d027      	beq.n	8003932 <USBH_MSC_SCSI_Inquiry+0x68>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80038e2:	2502      	movs	r5, #2
 80038e4:	e023      	b.n	800392e <USBH_MSC_SCSI_Inquiry+0x64>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80038ec:	230a      	movs	r3, #10
 80038ee:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 80038f8:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
    MSC_Handle->hbot.cbw.field.CB[2]  = 0;    
 80038fc:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0;    
 8003900:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;    
 8003904:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
        
    MSC_Handle->hbot.state = BOT_SEND_CBW;

    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003908:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800390a:	2224      	movs	r2, #36	; 0x24
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 800390c:	2112      	movs	r1, #18
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 800390e:	017f      	lsls	r7, r7, #5
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003910:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8003914:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8003918:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 800391a:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 800391e:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
 8003922:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003926:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 800392a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  default:
    break;
  }
  
  return error;
}
 800392e:	4628      	mov	r0, r5
 8003930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 8003932:	f7ff fe77 	bl	8003624 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8003936:	4605      	mov	r5, r0
 8003938:	2800      	cmp	r0, #0
 800393a:	d1f8      	bne.n	800392e <USBH_MSC_SCSI_Inquiry+0x64>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800393c:	4601      	mov	r1, r0
 800393e:	2222      	movs	r2, #34	; 0x22
 8003940:	4630      	mov	r0, r6
 8003942:	f001 ff5c 	bl	80057fe <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1F;
 8003946:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	7073      	strb	r3, [r6, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5;  
 8003952:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	7033      	strb	r3, [r6, #0]
      inquiry->RemovableMedia = (MSC_Handle->hbot.pbuf[1] & 0x80)== 0x80;
 800395c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003960:	785b      	ldrb	r3, [r3, #1]
 8003962:	09db      	lsrs	r3, r3, #7
 8003964:	70b3      	strb	r3, [r6, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8);
 8003966:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800396a:	f852 3f08 	ldr.w	r3, [r2, #8]!
 800396e:	f8c6 3003 	str.w	r3, [r6, #3]
 8003972:	6853      	ldr	r3, [r2, #4]
 8003974:	f8c6 3007 	str.w	r3, [r6, #7]
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16);
 8003978:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800397c:	3310      	adds	r3, #16
 800397e:	f106 020c 	add.w	r2, r6, #12
 8003982:	f103 0110 	add.w	r1, r3, #16
 8003986:	f853 0b04 	ldr.w	r0, [r3], #4
 800398a:	f842 0b04 	str.w	r0, [r2], #4
 800398e:	428b      	cmp	r3, r1
 8003990:	d1f9      	bne.n	8003986 <USBH_MSC_SCSI_Inquiry+0xbc>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
 8003992:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f8c6 301d 	str.w	r3, [r6, #29]
 800399c:	e7c7      	b.n	800392e <USBH_MSC_SCSI_Inquiry+0x64>

0800399e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_SenseTypeDef *sense_data)
{
 800399e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80039a0:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 80039a4:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 80039a6:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80039aa:	2d01      	cmp	r5, #1
{
 80039ac:	460f      	mov	r7, r1
 80039ae:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 80039b0:	d003      	beq.n	80039ba <USBH_MSC_SCSI_RequestSense+0x1c>
 80039b2:	2d02      	cmp	r5, #2
 80039b4:	d029      	beq.n	8003a0a <USBH_MSC_SCSI_RequestSense+0x6c>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80039b6:	2002      	movs	r0, #2
  default:
    break;
  }
  
  return error;
}
 80039b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80039ba:	2380      	movs	r3, #128	; 0x80
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80039bc:	260e      	movs	r6, #14
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80039be:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80039c2:	230a      	movs	r3, #10
 80039c4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80039c8:	65e6      	str	r6, [r4, #92]	; 0x5c
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80039ca:	2210      	movs	r2, #16
 80039cc:	2100      	movs	r1, #0
 80039ce:	f104 0063 	add.w	r0, r4, #99	; 0x63
 80039d2:	f001 ff14 	bl	80057fe <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
 80039d6:	2303      	movs	r3, #3
 80039d8:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 80039dc:	2300      	movs	r3, #0
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 80039de:	017f      	lsls	r7, r7, #5
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 80039e0:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0; 
 80039e4:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;       
 80039e8:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80039ec:	2302      	movs	r3, #2
 80039ee:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 80039f2:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 80039f6:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80039fa:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80039fe:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8003a02:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    error = USBH_BUSY; 
 8003a06:	4628      	mov	r0, r5
    break;
 8003a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 8003a0a:	f7ff fe0b 	bl	8003624 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d1d2      	bne.n	80039b8 <USBH_MSC_SCSI_RequestSense+0x1a>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0F;  
 8003a12:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003a16:	789b      	ldrb	r3, [r3, #2]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	7033      	strb	r3, [r6, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8003a1e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003a22:	7b1b      	ldrb	r3, [r3, #12]
 8003a24:	7073      	strb	r3, [r6, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8003a26:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003a2a:	7b5b      	ldrb	r3, [r3, #13]
 8003a2c:	70b3      	strb	r3, [r6, #2]
 8003a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a30 <USBH_MTP_SOFProcess>:
static USBH_StatusTypeDef USBH_MTP_SOFProcess (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef status = USBH_OK;

  return status;
}
 8003a30:	2000      	movs	r0, #0
 8003a32:	4770      	bx	lr

08003a34 <USBH_MTP_InterfaceDeInit>:
{
 8003a34:	b570      	push	{r4, r5, r6, lr}
  MTP_HandleTypeDef *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003a36:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
  if (MTP_Handle->DataOutPipe)
 8003a3a:	f641 562d 	movw	r6, #7469	; 0x1d2d
  MTP_HandleTypeDef *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003a3e:	69dc      	ldr	r4, [r3, #28]
  if (MTP_Handle->DataOutPipe)
 8003a40:	5da1      	ldrb	r1, [r4, r6]
{
 8003a42:	4605      	mov	r5, r0
  if (MTP_Handle->DataOutPipe)
 8003a44:	b139      	cbz	r1, 8003a56 <USBH_MTP_InterfaceDeInit+0x22>
    USBH_ClosePipe(phost, MTP_Handle->DataOutPipe);
 8003a46:	f001 fb2d 	bl	80050a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MTP_Handle->DataOutPipe);
 8003a4a:	5da1      	ldrb	r1, [r4, r6]
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	f001 fb46 	bl	80050de <USBH_FreePipe>
    MTP_Handle->DataOutPipe = 0;     /* Reset the Channel as Free */
 8003a52:	2300      	movs	r3, #0
 8003a54:	55a3      	strb	r3, [r4, r6]
  if (MTP_Handle->DataInPipe)
 8003a56:	f641 562c 	movw	r6, #7468	; 0x1d2c
 8003a5a:	5da1      	ldrb	r1, [r4, r6]
 8003a5c:	b141      	cbz	r1, 8003a70 <USBH_MTP_InterfaceDeInit+0x3c>
    USBH_ClosePipe(phost, MTP_Handle->DataInPipe);
 8003a5e:	4628      	mov	r0, r5
 8003a60:	f001 fb20 	bl	80050a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MTP_Handle->DataInPipe);
 8003a64:	5da1      	ldrb	r1, [r4, r6]
 8003a66:	4628      	mov	r0, r5
 8003a68:	f001 fb39 	bl	80050de <USBH_FreePipe>
    MTP_Handle->DataInPipe = 0;     /* Reset the Channel as Free */
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	55a3      	strb	r3, [r4, r6]
  if (MTP_Handle->NotificationPipe)
 8003a70:	f641 562e 	movw	r6, #7470	; 0x1d2e
 8003a74:	5da1      	ldrb	r1, [r4, r6]
 8003a76:	b141      	cbz	r1, 8003a8a <USBH_MTP_InterfaceDeInit+0x56>
    USBH_ClosePipe(phost, MTP_Handle->NotificationPipe);
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f001 fb13 	bl	80050a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MTP_Handle->NotificationPipe);
 8003a7e:	5da1      	ldrb	r1, [r4, r6]
 8003a80:	4628      	mov	r0, r5
 8003a82:	f001 fb2c 	bl	80050de <USBH_FreePipe>
    MTP_Handle->NotificationPipe = 0;     /* Reset the Channel as Free */
 8003a86:	2300      	movs	r3, #0
 8003a88:	55a3      	strb	r3, [r4, r6]
  if(phost->pActiveClass->pData)
 8003a8a:	f8d5 3544 	ldr.w	r3, [r5, #1348]	; 0x544
 8003a8e:	69d8      	ldr	r0, [r3, #28]
 8003a90:	b128      	cbz	r0, 8003a9e <USBH_MTP_InterfaceDeInit+0x6a>
    USBH_free (phost->pActiveClass->pData);
 8003a92:	f001 fea1 	bl	80057d8 <free>
    phost->pActiveClass->pData = 0;
 8003a96:	f8d5 3544 	ldr.w	r3, [r5, #1348]	; 0x544
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	61da      	str	r2, [r3, #28]
}
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	bd70      	pop	{r4, r5, r6, pc}

08003aa2 <USBH_MTP_InterfaceInit>:
{	
 8003aa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  interface = USBH_FindInterface(phost, 
 8003aa6:	2301      	movs	r3, #1
{	
 8003aa8:	b087      	sub	sp, #28
  interface = USBH_FindInterface(phost, 
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2106      	movs	r1, #6
{	
 8003aae:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, 
 8003ab0:	f000 fea0 	bl	80047f4 <USBH_FindInterface>
  if(interface == 0xFF) /* No Valid Interface */
 8003ab4:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, 
 8003ab6:	4607      	mov	r7, r0
  if(interface == 0xFF) /* No Valid Interface */
 8003ab8:	f000 8102 	beq.w	8003cc0 <USBH_MTP_InterfaceInit+0x21e>
    USBH_SelectInterface (phost, interface);
 8003abc:	4601      	mov	r1, r0
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f000 fe8f 	bl	80047e2 <USBH_SelectInterface>
 8003ac4:	46a0      	mov	r8, r4
 8003ac6:	f504 79fa 	add.w	r9, r4, #500	; 0x1f4
 8003aca:	4623      	mov	r3, r4
    if(phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8003acc:	f893 2341 	ldrb.w	r2, [r3, #833]	; 0x341
 8003ad0:	2a06      	cmp	r2, #6
 8003ad2:	d114      	bne.n	8003afe <USBH_MTP_InterfaceInit+0x5c>
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2100      	movs	r1, #0
        if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80)&&
 8003ad8:	f992 0348 	ldrsb.w	r0, [r2, #840]	; 0x348
 8003adc:	2800      	cmp	r0, #0
 8003ade:	b2ce      	uxtb	r6, r1
 8003ae0:	da08      	bge.n	8003af4 <USBH_MTP_InterfaceInit+0x52>
 8003ae2:	f8b2 034a 	ldrh.w	r0, [r2, #842]	; 0x34a
 8003ae6:	b128      	cbz	r0, 8003af4 <USBH_MTP_InterfaceInit+0x52>
           (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0)&&
 8003ae8:	f892 0349 	ldrb.w	r0, [r2, #841]	; 0x349
 8003aec:	f000 0003 	and.w	r0, r0, #3
 8003af0:	2803      	cmp	r0, #3
 8003af2:	d008      	beq.n	8003b06 <USBH_MTP_InterfaceInit+0x64>
 8003af4:	3101      	adds	r1, #1
      for (endpoint = 0;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++ )
 8003af6:	2905      	cmp	r1, #5
 8003af8:	f102 0208 	add.w	r2, r2, #8
 8003afc:	d1ec      	bne.n	8003ad8 <USBH_MTP_InterfaceInit+0x36>
 8003afe:	3332      	adds	r3, #50	; 0x32
  for (interface = 0;  interface < USBH_MAX_NUM_INTERFACES ; interface ++ )
 8003b00:	454b      	cmp	r3, r9
 8003b02:	d1e3      	bne.n	8003acc <USBH_MTP_InterfaceInit+0x2a>
  return 0xFF; /* Invalid Endpoint */
 8003b04:	26ff      	movs	r6, #255	; 0xff
    phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc (sizeof(MTP_HandleTypeDef));
 8003b06:	f242 10d0 	movw	r0, #8656	; 0x21d0
 8003b0a:	f8d4 a544 	ldr.w	sl, [r4, #1348]	; 0x544
 8003b0e:	f001 fe5b 	bl	80057c8 <malloc>
    MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8003b12:	1c73      	adds	r3, r6, #1
 8003b14:	2632      	movs	r6, #50	; 0x32
 8003b16:	437e      	muls	r6, r7
 8003b18:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8003b1c:	4426      	add	r6, r4
    phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc (sizeof(MTP_HandleTypeDef));
 8003b1e:	f8ca 001c 	str.w	r0, [sl, #28]
    MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8003b22:	f641 5231 	movw	r2, #7473	; 0x1d31
    MTP_Handle->NotificationEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8003b26:	f641 5b36 	movw	fp, #7478	; 0x1d36
    MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8003b2a:	f896 1340 	ldrb.w	r1, [r6, #832]	; 0x340
    MTP_Handle->NotificationEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8003b2e:	f8b6 3342 	ldrh.w	r3, [r6, #834]	; 0x342
    MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8003b32:	5481      	strb	r1, [r0, r2]
    phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc (sizeof(MTP_HandleTypeDef));
 8003b34:	4605      	mov	r5, r0
    MTP_Handle->NotificationEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8003b36:	f820 300b 	strh.w	r3, [r0, fp]
    MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 8003b3a:	4620      	mov	r0, r4
    MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8003b3c:	9205      	str	r2, [sp, #20]
    MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 8003b3e:	f001 fab6 	bl	80050ae <USBH_AllocPipe>
 8003b42:	f641 5a2e 	movw	sl, #7470	; 0x1d2e
    MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 8003b46:	f641 5344 	movw	r3, #7492	; 0x1d44
    MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 8003b4a:	f805 000a 	strb.w	r0, [r5, sl]
 8003b4e:	4601      	mov	r1, r0
    MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 8003b50:	f896 0344 	ldrb.w	r0, [r6, #836]	; 0x344
 8003b54:	52e8      	strh	r0, [r5, r3]
    USBH_OpenPipe  (phost,
 8003b56:	f835 000b 	ldrh.w	r0, [r5, fp]
 8003b5a:	9a05      	ldr	r2, [sp, #20]
 8003b5c:	9002      	str	r0, [sp, #8]
 8003b5e:	2003      	movs	r0, #3
 8003b60:	9001      	str	r0, [sp, #4]
 8003b62:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 8003b66:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003b6a:	5caa      	ldrb	r2, [r5, r2]
 8003b6c:	9000      	str	r0, [sp, #0]
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f001 fa89 	bl	8005086 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, MTP_Handle->NotificationPipe, 0);    
 8003b74:	2200      	movs	r2, #0
 8003b76:	f815 100a 	ldrb.w	r1, [r5, sl]
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f001 fdad 	bl	80056da <USBH_LL_SetToggle>
 8003b80:	4622      	mov	r2, r4
    if(phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8003b82:	f892 3341 	ldrb.w	r3, [r2, #833]	; 0x341
 8003b86:	2b06      	cmp	r3, #6
 8003b88:	d112      	bne.n	8003bb0 <USBH_MTP_InterfaceInit+0x10e>
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	2000      	movs	r0, #0
        if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80)&&
 8003b8e:	f991 6348 	ldrsb.w	r6, [r1, #840]	; 0x348
 8003b92:	2e00      	cmp	r6, #0
 8003b94:	b2c3      	uxtb	r3, r0
 8003b96:	da06      	bge.n	8003ba6 <USBH_MTP_InterfaceInit+0x104>
 8003b98:	f8b1 634a 	ldrh.w	r6, [r1, #842]	; 0x34a
 8003b9c:	b11e      	cbz	r6, 8003ba6 <USBH_MTP_InterfaceInit+0x104>
           (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0)&&
 8003b9e:	f891 6349 	ldrb.w	r6, [r1, #841]	; 0x349
 8003ba2:	07b6      	lsls	r6, r6, #30
 8003ba4:	d408      	bmi.n	8003bb8 <USBH_MTP_InterfaceInit+0x116>
 8003ba6:	3001      	adds	r0, #1
      for (endpoint = 0;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++ )
 8003ba8:	2805      	cmp	r0, #5
 8003baa:	f101 0108 	add.w	r1, r1, #8
 8003bae:	d1ee      	bne.n	8003b8e <USBH_MTP_InterfaceInit+0xec>
 8003bb0:	3232      	adds	r2, #50	; 0x32
  for (interface = 0;  interface < USBH_MAX_NUM_INTERFACES ; interface ++ )
 8003bb2:	454a      	cmp	r2, r9
 8003bb4:	d1e5      	bne.n	8003b82 <USBH_MTP_InterfaceInit+0xe0>
  return 0xFF; /* Invalid Endpoint */
 8003bb6:	23ff      	movs	r3, #255	; 0xff
    MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	2332      	movs	r3, #50	; 0x32
 8003bbc:	437b      	muls	r3, r7
 8003bbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bc2:	4423      	add	r3, r4
 8003bc4:	f641 5b30 	movw	fp, #7472	; 0x1d30
    MTP_Handle->DataInEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8003bc8:	f641 5a34 	movw	sl, #7476	; 0x1d34
    MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8003bcc:	f893 1340 	ldrb.w	r1, [r3, #832]	; 0x340
    MTP_Handle->DataInEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8003bd0:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
    MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8003bd4:	f805 100b 	strb.w	r1, [r5, fp]
    MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 8003bd8:	4620      	mov	r0, r4
    MTP_Handle->DataInEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8003bda:	f825 300a 	strh.w	r3, [r5, sl]
    MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 8003bde:	f001 fa66 	bl	80050ae <USBH_AllocPipe>
 8003be2:	f641 562c 	movw	r6, #7468	; 0x1d2c
 8003be6:	4601      	mov	r1, r0
 8003be8:	55a8      	strb	r0, [r5, r6]
    USBH_OpenPipe  (phost,
 8003bea:	f835 000a 	ldrh.w	r0, [r5, sl]
 8003bee:	9002      	str	r0, [sp, #8]
 8003bf0:	2002      	movs	r0, #2
 8003bf2:	9001      	str	r0, [sp, #4]
 8003bf4:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 8003bf8:	f815 200b 	ldrb.w	r2, [r5, fp]
 8003bfc:	9000      	str	r0, [sp, #0]
 8003bfe:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003c02:	4620      	mov	r0, r4
 8003c04:	f001 fa3f 	bl	8005086 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, MTP_Handle->DataInPipe, 0);  
 8003c08:	2200      	movs	r2, #0
 8003c0a:	5da9      	ldrb	r1, [r5, r6]
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f001 fd64 	bl	80056da <USBH_LL_SetToggle>
    if(phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8003c12:	f898 3341 	ldrb.w	r3, [r8, #833]	; 0x341
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	d112      	bne.n	8003c40 <USBH_MTP_InterfaceInit+0x19e>
 8003c1a:	4643      	mov	r3, r8
 8003c1c:	2200      	movs	r2, #0
        if(((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80) == 0)&&
 8003c1e:	f993 1348 	ldrsb.w	r1, [r3, #840]	; 0x348
 8003c22:	2900      	cmp	r1, #0
 8003c24:	b2d0      	uxtb	r0, r2
 8003c26:	db06      	blt.n	8003c36 <USBH_MTP_InterfaceInit+0x194>
 8003c28:	f8b3 134a 	ldrh.w	r1, [r3, #842]	; 0x34a
 8003c2c:	b119      	cbz	r1, 8003c36 <USBH_MTP_InterfaceInit+0x194>
           (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0)&&
 8003c2e:	f893 1349 	ldrb.w	r1, [r3, #841]	; 0x349
 8003c32:	0789      	lsls	r1, r1, #30
 8003c34:	d409      	bmi.n	8003c4a <USBH_MTP_InterfaceInit+0x1a8>
 8003c36:	3201      	adds	r2, #1
      for (endpoint = 0;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++ )
 8003c38:	2a05      	cmp	r2, #5
 8003c3a:	f103 0308 	add.w	r3, r3, #8
 8003c3e:	d1ee      	bne.n	8003c1e <USBH_MTP_InterfaceInit+0x17c>
 8003c40:	f108 0832 	add.w	r8, r8, #50	; 0x32
  for (interface = 0;  interface < USBH_MAX_NUM_INTERFACES ; interface ++ )
 8003c44:	45c8      	cmp	r8, r9
 8003c46:	d1e4      	bne.n	8003c12 <USBH_MTP_InterfaceInit+0x170>
  return 0xFF; /* Invalid Endpoint */
 8003c48:	20ff      	movs	r0, #255	; 0xff
    MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8003c4a:	1c43      	adds	r3, r0, #1
 8003c4c:	2032      	movs	r0, #50	; 0x32
 8003c4e:	4378      	muls	r0, r7
 8003c50:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8003c54:	4420      	add	r0, r4
 8003c56:	f641 582f 	movw	r8, #7471	; 0x1d2f
    MTP_Handle->DataOutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8003c5a:	f641 5632 	movw	r6, #7474	; 0x1d32
    MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8003c5e:	f890 1340 	ldrb.w	r1, [r0, #832]	; 0x340
    MTP_Handle->DataOutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8003c62:	f8b0 3342 	ldrh.w	r3, [r0, #834]	; 0x342
    MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8003c66:	f805 1008 	strb.w	r1, [r5, r8]
    MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 8003c6a:	4620      	mov	r0, r4
    MTP_Handle->DataOutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8003c6c:	53ab      	strh	r3, [r5, r6]
    MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 8003c6e:	f001 fa1e 	bl	80050ae <USBH_AllocPipe>
 8003c72:	f641 572d 	movw	r7, #7469	; 0x1d2d
 8003c76:	4601      	mov	r1, r0
 8003c78:	55e8      	strb	r0, [r5, r7]
    USBH_OpenPipe  (phost,
 8003c7a:	5ba8      	ldrh	r0, [r5, r6]
 8003c7c:	9002      	str	r0, [sp, #8]
 8003c7e:	2602      	movs	r6, #2
 8003c80:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 8003c84:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003c88:	f815 2008 	ldrb.w	r2, [r5, r8]
 8003c8c:	9000      	str	r0, [sp, #0]
 8003c8e:	9601      	str	r6, [sp, #4]
 8003c90:	4620      	mov	r0, r4
 8003c92:	f001 f9f8 	bl	8005086 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, MTP_Handle->DataOutPipe, 0); 
 8003c96:	2200      	movs	r2, #0
 8003c98:	5de9      	ldrb	r1, [r5, r7]
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f001 fd1d 	bl	80056da <USBH_LL_SetToggle>
  MTP_Handle->state = MTP_OPENSESSION;
 8003ca0:	f641 5338 	movw	r3, #7480	; 0x1d38
  MTP_Handle->is_ready = 0;
 8003ca4:	f242 12cc 	movw	r2, #8652	; 0x21cc
  MTP_Handle->state = MTP_OPENSESSION;
 8003ca8:	54ee      	strb	r6, [r5, r3]
  MTP_Handle->is_ready = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	50ab      	str	r3, [r5, r2]
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 8003cae:	f641 523c 	movw	r2, #7484	; 0x1d3c
  return USBH_PTP_Init(phost);
 8003cb2:	4620      	mov	r0, r4
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 8003cb4:	54ab      	strb	r3, [r5, r2]
}
 8003cb6:	b007      	add	sp, #28
 8003cb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return USBH_PTP_Init(phost);
 8003cbc:	f000 b9ec 	b.w	8004098 <USBH_PTP_Init>
}
 8003cc0:	2002      	movs	r0, #2
 8003cc2:	b007      	add	sp, #28
 8003cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003cc8 <USBH_MTP_ClassRequest>:
 8003cc8:	2000      	movs	r0, #0
 8003cca:	4770      	bx	lr

08003ccc <USBH_MTP_EventsCallback>:
  * @brief  The function informs that host has received an event
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_MTP_EventsCallback(USBH_HandleTypeDef *phost, uint32_t event, uint32_t param)
{
 8003ccc:	4770      	bx	lr

08003cce <USBH_MTP_Process>:
{
 8003cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MTP_HandleTypeDef *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8003cd0:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 8003cd4:	69dc      	ldr	r4, [r3, #28]
  switch(MTP_Handle->state)
 8003cd6:	f641 5338 	movw	r3, #7480	; 0x1d38
{
 8003cda:	4606      	mov	r6, r0
  switch(MTP_Handle->state)
 8003cdc:	5ce3      	ldrb	r3, [r4, r3]
 8003cde:	2b05      	cmp	r3, #5
 8003ce0:	d83c      	bhi.n	8003d5c <USBH_MTP_Process+0x8e>
 8003ce2:	e8df f003 	tbb	[pc, r3]
 8003ce6:	0e50      	.short	0x0e50
 8003ce8:	22163b03 	.word	0x22163b03
    status = USBH_PTP_OpenSession (phost, 1); /* Session '0' is not valid */
 8003cec:	2101      	movs	r1, #1
 8003cee:	f000 fb5c 	bl	80043aa <USBH_PTP_OpenSession>
    if(status == USBH_OK)
 8003cf2:	4605      	mov	r5, r0
 8003cf4:	b918      	cbnz	r0, 8003cfe <USBH_MTP_Process+0x30>
      MTP_Handle->state = MTP_GETDEVICEINFO; 
 8003cf6:	2201      	movs	r2, #1
      MTP_Handle->state = MTP_GETSTORAGEIDS; 
 8003cf8:	f641 5338 	movw	r3, #7480	; 0x1d38
 8003cfc:	54e2      	strb	r2, [r4, r3]
}
 8003cfe:	4628      	mov	r0, r5
 8003d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = USBH_PTP_GetDeviceInfo (phost, &(MTP_Handle->info.devinfo));
 8003d02:	4621      	mov	r1, r4
 8003d04:	f000 fb7f 	bl	8004406 <USBH_PTP_GetDeviceInfo>
    if(status == USBH_OK)
 8003d08:	4605      	mov	r5, r0
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d1f7      	bne.n	8003cfe <USBH_MTP_Process+0x30>
      MTP_Handle->state = MTP_GETSTORAGEIDS; 
 8003d0e:	2204      	movs	r2, #4
 8003d10:	e7f2      	b.n	8003cf8 <USBH_MTP_Process+0x2a>
    status = USBH_PTP_GetStorageIds (phost, &(MTP_Handle->info.storids));
 8003d12:	f604 1104 	addw	r1, r4, #2308	; 0x904
 8003d16:	f000 fbc2 	bl	800449e <USBH_PTP_GetStorageIds>
    if(status == USBH_OK)
 8003d1a:	4605      	mov	r5, r0
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d1ee      	bne.n	8003cfe <USBH_MTP_Process+0x30>
      MTP_Handle->current_storage_unit = 0;
 8003d20:	f242 13c8 	movw	r3, #8648	; 0x21c8
      MTP_Handle->state = MTP_GETSTORAGEINFO;
 8003d24:	2205      	movs	r2, #5
      MTP_Handle->current_storage_unit = 0;
 8003d26:	50e0      	str	r0, [r4, r3]
 8003d28:	e7e6      	b.n	8003cf8 <USBH_MTP_Process+0x2a>
                                      MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit], 
 8003d2a:	f242 17c8 	movw	r7, #8648	; 0x21c8
    status = USBH_PTP_GetStorageInfo (phost, 
 8003d2e:	f44f 7208 	mov.w	r2, #544	; 0x220
                                      MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit], 
 8003d32:	59e3      	ldr	r3, [r4, r7]
    status = USBH_PTP_GetStorageInfo (phost, 
 8003d34:	fb02 4203 	mla	r2, r2, r3, r4
 8003d38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003d3c:	f502 6212 	add.w	r2, r2, #2336	; 0x920
 8003d40:	f8d3 1908 	ldr.w	r1, [r3, #2312]	; 0x908
 8003d44:	f000 fbfd 	bl	8004542 <USBH_PTP_GetStorageInfo>
    if(status == USBH_OK)
 8003d48:	4605      	mov	r5, r0
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d1d7      	bne.n	8003cfe <USBH_MTP_Process+0x30>
      if(++MTP_Handle->current_storage_unit >= MTP_Handle->info.storids.n)
 8003d4e:	59e3      	ldr	r3, [r4, r7]
 8003d50:	f8d4 2904 	ldr.w	r2, [r4, #2308]	; 0x904
 8003d54:	3301      	adds	r3, #1
 8003d56:	4293      	cmp	r3, r2
 8003d58:	51e3      	str	r3, [r4, r7]
 8003d5a:	d201      	bcs.n	8003d60 <USBH_MTP_Process+0x92>
    status = USBH_OK;
 8003d5c:	2500      	movs	r5, #0
 8003d5e:	e7ce      	b.n	8003cfe <USBH_MTP_Process+0x30>
        MTP_Handle->state = MTP_IDLE;
 8003d60:	f641 5338 	movw	r3, #7480	; 0x1d38
        MTP_Handle->is_ready = 1;
 8003d64:	2201      	movs	r2, #1
        MTP_Handle->state = MTP_IDLE;
 8003d66:	54e0      	strb	r0, [r4, r3]
        MTP_Handle->is_ready = 1;
 8003d68:	f242 13cc 	movw	r3, #8652	; 0x21cc
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);    
 8003d6c:	2102      	movs	r1, #2
        MTP_Handle->is_ready = 1;
 8003d6e:	50e2      	str	r2, [r4, r3]
        MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 8003d70:	f641 5318 	movw	r3, #7448	; 0x1d18
 8003d74:	f8d4 2908 	ldr.w	r2, [r4, #2312]	; 0x908
        MTP_Handle->current_storage_unit = 0;
 8003d78:	51e0      	str	r0, [r4, r7]
        MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 8003d7a:	50e2      	str	r2, [r4, r3]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);    
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	f8d6 3594 	ldr.w	r3, [r6, #1428]	; 0x594
 8003d82:	4798      	blx	r3
 8003d84:	e7bb      	b.n	8003cfe <USBH_MTP_Process+0x30>
  switch(MTP_Handle->events.state)
 8003d86:	f641 573c 	movw	r7, #7484	; 0x1d3c
 8003d8a:	5de3      	ldrb	r3, [r4, r7]
 8003d8c:	b37b      	cbz	r3, 8003dee <USBH_MTP_Process+0x120>
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d1e4      	bne.n	8003d5c <USBH_MTP_Process+0x8e>
    if(USBH_LL_GetURBState(phost , MTP_Handle->NotificationPipe) == USBH_URB_DONE)
 8003d92:	f641 532e 	movw	r3, #7470	; 0x1d2e
 8003d96:	5ce1      	ldrb	r1, [r4, r3]
 8003d98:	f001 fc8e 	bl	80056b8 <USBH_LL_GetURBState>
 8003d9c:	2801      	cmp	r0, #1
 8003d9e:	d10b      	bne.n	8003db8 <USBH_MTP_Process+0xea>
  MTP_HandleTypeDef *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 8003da0:	f8d6 3544 	ldr.w	r3, [r6, #1348]	; 0x544
 USBH_MTP_EventsCallback(phost, code, param1);
 8003da4:	f641 5254 	movw	r2, #7508	; 0x1d54
  MTP_HandleTypeDef *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 8003da8:	69db      	ldr	r3, [r3, #28]
 USBH_MTP_EventsCallback(phost, code, param1);
 8003daa:	f641 514e 	movw	r1, #7502	; 0x1d4e
 8003dae:	589a      	ldr	r2, [r3, r2]
 8003db0:	5a59      	ldrh	r1, [r3, r1]
 8003db2:	4630      	mov	r0, r6
 8003db4:	f7ff ff8a 	bl	8003ccc <USBH_MTP_EventsCallback>
    if(( phost->Timer - MTP_Handle->events.timer) >= MTP_Handle->events.poll)
 8003db8:	f504 52ea 	add.w	r2, r4, #7488	; 0x1d40
 8003dbc:	f8d6 3588 	ldr.w	r3, [r6, #1416]	; 0x588
 8003dc0:	6811      	ldr	r1, [r2, #0]
 8003dc2:	1a5b      	subs	r3, r3, r1
 8003dc4:	f641 5144 	movw	r1, #7492	; 0x1d44
 8003dc8:	5a61      	ldrh	r1, [r4, r1]
 8003dca:	428b      	cmp	r3, r1
 8003dcc:	d3c6      	bcc.n	8003d5c <USBH_MTP_Process+0x8e>
     MTP_Handle->events.timer = phost->Timer;
 8003dce:	f8d6 3588 	ldr.w	r3, [r6, #1416]	; 0x588
 8003dd2:	6013      	str	r3, [r2, #0]
      USBH_InterruptReceiveData(phost, 
 8003dd4:	f641 532e 	movw	r3, #7470	; 0x1d2e
 8003dd8:	f641 5236 	movw	r2, #7478	; 0x1d36
 8003ddc:	f504 51ea 	add.w	r1, r4, #7488	; 0x1d40
 8003de0:	5ce3      	ldrb	r3, [r4, r3]
 8003de2:	5ca2      	ldrb	r2, [r4, r2]
 8003de4:	3108      	adds	r1, #8
 8003de6:	4630      	mov	r0, r6
 8003de8:	f001 f92c 	bl	8005044 <USBH_InterruptReceiveData>
 8003dec:	e7b6      	b.n	8003d5c <USBH_MTP_Process+0x8e>
    if((phost->Timer & 1) == 0)
 8003dee:	f8d0 5588 	ldr.w	r5, [r0, #1416]	; 0x588
 8003df2:	f015 0501 	ands.w	r5, r5, #1
 8003df6:	d1b1      	bne.n	8003d5c <USBH_MTP_Process+0x8e>
      MTP_Handle->events.timer = phost->Timer;
 8003df8:	f504 53ea 	add.w	r3, r4, #7488	; 0x1d40
 8003dfc:	f8d0 2588 	ldr.w	r2, [r0, #1416]	; 0x588
 8003e00:	601a      	str	r2, [r3, #0]
      USBH_InterruptReceiveData(phost, 
 8003e02:	f641 532e 	movw	r3, #7470	; 0x1d2e
 8003e06:	f641 5236 	movw	r2, #7478	; 0x1d36
 8003e0a:	f504 51ea 	add.w	r1, r4, #7488	; 0x1d40
 8003e0e:	5ce3      	ldrb	r3, [r4, r3]
 8003e10:	5ca2      	ldrb	r2, [r4, r2]
 8003e12:	3108      	adds	r1, #8
 8003e14:	f001 f916 	bl	8005044 <USBH_InterruptReceiveData>
     MTP_Handle->events.state = MTP_EVENTS_GETDATA ;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	55e3      	strb	r3, [r4, r7]
 8003e1c:	e76f      	b.n	8003cfe <USBH_MTP_Process+0x30>

08003e1e <PTP_GetString>:
static void PTP_GetString (uint8_t *str, uint8_t* data, uint16_t *len)
{
  uint16_t strlength;
  uint16_t idx;
  
  *len = data[0];
 8003e1e:	780b      	ldrb	r3, [r1, #0]
{
 8003e20:	b510      	push	{r4, lr}
  *len = data[0];
 8003e22:	8013      	strh	r3, [r2, #0]
  strlength = 2 * data[0]; 
 8003e24:	780a      	ldrb	r2, [r1, #0]
  data ++; /* Adjust the offset ignoring the String Len */
  
  for (idx = 0; idx < strlength; idx+=2 )
 8003e26:	2300      	movs	r3, #0
  strlength = 2 * data[0]; 
 8003e28:	0052      	lsls	r2, r2, #1
  for (idx = 0; idx < strlength; idx+=2 )
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d302      	bcc.n	8003e34 <PTP_GetString+0x16>
  {
    /* Copy Only the string and ignore the UNICODE ID, hence add the src */
    *str =  data[idx];
    str++;
  }  
  *str = 0; /* mark end of string */  
 8003e2e:	2300      	movs	r3, #0
 8003e30:	7003      	strb	r3, [r0, #0]
 8003e32:	bd10      	pop	{r4, pc}
    *str =  data[idx];
 8003e34:	18cc      	adds	r4, r1, r3
  for (idx = 0; idx < strlength; idx+=2 )
 8003e36:	3302      	adds	r3, #2
    *str =  data[idx];
 8003e38:	7864      	ldrb	r4, [r4, #1]
 8003e3a:	f800 4b01 	strb.w	r4, [r0], #1
  for (idx = 0; idx < strlength; idx+=2 )
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	e7f3      	b.n	8003e2a <PTP_GetString+0xc>

08003e42 <PTP_GetArray16>:
  * @param  data: Device info structure
  * @retval None
  */              

static uint32_t PTP_GetArray16 (uint16_t *array, uint8_t *data, uint32_t offset)
{
 8003e42:	b530      	push	{r4, r5, lr}
  uint32_t size, idx = 0;
  
  size=LE32(&data[offset]);
 8003e44:	188c      	adds	r4, r1, r2
 8003e46:	5c8a      	ldrb	r2, [r1, r2]
 8003e48:	78a3      	ldrb	r3, [r4, #2]
 8003e4a:	7865      	ldrb	r5, [r4, #1]
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8003e52:	4413      	add	r3, r2
 8003e54:	78e2      	ldrb	r2, [r4, #3]
  uint32_t size, idx = 0;
 8003e56:	2100      	movs	r1, #0
  size=LE32(&data[offset]);
 8003e58:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8003e5c:	4622      	mov	r2, r4
  while (size > idx) 
 8003e5e:	4299      	cmp	r1, r3
 8003e60:	f102 0202 	add.w	r2, r2, #2
 8003e64:	d101      	bne.n	8003e6a <PTP_GetArray16+0x28>
  {
    array[idx] = LE16(&data[offset+(sizeof(uint16_t)*(idx+2))]);
    idx++;
  }
  return size;
}
 8003e66:	4608      	mov	r0, r1
 8003e68:	bd30      	pop	{r4, r5, pc}
    array[idx] = LE16(&data[offset+(sizeof(uint16_t)*(idx+2))]);
 8003e6a:	78d5      	ldrb	r5, [r2, #3]
 8003e6c:	7894      	ldrb	r4, [r2, #2]
 8003e6e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 8003e72:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
    idx++;
 8003e76:	3101      	adds	r1, #1
 8003e78:	e7f1      	b.n	8003e5e <PTP_GetArray16+0x1c>

08003e7a <PTP_DecodeDeviceInfo>:
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData;   
 8003e7a:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{
 8003e7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e80:	460e      	mov	r6, r1
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData;   
 8003e82:	69d9      	ldr	r1, [r3, #28]
  if(MTP_Handle->ptp.iteration == 0)
 8003e84:	f242 13bc 	movw	r3, #8636	; 0x21bc
 8003e88:	58cb      	ldr	r3, [r1, r3]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 80a5 	bne.w	8003fda <PTP_DecodeDeviceInfo+0x160>
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 8003e90:	f641 5290 	movw	r2, #7568	; 0x1d90
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 8003e94:	f641 5391 	movw	r3, #7569	; 0x1d91
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 8003e98:	188d      	adds	r5, r1, r2
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 8003e9a:	5cc8      	ldrb	r0, [r1, r3]
 8003e9c:	5c8b      	ldrb	r3, [r1, r2]
 8003e9e:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8003ea2:	8033      	strh	r3, [r6, #0]
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 8003ea4:	f641 5393 	movw	r3, #7571	; 0x1d93
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 8003ea8:	f106 000a 	add.w	r0, r6, #10
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 8003eac:	5cca      	ldrb	r2, [r1, r3]
 8003eae:	f641 5394 	movw	r3, #7572	; 0x1d94
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003eba:	f641 5292 	movw	r2, #7570	; 0x1d92
 8003ebe:	5c8a      	ldrb	r2, [r1, r2]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f641 5295 	movw	r2, #7573	; 0x1d95
 8003ec6:	5c8a      	ldrb	r2, [r1, r2]
 8003ec8:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8003ecc:	6073      	str	r3, [r6, #4]
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 8003ece:	f641 5397 	movw	r3, #7575	; 0x1d97
 8003ed2:	5cca      	ldrb	r2, [r1, r3]
 8003ed4:	f641 5396 	movw	r3, #7574	; 0x1d96
 8003ed8:	5ccb      	ldrb	r3, [r1, r3]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 8003eda:	f501 51ec 	add.w	r1, r1, #7552	; 0x1d80
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 8003ede:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ee2:	8133      	strh	r3, [r6, #8]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 8003ee4:	f10d 0206 	add.w	r2, sp, #6
 8003ee8:	3118      	adds	r1, #24
 8003eea:	f7ff ff98 	bl	8003e1e <PTP_GetString>
    totallen=len*2+1;
 8003eee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003ef2:	0052      	lsls	r2, r2, #1
 8003ef4:	1c54      	adds	r4, r2, #1
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode+totallen]);
 8003ef6:	1929      	adds	r1, r5, r4
    dev_info->OperationsSupported_len = PTP_GetArray16 ((uint16_t *)&dev_info->OperationsSupported, 
 8003ef8:	320b      	adds	r2, #11
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode+totallen]);
 8003efa:	7a48      	ldrb	r0, [r1, #9]
 8003efc:	7a0b      	ldrb	r3, [r1, #8]
 8003efe:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8003f02:	f8a6 310a 	strh.w	r3, [r6, #266]	; 0x10a
    dev_info->OperationsSupported_len = PTP_GetArray16 ((uint16_t *)&dev_info->OperationsSupported, 
 8003f06:	4629      	mov	r1, r5
 8003f08:	f506 7088 	add.w	r0, r6, #272	; 0x110
 8003f0c:	f7ff ff99 	bl	8003e42 <PTP_GetArray16>
    totallen=totallen+dev_info->OperationsSupported_len*sizeof(uint16_t)+sizeof(uint32_t);
 8003f10:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    dev_info->EventsSupported_len = PTP_GetArray16 ((uint16_t *)&dev_info->EventsSupported, 
 8003f14:	f104 020e 	add.w	r2, r4, #14
    dev_info->OperationsSupported_len = PTP_GetArray16 ((uint16_t *)&dev_info->OperationsSupported, 
 8003f18:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
    dev_info->EventsSupported_len = PTP_GetArray16 ((uint16_t *)&dev_info->EventsSupported, 
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	f506 70ee 	add.w	r0, r6, #476	; 0x1dc
 8003f22:	f7ff ff8e 	bl	8003e42 <PTP_GetArray16>
    totallen=totallen+dev_info->EventsSupported_len*sizeof(uint16_t)+sizeof(uint32_t);
 8003f26:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16 ((uint16_t *)&dev_info->DevicePropertiesSupported, 
 8003f2a:	f104 0212 	add.w	r2, r4, #18
    dev_info->EventsSupported_len = PTP_GetArray16 ((uint16_t *)&dev_info->EventsSupported, 
 8003f2e:	f8c6 01d8 	str.w	r0, [r6, #472]	; 0x1d8
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16 ((uint16_t *)&dev_info->DevicePropertiesSupported, 
 8003f32:	4629      	mov	r1, r5
 8003f34:	f506 702a 	add.w	r0, r6, #680	; 0x2a8
 8003f38:	f7ff ff83 	bl	8003e42 <PTP_GetArray16>
    totallen=totallen+dev_info->EventsSupported_len*sizeof(uint16_t)+sizeof(uint32_t);
 8003f3c:	3404      	adds	r4, #4
    totallen=totallen+dev_info->DevicePropertiesSupported_len*sizeof(uint16_t)+sizeof(uint32_t);
 8003f3e:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    dev_info->CaptureFormats_len = PTP_GetArray16 ((uint16_t *)&dev_info->CaptureFormats, 
 8003f42:	f104 0212 	add.w	r2, r4, #18
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16 ((uint16_t *)&dev_info->DevicePropertiesSupported, 
 8003f46:	f8c6 02a4 	str.w	r0, [r6, #676]	; 0x2a4
    dev_info->CaptureFormats_len = PTP_GetArray16 ((uint16_t *)&dev_info->CaptureFormats, 
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	f506 705d 	add.w	r0, r6, #884	; 0x374
 8003f50:	f7ff ff77 	bl	8003e42 <PTP_GetArray16>
    totallen=totallen+dev_info->DevicePropertiesSupported_len*sizeof(uint16_t)+sizeof(uint32_t);
 8003f54:	3404      	adds	r4, #4
    totallen=totallen+dev_info->CaptureFormats_len*sizeof(uint16_t)+sizeof(uint32_t);
 8003f56:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    dev_info->ImageFormats_len =  PTP_GetArray16 ((uint16_t *)&dev_info->ImageFormats, 
 8003f5a:	f104 0212 	add.w	r2, r4, #18
    dev_info->CaptureFormats_len = PTP_GetArray16 ((uint16_t *)&dev_info->CaptureFormats, 
 8003f5e:	f8c6 0370 	str.w	r0, [r6, #880]	; 0x370
    dev_info->ImageFormats_len =  PTP_GetArray16 ((uint16_t *)&dev_info->ImageFormats, 
 8003f62:	4629      	mov	r1, r5
 8003f64:	f506 6088 	add.w	r0, r6, #1088	; 0x440
 8003f68:	f7ff ff6b 	bl	8003e42 <PTP_GetArray16>
    totallen=totallen+dev_info->CaptureFormats_len*sizeof(uint16_t)+sizeof(uint32_t);
 8003f6c:	3404      	adds	r4, #4
    totallen=totallen+dev_info->ImageFormats_len*sizeof(uint16_t)+sizeof(uint32_t); 
 8003f6e:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported+totallen], &len);
 8003f72:	f104 0112 	add.w	r1, r4, #18
    dev_info->ImageFormats_len =  PTP_GetArray16 ((uint16_t *)&dev_info->ImageFormats, 
 8003f76:	f8c6 043c 	str.w	r0, [r6, #1084]	; 0x43c
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported+totallen], &len);
 8003f7a:	f10d 0206 	add.w	r2, sp, #6
 8003f7e:	4429      	add	r1, r5
 8003f80:	f506 60a1 	add.w	r0, r6, #1288	; 0x508
 8003f84:	f7ff ff4b 	bl	8003e1e <PTP_GetString>
    totallen+=len*2+1;
 8003f88:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    totallen=totallen+dev_info->ImageFormats_len*sizeof(uint16_t)+sizeof(uint32_t); 
 8003f8c:	3404      	adds	r4, #4
    totallen+=len*2+1;
 8003f8e:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported+totallen], &len);
 8003f92:	f104 010f 	add.w	r1, r4, #15
 8003f96:	f10d 0206 	add.w	r2, sp, #6
 8003f9a:	4429      	add	r1, r5
 8003f9c:	f206 6007 	addw	r0, r6, #1543	; 0x607
 8003fa0:	f7ff ff3d 	bl	8003e1e <PTP_GetString>
    totallen+=len*2+1;
 8003fa4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    totallen+=len*2+1;
 8003fa8:	3404      	adds	r4, #4
    totallen+=len*2+1;
 8003faa:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported+totallen], &len);
 8003fae:	f104 010c 	add.w	r1, r4, #12
 8003fb2:	f10d 0206 	add.w	r2, sp, #6
 8003fb6:	4429      	add	r1, r5
 8003fb8:	f206 7006 	addw	r0, r6, #1798	; 0x706
 8003fbc:	f7ff ff2f 	bl	8003e1e <PTP_GetString>
    totallen+=len*2+1;
 8003fc0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    totallen+=len*2+1;
 8003fc4:	3401      	adds	r4, #1
    PTP_GetString(dev_info->SerialNumber, &data[PTP_di_OperationsSupported+totallen], &len);
 8003fc6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003fca:	310c      	adds	r1, #12
 8003fcc:	f10d 0206 	add.w	r2, sp, #6
 8003fd0:	4429      	add	r1, r5
 8003fd2:	f606 0005 	addw	r0, r6, #2053	; 0x805
 8003fd6:	f7ff ff22 	bl	8003e1e <PTP_GetString>
}
 8003fda:	b002      	add	sp, #8
 8003fdc:	bd70      	pop	{r4, r5, r6, pc}

08003fde <PTP_BufferFullCallback>:
{
 8003fde:	b538      	push	{r3, r4, r5, lr}
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 8003fe0:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 8003fe4:	69dc      	ldr	r4, [r3, #28]
  switch (MTP_Handle->ptp.data_container.code)
 8003fe6:	f641 538a 	movw	r3, #7562	; 0x1d8a
 8003fea:	f241 0209 	movw	r2, #4105	; 0x1009
 8003fee:	5ae3      	ldrh	r3, [r4, r3]
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <PTP_BufferFullCallback+0x3e>
 8003ff4:	d804      	bhi.n	8004000 <PTP_BufferFullCallback+0x22>
 8003ff6:	f241 0201 	movw	r2, #4097	; 0x1001
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d009      	beq.n	8004012 <PTP_BufferFullCallback+0x34>
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	f241 020d 	movw	r2, #4109	; 0x100d
 8004004:	4293      	cmp	r3, r2
 8004006:	d01e      	beq.n	8004046 <PTP_BufferFullCallback+0x68>
 8004008:	f241 021b 	movw	r2, #4123	; 0x101b
 800400c:	4293      	cmp	r3, r2
 800400e:	d005      	beq.n	800401c <PTP_BufferFullCallback+0x3e>
 8004010:	bd38      	pop	{r3, r4, r5, pc}
    PTP_DecodeDeviceInfo (phost, &(MTP_Handle->info.devinfo));
 8004012:	4621      	mov	r1, r4
}
 8004014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PTP_DecodeDeviceInfo (phost, &(MTP_Handle->info.devinfo));
 8004018:	f7ff bf2f 	b.w	8003e7a <PTP_DecodeDeviceInfo>
    if(MTP_Handle->ptp.iteration == 0)
 800401c:	f242 13bc 	movw	r3, #8636	; 0x21bc
 8004020:	58e3      	ldr	r3, [r4, r3]
 8004022:	b97b      	cbnz	r3, 8004044 <PTP_BufferFullCallback+0x66>
       USBH_memcpy(MTP_Handle->ptp.object_ptr, MTP_Handle->ptp.data_container.payload.data, PTP_USB_BULK_PAYLOAD_LEN_READ);
 8004024:	f242 15c4 	movw	r5, #8644	; 0x21c4
 8004028:	f504 51ec 	add.w	r1, r4, #7552	; 0x1d80
 800402c:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 8004030:	3110      	adds	r1, #16
 8004032:	5960      	ldr	r0, [r4, r5]
 8004034:	f001 fbd8 	bl	80057e8 <memcpy>
       MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ); 
 8004038:	5963      	ldr	r3, [r4, r5]
       MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ); 
 800403a:	f242 12b0 	movw	r2, #8624	; 0x21b0
 800403e:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8004042:	50a3      	str	r3, [r4, r2]
 8004044:	bd38      	pop	{r3, r4, r5, pc}
    if(MTP_Handle->ptp.iteration == 0)
 8004046:	f242 13bc 	movw	r3, #8636	; 0x21bc
 800404a:	58e3      	ldr	r3, [r4, r3]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f9      	bne.n	8004044 <PTP_BufferFullCallback+0x66>
       MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ); 
 8004050:	f242 13c4 	movw	r3, #8644	; 0x21c4
 8004054:	58e3      	ldr	r3, [r4, r3]
 8004056:	e7f0      	b.n	800403a <PTP_BufferFullCallback+0x5c>

08004058 <PTP_GetArray32.constprop.3>:

static uint32_t PTP_GetArray32 (uint32_t *array, uint8_t *data, uint32_t offset)
{
  uint32_t size, idx = 0;
  
  size=LE32(&data[offset]);
 8004058:	788b      	ldrb	r3, [r1, #2]
 800405a:	784a      	ldrb	r2, [r1, #1]
 800405c:	041b      	lsls	r3, r3, #16
 800405e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004062:	780a      	ldrb	r2, [r1, #0]
 8004064:	4413      	add	r3, r2
 8004066:	78ca      	ldrb	r2, [r1, #3]
 8004068:	eb03 6302 	add.w	r3, r3, r2, lsl #24
static uint32_t PTP_GetArray32 (uint32_t *array, uint8_t *data, uint32_t offset)
 800406c:	b530      	push	{r4, r5, lr}
 800406e:	3804      	subs	r0, #4
 8004070:	eb01 0483 	add.w	r4, r1, r3, lsl #2
  while (size > idx) 
 8004074:	42a1      	cmp	r1, r4
 8004076:	d101      	bne.n	800407c <PTP_GetArray32.constprop.3+0x24>
  {
    array[idx] = LE32(&data[offset+(sizeof(uint32_t)*(idx+1))]);
    idx++;
  }
  return size;
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd30      	pop	{r4, r5, pc}
    array[idx] = LE32(&data[offset+(sizeof(uint32_t)*(idx+1))]);
 800407c:	798a      	ldrb	r2, [r1, #6]
 800407e:	794d      	ldrb	r5, [r1, #5]
 8004080:	0412      	lsls	r2, r2, #16
 8004082:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8004086:	790d      	ldrb	r5, [r1, #4]
 8004088:	442a      	add	r2, r5
 800408a:	79cd      	ldrb	r5, [r1, #7]
 800408c:	eb02 6205 	add.w	r2, r2, r5, lsl #24
 8004090:	f840 2f04 	str.w	r2, [r0, #4]!
 8004094:	3104      	adds	r1, #4
 8004096:	e7ed      	b.n	8004074 <PTP_GetArray32.constprop.3+0x1c>

08004098 <USBH_PTP_Init>:
  MTP_HandleTypeDef *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8004098:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 800409c:	69db      	ldr	r3, [r3, #28]
  MTP_Handle->ptp.state = PTP_IDLE;
 800409e:	f503 52eb 	add.w	r2, r3, #7520	; 0x1d60
 80040a2:	2000      	movs	r0, #0
 80040a4:	7010      	strb	r0, [r2, #0]
  MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 80040a6:	f641 5261 	movw	r2, #7521	; 0x1d61
 80040aa:	2101      	movs	r1, #1
 80040ac:	5499      	strb	r1, [r3, r2]
}
 80040ae:	4770      	bx	lr

080040b0 <USBH_PTP_SendRequest>:
  MTP_HandleTypeDef             *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 80040b0:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{
 80040b4:	b570      	push	{r4, r5, r6, lr}
  MTP_HandleTypeDef             *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 80040b6:	69dc      	ldr	r4, [r3, #28]
{
 80040b8:	460d      	mov	r5, r1
  USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 80040ba:	f641 5664 	movw	r6, #7524	; 0x1d64
 80040be:	19a0      	adds	r0, r4, r6
 80040c0:	2220      	movs	r2, #32
 80040c2:	2100      	movs	r1, #0
 80040c4:	f001 fb9b 	bl	80057fe <memset>
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN- (sizeof(uint32_t)*(5-req->Nparam));
 80040c8:	f895 3020 	ldrb.w	r3, [r5, #32]
 80040cc:	3303      	adds	r3, #3
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	51a3      	str	r3, [r4, r6]
  MTP_Handle->ptp.op_container.type = PTP_USB_CONTAINER_COMMAND;
 80040d2:	f641 5368 	movw	r3, #7528	; 0x1d68
 80040d6:	2201      	movs	r2, #1
 80040d8:	52e2      	strh	r2, [r4, r3]
  MTP_Handle->ptp.op_container.code = req->Code;
 80040da:	f641 536a 	movw	r3, #7530	; 0x1d6a
 80040de:	882a      	ldrh	r2, [r5, #0]
 80040e0:	52e2      	strh	r2, [r4, r3]
  MTP_Handle->ptp.op_container.trans_id = req->Transaction_ID;
 80040e2:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80040e6:	68aa      	ldr	r2, [r5, #8]
 80040e8:	50e2      	str	r2, [r4, r3]
  MTP_Handle->ptp.op_container.param1 = req->Param1;
 80040ea:	f641 5370 	movw	r3, #7536	; 0x1d70
 80040ee:	68ea      	ldr	r2, [r5, #12]
 80040f0:	50e2      	str	r2, [r4, r3]
  MTP_Handle->ptp.op_container.param2 = req->Param2;
 80040f2:	f641 5374 	movw	r3, #7540	; 0x1d74
 80040f6:	692a      	ldr	r2, [r5, #16]
 80040f8:	50e2      	str	r2, [r4, r3]
  MTP_Handle->ptp.op_container.param3 = req->Param3;
 80040fa:	f641 5378 	movw	r3, #7544	; 0x1d78
 80040fe:	696a      	ldr	r2, [r5, #20]
 8004100:	50e2      	str	r2, [r4, r3]
  MTP_Handle->ptp.op_container.param4 = req->Param4;
 8004102:	f641 537c 	movw	r3, #7548	; 0x1d7c
 8004106:	69aa      	ldr	r2, [r5, #24]
 8004108:	50e2      	str	r2, [r4, r3]
  MTP_Handle->ptp.op_container.param5 = req->Param5;
 800410a:	f504 54ec 	add.w	r4, r4, #7552	; 0x1d80
 800410e:	69eb      	ldr	r3, [r5, #28]
 8004110:	6023      	str	r3, [r4, #0]
}
 8004112:	2000      	movs	r0, #0
 8004114:	bd70      	pop	{r4, r5, r6, pc}

08004116 <USBH_PTP_GetResponse>:
  MTP_HandleTypeDef             *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 8004116:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
  resp->Code = MTP_Handle->ptp.resp_container.code;
 800411a:	f242 128a 	movw	r2, #8586	; 0x218a
  MTP_HandleTypeDef             *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 800411e:	69db      	ldr	r3, [r3, #28]
  resp->Code = MTP_Handle->ptp.resp_container.code;
 8004120:	5a9a      	ldrh	r2, [r3, r2]
 8004122:	800a      	strh	r2, [r1, #0]
  resp->SessionID = MTP_Handle->ptp.session_id;
 8004124:	f242 12a8 	movw	r2, #8616	; 0x21a8
}
 8004128:	2000      	movs	r0, #0
  resp->SessionID = MTP_Handle->ptp.session_id;
 800412a:	589a      	ldr	r2, [r3, r2]
 800412c:	604a      	str	r2, [r1, #4]
  resp->Transaction_ID = MTP_Handle->ptp.resp_container.trans_id;
 800412e:	f242 128c 	movw	r2, #8588	; 0x218c
 8004132:	589a      	ldr	r2, [r3, r2]
 8004134:	608a      	str	r2, [r1, #8]
  resp->Param1 = MTP_Handle->ptp.resp_container.param1;
 8004136:	f242 1290 	movw	r2, #8592	; 0x2190
 800413a:	589a      	ldr	r2, [r3, r2]
 800413c:	60ca      	str	r2, [r1, #12]
  resp->Param2 = MTP_Handle->ptp.resp_container.param2;
 800413e:	f242 1294 	movw	r2, #8596	; 0x2194
 8004142:	589a      	ldr	r2, [r3, r2]
 8004144:	610a      	str	r2, [r1, #16]
  resp->Param3 = MTP_Handle->ptp.resp_container.param3;
 8004146:	f242 1298 	movw	r2, #8600	; 0x2198
 800414a:	589a      	ldr	r2, [r3, r2]
 800414c:	614a      	str	r2, [r1, #20]
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 800414e:	f242 129c 	movw	r2, #8604	; 0x219c
 8004152:	589a      	ldr	r2, [r3, r2]
 8004154:	618a      	str	r2, [r1, #24]
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 8004156:	f242 12a0 	movw	r2, #8608	; 0x21a0
 800415a:	589b      	ldr	r3, [r3, r2]
 800415c:	61cb      	str	r3, [r1, #28]
}
 800415e:	4770      	bx	lr

08004160 <USBH_PTP_Process>:
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 8004160:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{
 8004164:	b5f0      	push	{r4, r5, r6, r7, lr}
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 8004166:	69dc      	ldr	r4, [r3, #28]
  switch (MTP_Handle->ptp.state)
 8004168:	f504 56eb 	add.w	r6, r4, #7520	; 0x1d60
{
 800416c:	b08d      	sub	sp, #52	; 0x34
  switch (MTP_Handle->ptp.state)
 800416e:	7833      	ldrb	r3, [r6, #0]
 8004170:	3b01      	subs	r3, #1
{
 8004172:	4607      	mov	r7, r0
  switch (MTP_Handle->ptp.state)
 8004174:	2b08      	cmp	r3, #8
 8004176:	d82b      	bhi.n	80041d0 <USBH_PTP_Process+0x70>
 8004178:	e8df f013 	tbh	[pc, r3, lsl #1]
 800417c:	00170009 	.word	0x00170009
 8004180:	00450036 	.word	0x00450036
 8004184:	00950088 	.word	0x00950088
 8004188:	00f700ec 	.word	0x00f700ec
 800418c:	0111      	.short	0x0111
                       MTP_Handle->ptp.op_container.length, 
 800418e:	f641 5164 	movw	r1, #7524	; 0x1d64
    USBH_BulkSendData (phost,
 8004192:	f641 532d 	movw	r3, #7469	; 0x1d2d
 8004196:	2501      	movs	r5, #1
 8004198:	5ce3      	ldrb	r3, [r4, r3]
 800419a:	5a62      	ldrh	r2, [r4, r1]
 800419c:	9500      	str	r5, [sp, #0]
 800419e:	4421      	add	r1, r4
 80041a0:	f000 ff29 	bl	8004ff6 <USBH_BulkSendData>
    MTP_Handle->ptp.state = PTP_OP_REQUEST_WAIT_STATE;
 80041a4:	2302      	movs	r3, #2
      MTP_Handle->ptp.state  = PTP_ERROR;
 80041a6:	7033      	strb	r3, [r6, #0]
 80041a8:	e012      	b.n	80041d0 <USBH_PTP_Process+0x70>
    URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 80041aa:	f641 532d 	movw	r3, #7469	; 0x1d2d
 80041ae:	5ce1      	ldrb	r1, [r4, r3]
 80041b0:	f001 fa82 	bl	80056b8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80041b4:	2801      	cmp	r0, #1
 80041b6:	d111      	bne.n	80041dc <USBH_PTP_Process+0x7c>
       if(MTP_Handle->ptp.flags == PTP_DP_NODATA)
 80041b8:	f242 13ac 	movw	r3, #8620	; 0x21ac
 80041bc:	58e3      	ldr	r3, [r4, r3]
 80041be:	b91b      	cbnz	r3, 80041c8 <USBH_PTP_Process+0x68>
         MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 80041c0:	2307      	movs	r3, #7
         MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 80041c2:	7033      	strb	r3, [r6, #0]
}
 80041c4:	b00d      	add	sp, #52	; 0x34
 80041c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
       else  if(MTP_Handle->ptp.flags == PTP_DP_SENDDATA)
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d103      	bne.n	80041d4 <USBH_PTP_Process+0x74>
         MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 80041cc:	2203      	movs	r2, #3
 80041ce:	7032      	strb	r2, [r6, #0]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80041d0:	2001      	movs	r0, #1
 80041d2:	e7f7      	b.n	80041c4 <USBH_PTP_Process+0x64>
       else  if(MTP_Handle->ptp.flags == PTP_DP_GETDATA)
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d1fb      	bne.n	80041d0 <USBH_PTP_Process+0x70>
         MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 80041d8:	2305      	movs	r3, #5
 80041da:	e7f2      	b.n	80041c2 <USBH_PTP_Process+0x62>
    else if(URB_Status == USBH_URB_NOTREADY)
 80041dc:	2802      	cmp	r0, #2
 80041de:	f040 80b4 	bne.w	800434a <USBH_PTP_Process+0x1ea>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 80041e2:	2001      	movs	r0, #1
 80041e4:	7030      	strb	r0, [r6, #0]
 80041e6:	e7ed      	b.n	80041c4 <USBH_PTP_Process+0x64>
    USBH_BulkSendData (phost,
 80041e8:	f641 532d 	movw	r3, #7469	; 0x1d2d
 80041ec:	f641 5232 	movw	r2, #7474	; 0x1d32
 80041f0:	2501      	movs	r5, #1
 80041f2:	f242 11b0 	movw	r1, #8624	; 0x21b0
 80041f6:	5ce3      	ldrb	r3, [r4, r3]
 80041f8:	5aa2      	ldrh	r2, [r4, r2]
 80041fa:	9500      	str	r5, [sp, #0]
 80041fc:	5861      	ldr	r1, [r4, r1]
 80041fe:	f000 fefa 	bl	8004ff6 <USBH_BulkSendData>
    MTP_Handle->ptp.state  = PTP_DATA_OUT_PHASE_WAIT_STATE;    
 8004202:	2304      	movs	r3, #4
 8004204:	e7cf      	b.n	80041a6 <USBH_PTP_Process+0x46>
    URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);     
 8004206:	f641 532d 	movw	r3, #7469	; 0x1d2d
 800420a:	5ce1      	ldrb	r1, [r4, r3]
 800420c:	f001 fa54 	bl	80056b8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8004210:	2801      	cmp	r0, #1
 8004212:	d137      	bne.n	8004284 <USBH_PTP_Process+0x124>
      if(MTP_Handle->ptp.data_length > MTP_Handle->DataOutEpSize)
 8004214:	f242 11b4 	movw	r1, #8628	; 0x21b4
 8004218:	f641 5332 	movw	r3, #7474	; 0x1d32
 800421c:	5862      	ldr	r2, [r4, r1]
 800421e:	5ae3      	ldrh	r3, [r4, r3]
 8004220:	429a      	cmp	r2, r3
 8004222:	dd2c      	ble.n	800427e <USBH_PTP_Process+0x11e>
        MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 8004224:	f242 15b0 	movw	r5, #8624	; 0x21b0
        MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize; 
 8004228:	1ad2      	subs	r2, r2, r3
        MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 800422a:	5960      	ldr	r0, [r4, r5]
 800422c:	4418      	add	r0, r3
 800422e:	5160      	str	r0, [r4, r5]
        MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 8004230:	f242 15b8 	movw	r5, #8632	; 0x21b8
        MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize; 
 8004234:	5062      	str	r2, [r4, r1]
        MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 8004236:	5962      	ldr	r2, [r4, r5]
 8004238:	4413      	add	r3, r2
        if(MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800423a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
        MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 800423e:	5163      	str	r3, [r4, r5]
        if(MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 8004240:	d309      	bcc.n	8004256 <USBH_PTP_Process+0xf6>
          PTP_BufferFullCallback (phost);
 8004242:	4638      	mov	r0, r7
 8004244:	f7ff fecb 	bl	8003fde <PTP_BufferFullCallback>
          MTP_Handle->ptp.iteration++;            
 8004248:	f242 12bc 	movw	r2, #8636	; 0x21bc
          MTP_Handle->ptp.data_packet = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	5163      	str	r3, [r4, r5]
          MTP_Handle->ptp.iteration++;            
 8004250:	58a3      	ldr	r3, [r4, r2]
 8004252:	3301      	adds	r3, #1
 8004254:	50a3      	str	r3, [r4, r2]
      if(MTP_Handle->ptp.data_length > 0)
 8004256:	f242 13b4 	movw	r3, #8628	; 0x21b4
 800425a:	58e3      	ldr	r3, [r4, r3]
 800425c:	2b00      	cmp	r3, #0
 800425e:	dd72      	ble.n	8004346 <USBH_PTP_Process+0x1e6>
        USBH_BulkSendData (phost,
 8004260:	f641 532d 	movw	r3, #7469	; 0x1d2d
 8004264:	f641 5232 	movw	r2, #7474	; 0x1d32
 8004268:	2501      	movs	r5, #1
 800426a:	f242 11b0 	movw	r1, #8624	; 0x21b0
 800426e:	5ce3      	ldrb	r3, [r4, r3]
 8004270:	5aa2      	ldrh	r2, [r4, r2]
 8004272:	9500      	str	r5, [sp, #0]
 8004274:	5861      	ldr	r1, [r4, r1]
 8004276:	4638      	mov	r0, r7
 8004278:	f000 febd 	bl	8004ff6 <USBH_BulkSendData>
 800427c:	e7a8      	b.n	80041d0 <USBH_PTP_Process+0x70>
        MTP_Handle->ptp.data_length = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	5063      	str	r3, [r4, r1]
 8004282:	e7e8      	b.n	8004256 <USBH_PTP_Process+0xf6>
    else if(URB_Status == USBH_URB_NOTREADY)
 8004284:	2802      	cmp	r0, #2
 8004286:	d160      	bne.n	800434a <USBH_PTP_Process+0x1ea>
      MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 8004288:	2303      	movs	r3, #3
 800428a:	e78c      	b.n	80041a6 <USBH_PTP_Process+0x46>
    USBH_BulkReceiveData (phost,
 800428c:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8004290:	f641 5234 	movw	r2, #7476	; 0x1d34
 8004294:	f242 11b0 	movw	r1, #8624	; 0x21b0
 8004298:	5ce3      	ldrb	r3, [r4, r3]
 800429a:	5aa2      	ldrh	r2, [r4, r2]
 800429c:	5861      	ldr	r1, [r4, r1]
 800429e:	f000 fec1 	bl	8005024 <USBH_BulkReceiveData>
    MTP_Handle->ptp.state  = PTP_DATA_IN_PHASE_WAIT_STATE;    
 80042a2:	2306      	movs	r3, #6
 80042a4:	e77f      	b.n	80041a6 <USBH_PTP_Process+0x46>
    URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 80042a6:	f641 552c 	movw	r5, #7468	; 0x1d2c
 80042aa:	5d61      	ldrb	r1, [r4, r5]
 80042ac:	f001 fa04 	bl	80056b8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80042b0:	2801      	cmp	r0, #1
 80042b2:	d14a      	bne.n	800434a <USBH_PTP_Process+0x1ea>
      len = USBH_LL_GetLastXferSize (phost, MTP_Handle->DataInPipe);
 80042b4:	5d61      	ldrb	r1, [r4, r5]
 80042b6:	4638      	mov	r0, r7
 80042b8:	f001 f9ba 	bl	8005630 <USBH_LL_GetLastXferSize>
      if( MTP_Handle->ptp.data_packet_counter++ == 0)
 80042bc:	f504 5207 	add.w	r2, r4, #8640	; 0x21c0
 80042c0:	6813      	ldr	r3, [r2, #0]
 80042c2:	1c59      	adds	r1, r3, #1
 80042c4:	6011      	str	r1, [r2, #0]
 80042c6:	b94b      	cbnz	r3, 80042dc <USBH_PTP_Process+0x17c>
        MTP_Handle->ptp.data_length = *(uint32_t*)(MTP_Handle->ptp.data_ptr);
 80042c8:	f242 12b0 	movw	r2, #8624	; 0x21b0
 80042cc:	58a2      	ldr	r2, [r4, r2]
 80042ce:	6811      	ldr	r1, [r2, #0]
 80042d0:	f242 12b4 	movw	r2, #8628	; 0x21b4
 80042d4:	50a1      	str	r1, [r4, r2]
        MTP_Handle->ptp.iteration = 0;
 80042d6:	f242 12bc 	movw	r2, #8636	; 0x21bc
 80042da:	50a3      	str	r3, [r4, r2]
      if((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0))
 80042dc:	f641 5334 	movw	r3, #7476	; 0x1d34
 80042e0:	5ae3      	ldrh	r3, [r4, r3]
 80042e2:	4298      	cmp	r0, r3
 80042e4:	d32a      	bcc.n	800433c <USBH_PTP_Process+0x1dc>
 80042e6:	f242 11b4 	movw	r1, #8628	; 0x21b4
 80042ea:	5863      	ldr	r3, [r4, r1]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	dd25      	ble.n	800433c <USBH_PTP_Process+0x1dc>
        MTP_Handle->ptp.data_ptr += len;
 80042f0:	f242 15b0 	movw	r5, #8624	; 0x21b0
        MTP_Handle->ptp.data_length -= len;
 80042f4:	1a1b      	subs	r3, r3, r0
        MTP_Handle->ptp.data_ptr += len;
 80042f6:	5962      	ldr	r2, [r4, r5]
 80042f8:	4402      	add	r2, r0
 80042fa:	5162      	str	r2, [r4, r5]
        MTP_Handle->ptp.data_packet += len;
 80042fc:	f242 15b8 	movw	r5, #8632	; 0x21b8
        MTP_Handle->ptp.data_length -= len;
 8004300:	5063      	str	r3, [r4, r1]
        MTP_Handle->ptp.data_packet += len;
 8004302:	5963      	ldr	r3, [r4, r5]
 8004304:	4418      	add	r0, r3
        if(MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 8004306:	f5b0 7f7d 	cmp.w	r0, #1012	; 0x3f4
        MTP_Handle->ptp.data_packet += len;
 800430a:	5160      	str	r0, [r4, r5]
        if(MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800430c:	d309      	bcc.n	8004322 <USBH_PTP_Process+0x1c2>
          PTP_BufferFullCallback (phost);
 800430e:	4638      	mov	r0, r7
 8004310:	f7ff fe65 	bl	8003fde <PTP_BufferFullCallback>
          MTP_Handle->ptp.iteration++;            
 8004314:	f242 12bc 	movw	r2, #8636	; 0x21bc
          MTP_Handle->ptp.data_packet = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	5163      	str	r3, [r4, r5]
          MTP_Handle->ptp.iteration++;            
 800431c:	58a3      	ldr	r3, [r4, r2]
 800431e:	3301      	adds	r3, #1
 8004320:	50a3      	str	r3, [r4, r2]
        USBH_BulkReceiveData (phost,
 8004322:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8004326:	f641 5234 	movw	r2, #7476	; 0x1d34
 800432a:	f242 11b0 	movw	r1, #8624	; 0x21b0
 800432e:	5ce3      	ldrb	r3, [r4, r3]
 8004330:	5aa2      	ldrh	r2, [r4, r2]
 8004332:	5861      	ldr	r1, [r4, r1]
 8004334:	4638      	mov	r0, r7
 8004336:	f000 fe75 	bl	8005024 <USBH_BulkReceiveData>
 800433a:	e749      	b.n	80041d0 <USBH_PTP_Process+0x70>
        MTP_Handle->ptp.data_length -= len;
 800433c:	f242 12b4 	movw	r2, #8628	; 0x21b4
 8004340:	58a3      	ldr	r3, [r4, r2]
 8004342:	1a18      	subs	r0, r3, r0
 8004344:	50a0      	str	r0, [r4, r2]
        MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 8004346:	2307      	movs	r3, #7
 8004348:	e72d      	b.n	80041a6 <USBH_PTP_Process+0x46>
    else if(URB_Status == USBH_URB_STALL)     
 800434a:	2805      	cmp	r0, #5
    else if(URB_Status == USBH_URB_STALL)     
 800434c:	f47f af40 	bne.w	80041d0 <USBH_PTP_Process+0x70>
      MTP_Handle->ptp.state  = PTP_ERROR;
 8004350:	2309      	movs	r3, #9
 8004352:	e728      	b.n	80041a6 <USBH_PTP_Process+0x46>
    USBH_BulkReceiveData (phost,
 8004354:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8004358:	f504 5106 	add.w	r1, r4, #8576	; 0x2180
 800435c:	5ce3      	ldrb	r3, [r4, r3]
 800435e:	223f      	movs	r2, #63	; 0x3f
 8004360:	3104      	adds	r1, #4
 8004362:	f000 fe5f 	bl	8005024 <USBH_BulkReceiveData>
    MTP_Handle->ptp.state  = PTP_RESPONSE_WAIT_STATE;
 8004366:	2308      	movs	r3, #8
 8004368:	e71d      	b.n	80041a6 <USBH_PTP_Process+0x46>
    URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800436a:	f641 532c 	movw	r3, #7468	; 0x1d2c
 800436e:	5ce1      	ldrb	r1, [r4, r3]
 8004370:	f001 f9a2 	bl	80056b8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8004374:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 8004376:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 8004378:	d10f      	bne.n	800439a <USBH_PTP_Process+0x23a>
       USBH_PTP_GetResponse (phost, &ptp_container);
 800437a:	a903      	add	r1, sp, #12
 800437c:	4638      	mov	r0, r7
 800437e:	f7ff feca 	bl	8004116 <USBH_PTP_GetResponse>
       if(ptp_container.Code == PTP_RC_OK)
 8004382:	f8bd 000c 	ldrh.w	r0, [sp, #12]
         status = USBH_FAIL;
 8004386:	f242 0301 	movw	r3, #8193	; 0x2001
 800438a:	4298      	cmp	r0, r3
 800438c:	bf14      	ite	ne
 800438e:	2002      	movne	r0, #2
 8004390:	2000      	moveq	r0, #0
       MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8004392:	f641 5361 	movw	r3, #7521	; 0x1d61
 8004396:	54e5      	strb	r5, [r4, r3]
 8004398:	e714      	b.n	80041c4 <USBH_PTP_Process+0x64>
    else if(URB_Status == USBH_URB_STALL)     
 800439a:	2805      	cmp	r0, #5
 800439c:	e7d6      	b.n	800434c <USBH_PTP_Process+0x1ec>
      MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800439e:	f641 5361 	movw	r3, #7521	; 0x1d61
 80043a2:	2201      	movs	r2, #1
 80043a4:	54e2      	strb	r2, [r4, r3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80043a6:	4610      	mov	r0, r2
      break;
 80043a8:	e70c      	b.n	80041c4 <USBH_PTP_Process+0x64>

080043aa <USBH_PTP_OpenSession>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_OpenSession (USBH_HandleTypeDef *phost, uint32_t session)
{
  USBH_StatusTypeDef   status = USBH_BUSY; 
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 80043aa:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{
 80043ae:	b570      	push	{r4, r5, r6, lr}
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 80043b0:	69dd      	ldr	r5, [r3, #28]
  PTP_ContainerTypedef  ptp_container;
  
  switch(MTP_Handle->ptp.req_state)
 80043b2:	f641 5661 	movw	r6, #7521	; 0x1d61
{
 80043b6:	b08a      	sub	sp, #40	; 0x28
  switch(MTP_Handle->ptp.req_state)
 80043b8:	5dac      	ldrb	r4, [r5, r6]
 80043ba:	2c01      	cmp	r4, #1
 80043bc:	d003      	beq.n	80043c6 <USBH_PTP_OpenSession+0x1c>
 80043be:	2c02      	cmp	r4, #2
 80043c0:	d01d      	beq.n	80043fe <USBH_PTP_OpenSession+0x54>
  USBH_StatusTypeDef   status = USBH_BUSY; 
 80043c2:	2001      	movs	r0, #1
 80043c4:	e01d      	b.n	8004402 <USBH_PTP_OpenSession+0x58>
  {
  case PTP_REQ_SEND:

    /* Init session params */
    MTP_Handle->ptp.transaction_id = 0x00000000;
    MTP_Handle->ptp.session_id = session;
 80043c6:	f242 13a8 	movw	r3, #8616	; 0x21a8
    MTP_Handle->ptp.flags = PTP_DP_NODATA;
 80043ca:	f242 12ac 	movw	r2, #8620	; 0x21ac
    MTP_Handle->ptp.session_id = session;
 80043ce:	50e9      	str	r1, [r5, r3]
    MTP_Handle->ptp.flags = PTP_DP_NODATA;
 80043d0:	2300      	movs	r3, #0
 80043d2:	50ab      	str	r3, [r5, r2]
    
    /* Fill operation request params */      
    ptp_container.Code = PTP_OC_OpenSession;
 80043d4:	f241 0202 	movw	r2, #4098	; 0x1002
 80043d8:	f8ad 2004 	strh.w	r2, [sp, #4]
    ptp_container.SessionID = session;
    ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 80043dc:	f242 12a4 	movw	r2, #8612	; 0x21a4
    ptp_container.SessionID = session;
 80043e0:	9102      	str	r1, [sp, #8]
    ptp_container.Param1 = session;
 80043e2:	9104      	str	r1, [sp, #16]
    ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 80043e4:	50ac      	str	r4, [r5, r2]
    ptp_container.Nparam = 1;
    
    /* convert request packet inti USB raw packet*/
    USBH_PTP_SendRequest (phost, &ptp_container); 
 80043e6:	a901      	add	r1, sp, #4
    ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 80043e8:	9303      	str	r3, [sp, #12]
    ptp_container.Nparam = 1;
 80043ea:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
    USBH_PTP_SendRequest (phost, &ptp_container); 
 80043ee:	f7ff fe5f 	bl	80040b0 <USBH_PTP_SendRequest>
        
    /* Setup State machine and start transfer */
    MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 80043f2:	f505 53eb 	add.w	r3, r5, #7520	; 0x1d60
 80043f6:	701c      	strb	r4, [r3, #0]
    MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 80043f8:	2302      	movs	r3, #2
 80043fa:	55ab      	strb	r3, [r5, r6]
 80043fc:	e7e1      	b.n	80043c2 <USBH_PTP_OpenSession+0x18>
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif      
    break;
    
  case PTP_REQ_WAIT:
    status = USBH_PTP_Process(phost);
 80043fe:	f7ff feaf 	bl	8004160 <USBH_PTP_Process>
    
  default:
    break;
  }
  return status;
}
 8004402:	b00a      	add	sp, #40	; 0x28
 8004404:	bd70      	pop	{r4, r5, r6, pc}

08004406 <USBH_PTP_GetDeviceInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetDeviceInfo (USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
  USBH_StatusTypeDef   status = USBH_BUSY; 
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 8004406:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{
 800440a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 800440e:	69dc      	ldr	r4, [r3, #28]
  PTP_ContainerTypedef  ptp_container;
  
  switch(MTP_Handle->ptp.req_state)
 8004410:	f641 5761 	movw	r7, #7521	; 0x1d61
{
 8004414:	b08a      	sub	sp, #40	; 0x28
  switch(MTP_Handle->ptp.req_state)
 8004416:	5de5      	ldrb	r5, [r4, r7]
 8004418:	2d01      	cmp	r5, #1
{
 800441a:	4606      	mov	r6, r0
 800441c:	4688      	mov	r8, r1
  switch(MTP_Handle->ptp.req_state)
 800441e:	d003      	beq.n	8004428 <USBH_PTP_GetDeviceInfo+0x22>
 8004420:	2d02      	cmp	r5, #2
 8004422:	d032      	beq.n	800448a <USBH_PTP_GetDeviceInfo+0x84>
  USBH_StatusTypeDef   status = USBH_BUSY; 
 8004424:	2501      	movs	r5, #1
 8004426:	e02c      	b.n	8004482 <USBH_PTP_GetDeviceInfo+0x7c>
  {
  case PTP_REQ_SEND:

    /* Set operation request type */
    MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8004428:	f242 13ac 	movw	r3, #8620	; 0x21ac
 800442c:	2602      	movs	r6, #2
 800442e:	50e6      	str	r6, [r4, r3]
    MTP_Handle->ptp.data_ptr = (uint8_t *)&(MTP_Handle->ptp.data_container);
 8004430:	f242 12b0 	movw	r2, #8624	; 0x21b0
 8004434:	f504 53ec 	add.w	r3, r4, #7552	; 0x1d80
 8004438:	3304      	adds	r3, #4
 800443a:	50a3      	str	r3, [r4, r2]
    MTP_Handle->ptp.data_length = 0;
 800443c:	f242 12b4 	movw	r2, #8628	; 0x21b4
 8004440:	2300      	movs	r3, #0
 8004442:	50a3      	str	r3, [r4, r2]
    MTP_Handle->ptp.data_packet_counter = 0;
 8004444:	f504 5207 	add.w	r2, r4, #8640	; 0x21c0
    MTP_Handle->ptp.data_packet = 0;
   
    /* Fill operation request params */      
    ptp_container.Code = PTP_OC_GetDeviceInfo;
    ptp_container.SessionID = MTP_Handle->ptp.session_id;
    ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 8004448:	f242 11a4 	movw	r1, #8612	; 0x21a4
    MTP_Handle->ptp.data_packet_counter = 0;
 800444c:	6013      	str	r3, [r2, #0]
    MTP_Handle->ptp.data_packet = 0;
 800444e:	f242 12b8 	movw	r2, #8632	; 0x21b8
    ptp_container.Nparam = 0;
 8004452:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    MTP_Handle->ptp.data_packet = 0;
 8004456:	50a3      	str	r3, [r4, r2]
    ptp_container.Code = PTP_OC_GetDeviceInfo;
 8004458:	f241 0201 	movw	r2, #4097	; 0x1001
 800445c:	f8ad 2004 	strh.w	r2, [sp, #4]
    ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8004460:	f242 12a8 	movw	r2, #8616	; 0x21a8
 8004464:	58a2      	ldr	r2, [r4, r2]
 8004466:	9202      	str	r2, [sp, #8]
    ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 8004468:	5862      	ldr	r2, [r4, r1]
 800446a:	9203      	str	r2, [sp, #12]
 800446c:	f102 0e01 	add.w	lr, r2, #1
 8004470:	f844 e001 	str.w	lr, [r4, r1]
    
    /* convert request packet inti USB raw packet*/
    USBH_PTP_SendRequest (phost, &ptp_container); 
 8004474:	a901      	add	r1, sp, #4
 8004476:	f7ff fe1b 	bl	80040b0 <USBH_PTP_SendRequest>
        
    /* Setup State machine and start transfer */
    MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800447a:	f504 53eb 	add.w	r3, r4, #7520	; 0x1d60
 800447e:	701d      	strb	r5, [r3, #0]
    MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8004480:	55e6      	strb	r6, [r4, r7]
    
  default:
    break;
  }
  return status;
}
 8004482:	4628      	mov	r0, r5
 8004484:	b00a      	add	sp, #40	; 0x28
 8004486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = USBH_PTP_Process(phost);
 800448a:	f7ff fe69 	bl	8004160 <USBH_PTP_Process>
    if(status == USBH_OK)
 800448e:	4605      	mov	r5, r0
 8004490:	2800      	cmp	r0, #0
 8004492:	d1f6      	bne.n	8004482 <USBH_PTP_GetDeviceInfo+0x7c>
       PTP_DecodeDeviceInfo (phost, dev_info);
 8004494:	4641      	mov	r1, r8
 8004496:	4630      	mov	r0, r6
 8004498:	f7ff fcef 	bl	8003e7a <PTP_DecodeDeviceInfo>
 800449c:	e7f1      	b.n	8004482 <USBH_PTP_GetDeviceInfo+0x7c>

0800449e <USBH_PTP_GetStorageIds>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageIds (USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *storage_ids)
{
  USBH_StatusTypeDef   status = USBH_BUSY; 
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 800449e:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{
 80044a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 80044a6:	69dc      	ldr	r4, [r3, #28]
  PTP_ContainerTypedef  ptp_container;
  
  switch(MTP_Handle->ptp.req_state)
 80044a8:	f641 5861 	movw	r8, #7521	; 0x1d61
{
 80044ac:	b08a      	sub	sp, #40	; 0x28
  switch(MTP_Handle->ptp.req_state)
 80044ae:	f814 5008 	ldrb.w	r5, [r4, r8]
 80044b2:	2d01      	cmp	r5, #1
{
 80044b4:	4607      	mov	r7, r0
 80044b6:	460e      	mov	r6, r1
  switch(MTP_Handle->ptp.req_state)
 80044b8:	d003      	beq.n	80044c2 <USBH_PTP_GetStorageIds+0x24>
 80044ba:	2d02      	cmp	r5, #2
 80044bc:	d031      	beq.n	8004522 <USBH_PTP_GetStorageIds+0x84>
  USBH_StatusTypeDef   status = USBH_BUSY; 
 80044be:	2501      	movs	r5, #1
 80044c0:	e02b      	b.n	800451a <USBH_PTP_GetStorageIds+0x7c>
  {
  case PTP_REQ_SEND:

    /* Set operation request type */
    MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 80044c2:	f242 13ac 	movw	r3, #8620	; 0x21ac
 80044c6:	2602      	movs	r6, #2
 80044c8:	50e6      	str	r6, [r4, r3]
    MTP_Handle->ptp.data_ptr = (uint8_t *)&(MTP_Handle->ptp.data_container);
 80044ca:	f242 12b0 	movw	r2, #8624	; 0x21b0
 80044ce:	f504 53ec 	add.w	r3, r4, #7552	; 0x1d80
 80044d2:	3304      	adds	r3, #4
 80044d4:	50a3      	str	r3, [r4, r2]
    MTP_Handle->ptp.data_length = 0;
 80044d6:	f242 12b4 	movw	r2, #8628	; 0x21b4
 80044da:	2300      	movs	r3, #0
 80044dc:	50a3      	str	r3, [r4, r2]
    MTP_Handle->ptp.data_packet_counter = 0;
 80044de:	f504 5207 	add.w	r2, r4, #8640	; 0x21c0
    MTP_Handle->ptp.data_packet = 0;
   
    /* Fill operation request params */      
    ptp_container.Code = PTP_OC_GetStorageIDs;
    ptp_container.SessionID = MTP_Handle->ptp.session_id;
    ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 80044e2:	f242 11a4 	movw	r1, #8612	; 0x21a4
    MTP_Handle->ptp.data_packet_counter = 0;
 80044e6:	6013      	str	r3, [r2, #0]
    MTP_Handle->ptp.data_packet = 0;
 80044e8:	f242 12b8 	movw	r2, #8632	; 0x21b8
    ptp_container.Nparam = 0;
 80044ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    MTP_Handle->ptp.data_packet = 0;
 80044f0:	50a3      	str	r3, [r4, r2]
    ptp_container.Code = PTP_OC_GetStorageIDs;
 80044f2:	f241 0204 	movw	r2, #4100	; 0x1004
 80044f6:	f8ad 2004 	strh.w	r2, [sp, #4]
    ptp_container.SessionID = MTP_Handle->ptp.session_id;
 80044fa:	f242 12a8 	movw	r2, #8616	; 0x21a8
 80044fe:	58a2      	ldr	r2, [r4, r2]
 8004500:	9202      	str	r2, [sp, #8]
    ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 8004502:	5862      	ldr	r2, [r4, r1]
 8004504:	9203      	str	r2, [sp, #12]
 8004506:	1c57      	adds	r7, r2, #1
 8004508:	5067      	str	r7, [r4, r1]
    
    /* convert request packet inti USB raw packet*/
    USBH_PTP_SendRequest (phost, &ptp_container); 
 800450a:	a901      	add	r1, sp, #4
 800450c:	f7ff fdd0 	bl	80040b0 <USBH_PTP_SendRequest>
        
    /* Setup State machine and start transfer */
    MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8004510:	f504 53eb 	add.w	r3, r4, #7520	; 0x1d60
 8004514:	701d      	strb	r5, [r3, #0]
    MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8004516:	f804 6008 	strb.w	r6, [r4, r8]
    
  default:
    break;
  }
  return status;
}
 800451a:	4628      	mov	r0, r5
 800451c:	b00a      	add	sp, #40	; 0x28
 800451e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = USBH_PTP_Process(phost);
 8004522:	f7ff fe1d 	bl	8004160 <USBH_PTP_Process>
    if(status == USBH_OK)
 8004526:	4605      	mov	r5, r0
 8004528:	2800      	cmp	r0, #0
 800452a:	d1f6      	bne.n	800451a <USBH_PTP_GetStorageIds+0x7c>
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData;   
 800452c:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 8004530:	69d9      	ldr	r1, [r3, #28]
  stor_ids->n = PTP_GetArray32 (stor_ids->Storage, data, 0); 
 8004532:	f501 51ec 	add.w	r1, r1, #7552	; 0x1d80
 8004536:	3110      	adds	r1, #16
 8004538:	1d30      	adds	r0, r6, #4
 800453a:	f7ff fd8d 	bl	8004058 <PTP_GetArray32.constprop.3>
 800453e:	6030      	str	r0, [r6, #0]
 8004540:	e7eb      	b.n	800451a <USBH_PTP_GetStorageIds+0x7c>

08004542 <USBH_PTP_GetStorageInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageInfo (USBH_HandleTypeDef *phost, uint32_t storage_id, PTP_StorageInfoTypedef *storage_info)
{
  USBH_StatusTypeDef   status = USBH_BUSY; 
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 8004542:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
{
 8004546:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData; 
 800454a:	69de      	ldr	r6, [r3, #28]
  PTP_ContainerTypedef  ptp_container;
  
  switch(MTP_Handle->ptp.req_state)
 800454c:	f641 5861 	movw	r8, #7521	; 0x1d61
{
 8004550:	b08b      	sub	sp, #44	; 0x2c
  switch(MTP_Handle->ptp.req_state)
 8004552:	f816 4008 	ldrb.w	r4, [r6, r8]
 8004556:	2c01      	cmp	r4, #1
{
 8004558:	4607      	mov	r7, r0
 800455a:	4615      	mov	r5, r2
  switch(MTP_Handle->ptp.req_state)
 800455c:	d003      	beq.n	8004566 <USBH_PTP_GetStorageInfo+0x24>
 800455e:	2c02      	cmp	r4, #2
 8004560:	d032      	beq.n	80045c8 <USBH_PTP_GetStorageInfo+0x86>
  USBH_StatusTypeDef   status = USBH_BUSY; 
 8004562:	2401      	movs	r4, #1
 8004564:	e02c      	b.n	80045c0 <USBH_PTP_GetStorageInfo+0x7e>
  {
  case PTP_REQ_SEND:

    /* Set operation request type */
    MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8004566:	f242 13ac 	movw	r3, #8620	; 0x21ac
 800456a:	2502      	movs	r5, #2
 800456c:	50f5      	str	r5, [r6, r3]
    MTP_Handle->ptp.data_ptr = (uint8_t *)&(MTP_Handle->ptp.data_container);
 800456e:	f242 12b0 	movw	r2, #8624	; 0x21b0
 8004572:	f506 53ec 	add.w	r3, r6, #7552	; 0x1d80
 8004576:	3304      	adds	r3, #4
 8004578:	50b3      	str	r3, [r6, r2]
    MTP_Handle->ptp.data_length = 0;
 800457a:	f242 12b4 	movw	r2, #8628	; 0x21b4
 800457e:	2300      	movs	r3, #0
 8004580:	50b3      	str	r3, [r6, r2]
    MTP_Handle->ptp.data_packet_counter = 0;
 8004582:	f506 5207 	add.w	r2, r6, #8640	; 0x21c0
 8004586:	6013      	str	r3, [r2, #0]
    MTP_Handle->ptp.data_packet = 0;
 8004588:	f242 12b8 	movw	r2, #8632	; 0x21b8
 800458c:	50b3      	str	r3, [r6, r2]
   
    /* Fill operation request params */      
    ptp_container.Code = PTP_OC_GetStorageInfo;
 800458e:	f241 0305 	movw	r3, #4101	; 0x1005
 8004592:	f8ad 3004 	strh.w	r3, [sp, #4]
    ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8004596:	f242 13a8 	movw	r3, #8616	; 0x21a8
    ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 800459a:	f242 12a4 	movw	r2, #8612	; 0x21a4
    ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800459e:	58f3      	ldr	r3, [r6, r3]
 80045a0:	9302      	str	r3, [sp, #8]
    ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 80045a2:	58b3      	ldr	r3, [r6, r2]
 80045a4:	1c5f      	adds	r7, r3, #1
 80045a6:	50b7      	str	r7, [r6, r2]
    ptp_container.Param1 = storage_id;    
 80045a8:	9104      	str	r1, [sp, #16]
    ptp_container.Nparam = 1;
    
    /* convert request packet inti USB raw packet*/
    USBH_PTP_SendRequest (phost, &ptp_container); 
 80045aa:	a901      	add	r1, sp, #4
    ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 80045ac:	9303      	str	r3, [sp, #12]
    ptp_container.Nparam = 1;
 80045ae:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
    USBH_PTP_SendRequest (phost, &ptp_container); 
 80045b2:	f7ff fd7d 	bl	80040b0 <USBH_PTP_SendRequest>
        
    /* Setup State machine and start transfer */
    MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 80045b6:	f506 53eb 	add.w	r3, r6, #7520	; 0x1d60
 80045ba:	701c      	strb	r4, [r3, #0]
    MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 80045bc:	f806 5008 	strb.w	r5, [r6, r8]
    
  default:
    break;
  }
  return status;
}
 80045c0:	4620      	mov	r0, r4
 80045c2:	b00b      	add	sp, #44	; 0x2c
 80045c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = USBH_PTP_Process(phost);
 80045c8:	f7ff fdca 	bl	8004160 <USBH_PTP_Process>
    if(status == USBH_OK)
 80045cc:	4604      	mov	r4, r0
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d1f6      	bne.n	80045c0 <USBH_PTP_GetStorageInfo+0x7e>
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData;   
 80045d2:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
  stor_info->StorageType=LE16(&data[PTP_si_StorageType]);
 80045d6:	f641 5290 	movw	r2, #7568	; 0x1d90
  MTP_HandleTypeDef    *MTP_Handle =  (MTP_HandleTypeDef *)phost->pActiveClass->pData;   
 80045da:	69df      	ldr	r7, [r3, #28]
  stor_info->StorageType=LE16(&data[PTP_si_StorageType]);
 80045dc:	f641 5391 	movw	r3, #7569	; 0x1d91
 80045e0:	18be      	adds	r6, r7, r2
 80045e2:	5cf9      	ldrb	r1, [r7, r3]
 80045e4:	5cbb      	ldrb	r3, [r7, r2]
 80045e6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80045ea:	802b      	strh	r3, [r5, #0]
  stor_info->FilesystemType=LE16(&data[PTP_si_FilesystemType]);
 80045ec:	f641 5393 	movw	r3, #7571	; 0x1d93
  stor_info->MaxCapability=LE64(&data[PTP_si_MaxCapability]);
 80045f0:	f641 5196 	movw	r1, #7574	; 0x1d96
  stor_info->FilesystemType=LE16(&data[PTP_si_FilesystemType]);
 80045f4:	5cfa      	ldrb	r2, [r7, r3]
 80045f6:	f641 5392 	movw	r3, #7570	; 0x1d92
 80045fa:	5cfb      	ldrb	r3, [r7, r3]
 80045fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004600:	806b      	strh	r3, [r5, #2]
  stor_info->AccessCapability=LE16(&data[PTP_si_AccessCapability]);
 8004602:	f641 5395 	movw	r3, #7573	; 0x1d95
 8004606:	5cfa      	ldrb	r2, [r7, r3]
 8004608:	f641 5394 	movw	r3, #7572	; 0x1d94
 800460c:	5cfb      	ldrb	r3, [r7, r3]
 800460e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004612:	80ab      	strh	r3, [r5, #4]
  stor_info->MaxCapability=LE64(&data[PTP_si_MaxCapability]);
 8004614:	f641 5397 	movw	r3, #7575	; 0x1d97
 8004618:	5cfa      	ldrb	r2, [r7, r3]
 800461a:	f641 5398 	movw	r3, #7576	; 0x1d98
 800461e:	0210      	lsls	r0, r2, #8
 8004620:	f817 8003 	ldrb.w	r8, [r7, r3]
 8004624:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004628:	1812      	adds	r2, r2, r0
 800462a:	5c78      	ldrb	r0, [r7, r1]
 800462c:	eb44 0304 	adc.w	r3, r4, r4
 8004630:	2100      	movs	r1, #0
 8004632:	1880      	adds	r0, r0, r2
 8004634:	4159      	adcs	r1, r3
 8004636:	f641 5399 	movw	r3, #7577	; 0x1d99
 800463a:	f817 8003 	ldrb.w	r8, [r7, r3]
 800463e:	ea4f 6208 	mov.w	r2, r8, lsl #24
 8004642:	1812      	adds	r2, r2, r0
 8004644:	eb44 0301 	adc.w	r3, r4, r1
 8004648:	f641 519a 	movw	r1, #7578	; 0x1d9a
 800464c:	1912      	adds	r2, r2, r4
 800464e:	f817 9001 	ldrb.w	r9, [r7, r1]
 8004652:	f641 519b 	movw	r1, #7579	; 0x1d9b
 8004656:	eb43 0309 	adc.w	r3, r3, r9
 800465a:	f817 8001 	ldrb.w	r8, [r7, r1]
 800465e:	1912      	adds	r2, r2, r4
 8004660:	ea4f 2108 	mov.w	r1, r8, lsl #8
 8004664:	414b      	adcs	r3, r1
 8004666:	f641 519c 	movw	r1, #7580	; 0x1d9c
 800466a:	1912      	adds	r2, r2, r4
 800466c:	f817 8001 	ldrb.w	r8, [r7, r1]
 8004670:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004674:	414b      	adcs	r3, r1
 8004676:	f641 519d 	movw	r1, #7581	; 0x1d9d
 800467a:	1912      	adds	r2, r2, r4
 800467c:	f817 8001 	ldrb.w	r8, [r7, r1]
 8004680:	ea4f 6108 	mov.w	r1, r8, lsl #24
 8004684:	414b      	adcs	r3, r1
 8004686:	e9c5 2302 	strd	r2, r3, [r5, #8]
  stor_info->FreeSpaceInBytes=LE64(&data[PTP_si_FreeSpaceInBytes]);
 800468a:	f641 539f 	movw	r3, #7583	; 0x1d9f
 800468e:	f641 519e 	movw	r1, #7582	; 0x1d9e
 8004692:	5cfa      	ldrb	r2, [r7, r3]
 8004694:	f507 53ed 	add.w	r3, r7, #7584	; 0x1da0
 8004698:	0210      	lsls	r0, r2, #8
 800469a:	f893 8000 	ldrb.w	r8, [r3]
 800469e:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80046a2:	1812      	adds	r2, r2, r0
 80046a4:	5c78      	ldrb	r0, [r7, r1]
 80046a6:	eb44 0304 	adc.w	r3, r4, r4
 80046aa:	2100      	movs	r1, #0
 80046ac:	1880      	adds	r0, r0, r2
 80046ae:	4159      	adcs	r1, r3
 80046b0:	f641 53a1 	movw	r3, #7585	; 0x1da1
 80046b4:	f817 8003 	ldrb.w	r8, [r7, r3]
 80046b8:	ea4f 6208 	mov.w	r2, r8, lsl #24
 80046bc:	1812      	adds	r2, r2, r0
 80046be:	eb44 0301 	adc.w	r3, r4, r1
 80046c2:	f641 51a2 	movw	r1, #7586	; 0x1da2
 80046c6:	1912      	adds	r2, r2, r4
 80046c8:	f817 9001 	ldrb.w	r9, [r7, r1]
 80046cc:	f641 51a3 	movw	r1, #7587	; 0x1da3
 80046d0:	eb43 0309 	adc.w	r3, r3, r9
 80046d4:	f817 8001 	ldrb.w	r8, [r7, r1]
 80046d8:	1912      	adds	r2, r2, r4
 80046da:	ea4f 2108 	mov.w	r1, r8, lsl #8
 80046de:	414b      	adcs	r3, r1
 80046e0:	f641 51a4 	movw	r1, #7588	; 0x1da4
 80046e4:	1912      	adds	r2, r2, r4
 80046e6:	f817 8001 	ldrb.w	r8, [r7, r1]
 80046ea:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80046ee:	414b      	adcs	r3, r1
 80046f0:	f641 51a5 	movw	r1, #7589	; 0x1da5
 80046f4:	1912      	adds	r2, r2, r4
 80046f6:	f817 8001 	ldrb.w	r8, [r7, r1]
 80046fa:	ea4f 6108 	mov.w	r1, r8, lsl #24
 80046fe:	414b      	adcs	r3, r1
 8004700:	e9c5 2304 	strd	r2, r3, [r5, #16]
  stor_info->FreeSpaceInImages=LE32(&data[PTP_si_FreeSpaceInImages]);
 8004704:	f641 53a7 	movw	r3, #7591	; 0x1da7
  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 8004708:	f507 51ed 	add.w	r1, r7, #7584	; 0x1da0
  stor_info->FreeSpaceInImages=LE32(&data[PTP_si_FreeSpaceInImages]);
 800470c:	5cfa      	ldrb	r2, [r7, r3]
 800470e:	f641 53a8 	movw	r3, #7592	; 0x1da8
  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 8004712:	f105 001c 	add.w	r0, r5, #28
  stor_info->FreeSpaceInImages=LE32(&data[PTP_si_FreeSpaceInImages]);
 8004716:	5cfb      	ldrb	r3, [r7, r3]
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800471e:	f641 52a6 	movw	r2, #7590	; 0x1da6
  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 8004722:	310a      	adds	r1, #10
  stor_info->FreeSpaceInImages=LE32(&data[PTP_si_FreeSpaceInImages]);
 8004724:	5cba      	ldrb	r2, [r7, r2]
 8004726:	4413      	add	r3, r2
 8004728:	f641 52a9 	movw	r2, #7593	; 0x1da9
 800472c:	5cba      	ldrb	r2, [r7, r2]
 800472e:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8004732:	61ab      	str	r3, [r5, #24]
  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 8004734:	aa01      	add	r2, sp, #4
 8004736:	f7ff fb72 	bl	8003e1e <PTP_GetString>
  PTP_GetString(stor_info->VolumeLabel, &data[PTP_si_StorageDescription+len*2+1], &len);   
 800473a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800473e:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8004742:	aa01      	add	r2, sp, #4
 8004744:	311b      	adds	r1, #27
 8004746:	f205 101b 	addw	r0, r5, #283	; 0x11b
 800474a:	f7ff fb68 	bl	8003e1e <PTP_GetString>
 800474e:	e737      	b.n	80045c0 <USBH_PTP_GetStorageInfo+0x7e>

08004750 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004750:	f200 534c 	addw	r3, r0, #1356	; 0x54c
 8004754:	f500 62b1 	add.w	r2, r0, #1416	; 0x588
  uint32_t i = 0;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0;
 8004758:	2100      	movs	r1, #0
 800475a:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800475e:	4293      	cmp	r3, r2
 8004760:	d1fb      	bne.n	800475a <DeInitStateMachine+0xa>
 8004762:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8004766:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8004770:	4291      	cmp	r1, r2
 8004772:	d1fb      	bne.n	800476c <DeInitStateMachine+0x1c>
  }
  
  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8004774:	2201      	movs	r2, #1
  phost->Timer = 0;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8004776:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8004778:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 800477a:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 800477c:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0;  
 800477e:	f8c0 3588 	str.w	r3, [r0, #1416]	; 0x588
  phost->Control.state = CTRL_SETUP;
 8004782:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8004784:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0;
 8004786:	7643      	strb	r3, [r0, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004788:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800478c:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d
  
  return USBH_OK;
}
 8004790:	2000      	movs	r0, #0
 8004792:	4770      	bx	lr

08004794 <USBH_Init>:
{
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	460d      	mov	r5, r1
  if(phost == NULL)
 8004798:	4604      	mov	r4, r0
 800479a:	b180      	cbz	r0, 80047be <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 800479c:	2300      	movs	r3, #0
  phost->id = id;
 800479e:	f880 258c 	strb.w	r2, [r0, #1420]	; 0x58c
  phost->pActiveClass = NULL;
 80047a2:	f8c0 3544 	str.w	r3, [r0, #1348]	; 0x544
  phost->ClassNumber = 0;
 80047a6:	f8c0 3548 	str.w	r3, [r0, #1352]	; 0x548
  DeInitStateMachine(phost);
 80047aa:	f7ff ffd1 	bl	8004750 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 80047ae:	b10d      	cbz	r5, 80047b4 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 80047b0:	f8c4 5594 	str.w	r5, [r4, #1428]	; 0x594
  USBH_LL_Init(phost);
 80047b4:	4620      	mov	r0, r4
 80047b6:	f000 fed7 	bl	8005568 <USBH_LL_Init>
  return USBH_OK;
 80047ba:	2000      	movs	r0, #0
 80047bc:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL; 
 80047be:	2002      	movs	r0, #2
}
 80047c0:	bd38      	pop	{r3, r4, r5, pc}

080047c2 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(pclass != 0)
 80047c2:	b161      	cbz	r1, 80047de <USBH_RegisterClass+0x1c>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80047c4:	f8d0 3548 	ldr.w	r3, [r0, #1352]	; 0x548
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d808      	bhi.n	80047de <USBH_RegisterClass+0x1c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80047d2:	f8c0 2548 	str.w	r2, [r0, #1352]	; 0x548
 80047d6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
      status = USBH_OK;
 80047da:	2000      	movs	r0, #0
 80047dc:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 80047de:	2002      	movs	r0, #2
  }
  
  return status;
}
 80047e0:	4770      	bx	lr

080047e2 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80047e2:	f890 3336 	ldrb.w	r3, [r0, #822]	; 0x336
 80047e6:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 80047e8:	bf86      	itte	hi
 80047ea:	f880 131f 	strbhi.w	r1, [r0, #799]	; 0x31f
  USBH_StatusTypeDef   status = USBH_OK;
 80047ee:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 80047f0:	2002      	movls	r0, #2
  }
  return status;  
}
 80047f2:	4770      	bx	lr

080047f4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80047f4:	b530      	push	{r4, r5, lr}
 80047f6:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 80047f8:	f890 5341 	ldrb.w	r5, [r0, #833]	; 0x341
 80047fc:	428d      	cmp	r5, r1
 80047fe:	d001      	beq.n	8004804 <USBH_FindInterface+0x10>
 8004800:	29ff      	cmp	r1, #255	; 0xff
 8004802:	d10d      	bne.n	8004820 <USBH_FindInterface+0x2c>
 8004804:	f890 5342 	ldrb.w	r5, [r0, #834]	; 0x342
 8004808:	4295      	cmp	r5, r2
 800480a:	d001      	beq.n	8004810 <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800480c:	2aff      	cmp	r2, #255	; 0xff
 800480e:	d107      	bne.n	8004820 <USBH_FindInterface+0x2c>
 8004810:	f890 5343 	ldrb.w	r5, [r0, #835]	; 0x343
 8004814:	429d      	cmp	r5, r3
 8004816:	d101      	bne.n	800481c <USBH_FindInterface+0x28>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
    {
      return  if_ix;
 8004818:	b2e0      	uxtb	r0, r4
 800481a:	bd30      	pop	{r4, r5, pc}
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 800481c:	2bff      	cmp	r3, #255	; 0xff
 800481e:	d0fb      	beq.n	8004818 <USBH_FindInterface+0x24>
 8004820:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004822:	2c0a      	cmp	r4, #10
 8004824:	f100 0032 	add.w	r0, r0, #50	; 0x32
 8004828:	d1e6      	bne.n	80047f8 <USBH_FindInterface+0x4>
    }
    if_ix++;
  }
  return 0xFF;
 800482a:	20ff      	movs	r0, #255	; 0xff
}
 800482c:	bd30      	pop	{r4, r5, pc}

0800482e <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 800482e:	b510      	push	{r4, lr}
 8004830:	2300      	movs	r3, #0
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 8004832:	f890 433e 	ldrb.w	r4, [r0, #830]	; 0x33e
 8004836:	428c      	cmp	r4, r1
 8004838:	d105      	bne.n	8004846 <USBH_FindInterfaceIndex+0x18>
 800483a:	f890 433f 	ldrb.w	r4, [r0, #831]	; 0x33f
 800483e:	4294      	cmp	r4, r2
 8004840:	d101      	bne.n	8004846 <USBH_FindInterfaceIndex+0x18>
    {
      return  if_ix;
 8004842:	b2d8      	uxtb	r0, r3
 8004844:	bd10      	pop	{r4, pc}
 8004846:	3301      	adds	r3, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004848:	2b0a      	cmp	r3, #10
 800484a:	f100 0032 	add.w	r0, r0, #50	; 0x32
 800484e:	d1f0      	bne.n	8004832 <USBH_FindInterfaceIndex+0x4>
    }
    if_ix++;
  }
  return 0xFF;
 8004850:	20ff      	movs	r0, #255	; 0xff
}
 8004852:	bd10      	pop	{r4, pc}

08004854 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8004854:	b510      	push	{r4, lr}
 8004856:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004858:	f000 feb2 	bl	80055c0 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 800485c:	2101      	movs	r1, #1
 800485e:	4620      	mov	r0, r4
 8004860:	f000 ff2e 	bl	80056c0 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
}
 8004864:	2000      	movs	r0, #0
 8004866:	bd10      	pop	{r4, pc}

08004868 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8004868:	b530      	push	{r4, r5, lr}
 800486a:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800486c:	2302      	movs	r3, #2
 800486e:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0;
  
  switch (phost->gState)
 8004872:	7803      	ldrb	r3, [r0, #0]
{
 8004874:	4604      	mov	r4, r0
  switch (phost->gState)
 8004876:	2b0a      	cmp	r3, #10
 8004878:	d817      	bhi.n	80048aa <USBH_Process+0x42>
 800487a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800487e:	000b      	.short	0x000b
 8004880:	00190016 	.word	0x00190016
 8004884:	00160108 	.word	0x00160108
 8004888:	00f00049 	.word	0x00f00049
 800488c:	00c100b8 	.word	0x00c100b8
 8004890:	010000ca 	.word	0x010000ca
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 8004894:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 8004898:	b13b      	cbz	r3, 80048aa <USBH_Process+0x42>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 800489a:	2301      	movs	r3, #1
 800489c:	7003      	strb	r3, [r0, #0]
      USBH_Delay(200); 
 800489e:	20c8      	movs	r0, #200	; 0xc8
 80048a0:	f000 ff38 	bl	8005714 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80048a4:	4620      	mov	r0, r4
 80048a6:	f000 feb5 	bl	8005614 <USBH_LL_ResetPort>
  case HOST_ABORT_STATE:
  default :
    break;
  }
 return USBH_OK;  
}
 80048aa:	2000      	movs	r0, #0
 80048ac:	b007      	add	sp, #28
 80048ae:	bd30      	pop	{r4, r5, pc}
    USBH_Delay(100); 
 80048b0:	2064      	movs	r0, #100	; 0x64
 80048b2:	f000 ff2f 	bl	8005714 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 fe9e 	bl	80055f8 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 80048bc:	2305      	movs	r3, #5
 80048be:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80048c0:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 80048c4:	2100      	movs	r1, #0
 80048c6:	4620      	mov	r0, r4
 80048c8:	f000 fbf1 	bl	80050ae <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80048cc:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 80048ce:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80048d0:	4620      	mov	r0, r4
 80048d2:	f000 fbec 	bl	80050ae <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 80048d6:	79a2      	ldrb	r2, [r4, #6]
 80048d8:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80048dc:	7120      	strb	r0, [r4, #4]
 80048de:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 80048e0:	9202      	str	r2, [sp, #8]
 80048e2:	2500      	movs	r5, #0
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80048e4:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80048e8:	9200      	str	r2, [sp, #0]
 80048ea:	9501      	str	r5, [sp, #4]
 80048ec:	2280      	movs	r2, #128	; 0x80
 80048ee:	4620      	mov	r0, r4
 80048f0:	f000 fbc9 	bl	8005086 <USBH_OpenPipe>
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80048f4:	79a2      	ldrb	r2, [r4, #6]
 80048f6:	9202      	str	r2, [sp, #8]
 80048f8:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80048fc:	9200      	str	r2, [sp, #0]
 80048fe:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8004902:	7961      	ldrb	r1, [r4, #5]
 8004904:	9501      	str	r5, [sp, #4]
 8004906:	462a      	mov	r2, r5
 8004908:	4620      	mov	r0, r4
 800490a:	f000 fbbc 	bl	8005086 <USBH_OpenPipe>
 800490e:	e7cc      	b.n	80048aa <USBH_Process+0x42>
  switch (phost->EnumState)
 8004910:	7843      	ldrb	r3, [r0, #1]
 8004912:	2b07      	cmp	r3, #7
 8004914:	d8c9      	bhi.n	80048aa <USBH_Process+0x42>
 8004916:	e8df f003 	tbb	[pc, r3]
 800491a:	1404      	.short	0x1404
 800491c:	3c342d1c 	.word	0x3c342d1c
 8004920:	5548      	.short	0x5548
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 8004922:	2108      	movs	r1, #8
 8004924:	f000 f9e0 	bl	8004ce8 <USBH_Get_DevDesc>
 8004928:	4605      	mov	r5, r0
 800492a:	2800      	cmp	r0, #0
 800492c:	d1bd      	bne.n	80048aa <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800492e:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8004930:	f894 2327 	ldrb.w	r2, [r4, #807]	; 0x327
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8004934:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8004936:	7921      	ldrb	r1, [r4, #4]
 8004938:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800493c:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 800493e:	9202      	str	r2, [sp, #8]
 8004940:	e7d0      	b.n	80048e4 <USBH_Process+0x7c>
    }
    break;
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8004942:	2112      	movs	r1, #18
 8004944:	f000 f9d0 	bl	8004ce8 <USBH_Get_DevDesc>
 8004948:	2800      	cmp	r0, #0
 800494a:	d1ae      	bne.n	80048aa <USBH_Process+0x42>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 800494c:	2302      	movs	r3, #2
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 800494e:	7063      	strb	r3, [r4, #1]
 8004950:	e7ab      	b.n	80048aa <USBH_Process+0x42>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8004952:	2101      	movs	r1, #1
 8004954:	f000 fadf 	bl	8004f16 <USBH_SetAddress>
 8004958:	4605      	mov	r5, r0
 800495a:	2800      	cmp	r0, #0
 800495c:	d1a5      	bne.n	80048aa <USBH_Process+0x42>
      USBH_Delay(2);
 800495e:	2002      	movs	r0, #2
 8004960:	f000 fed8 	bl	8005714 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8004964:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8004966:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 8004968:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 800496a:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 800496e:	7921      	ldrb	r1, [r4, #4]
 8004970:	79a2      	ldrb	r2, [r4, #6]
 8004972:	e7e4      	b.n	800493e <USBH_Process+0xd6>
    if ( USBH_Get_CfgDesc(phost, 
 8004974:	2109      	movs	r1, #9
 8004976:	f000 fa10 	bl	8004d9a <USBH_Get_CfgDesc>
 800497a:	2800      	cmp	r0, #0
 800497c:	d195      	bne.n	80048aa <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 800497e:	2304      	movs	r3, #4
 8004980:	e7e5      	b.n	800494e <USBH_Process+0xe6>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 8004982:	f8b0 1334 	ldrh.w	r1, [r0, #820]	; 0x334
 8004986:	f000 fa08 	bl	8004d9a <USBH_Get_CfgDesc>
 800498a:	2800      	cmp	r0, #0
 800498c:	d18d      	bne.n	80048aa <USBH_Process+0x42>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 800498e:	2305      	movs	r3, #5
 8004990:	e7dd      	b.n	800494e <USBH_Process+0xe6>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 8004992:	f890 132e 	ldrb.w	r1, [r0, #814]	; 0x32e
 8004996:	b131      	cbz	r1, 80049a6 <USBH_Process+0x13e>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 8004998:	23ff      	movs	r3, #255	; 0xff
 800499a:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800499e:	f000 fa93 	bl	8004ec8 <USBH_Get_StringDesc>
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d181      	bne.n	80048aa <USBH_Process+0x42>
                                phost->device.Data , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80049a6:	2306      	movs	r3, #6
 80049a8:	e7d1      	b.n	800494e <USBH_Process+0xe6>
#endif       
    }
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 80049aa:	f890 132f 	ldrb.w	r1, [r0, #815]	; 0x32f
 80049ae:	b139      	cbz	r1, 80049c0 <USBH_Process+0x158>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80049b0:	23ff      	movs	r3, #255	; 0xff
 80049b2:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80049b6:	f000 fa87 	bl	8004ec8 <USBH_Get_StringDesc>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	f47f af75 	bne.w	80048aa <USBH_Process+0x42>
                               phost->device.Data, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 80049c0:	2307      	movs	r3, #7
 80049c2:	e7c4      	b.n	800494e <USBH_Process+0xe6>
#endif        
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 80049c4:	f890 1330 	ldrb.w	r1, [r0, #816]	; 0x330
 80049c8:	b139      	cbz	r1, 80049da <USBH_Process+0x172>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 80049ca:	23ff      	movs	r3, #255	; 0xff
 80049cc:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80049d0:	f000 fa7a 	bl	8004ec8 <USBH_Get_StringDesc>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	f47f af68 	bne.w	80048aa <USBH_Process+0x42>
      phost->device.current_interface = 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 80049e0:	f894 3331 	ldrb.w	r3, [r4, #817]	; 0x331
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d009      	beq.n	80049fc <USBH_Process+0x194>
        phost->gState  = HOST_INPUT; 
 80049e8:	2307      	movs	r3, #7
      phost->gState  = HOST_ABORT_STATE;
 80049ea:	7023      	strb	r3, [r4, #0]
 80049ec:	e75d      	b.n	80048aa <USBH_Process+0x42>
      if(phost->pUser != NULL)
 80049ee:	f8d0 3594 	ldr.w	r3, [r0, #1428]	; 0x594
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f43f af59 	beq.w	80048aa <USBH_Process+0x42>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80049f8:	2101      	movs	r1, #1
 80049fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80049fc:	2308      	movs	r3, #8
 80049fe:	e7f4      	b.n	80049ea <USBH_Process+0x182>
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8004a00:	f890 1337 	ldrb.w	r1, [r0, #823]	; 0x337
 8004a04:	f000 fa95 	bl	8004f32 <USBH_SetCfg>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	f47f af4e 	bne.w	80048aa <USBH_Process+0x42>
      phost->gState  = HOST_CHECK_CLASS;
 8004a0e:	2309      	movs	r3, #9
 8004a10:	e7eb      	b.n	80049ea <USBH_Process+0x182>
    if(phost->ClassNumber == 0)
 8004a12:	f8d0 3548 	ldr.w	r3, [r0, #1352]	; 0x548
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f43f af47 	beq.w	80048aa <USBH_Process+0x42>
      phost->pActiveClass = NULL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c0 3544 	str.w	r3, [r0, #1348]	; 0x544
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004a22:	f890 0341 	ldrb.w	r0, [r0, #833]	; 0x341
 8004a26:	f504 63a6 	add.w	r3, r4, #1328	; 0x530
 8004a2a:	f204 5144 	addw	r1, r4, #1348	; 0x544
 8004a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a32:	7915      	ldrb	r5, [r2, #4]
 8004a34:	4285      	cmp	r5, r0
          phost->pActiveClass = phost->pClass[idx];
 8004a36:	bf08      	it	eq
 8004a38:	f8c4 2544 	streq.w	r2, [r4, #1348]	; 0x544
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 8004a3c:	428b      	cmp	r3, r1
 8004a3e:	d1f6      	bne.n	8004a2e <USBH_Process+0x1c6>
      if(phost->pActiveClass != NULL)
 8004a40:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 8004a44:	b1cb      	cbz	r3, 8004a7a <USBH_Process+0x212>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4620      	mov	r0, r4
 8004a4a:	4798      	blx	r3
 8004a4c:	b9a8      	cbnz	r0, 8004a7a <USBH_Process+0x212>
          phost->gState  = HOST_CLASS_REQUEST; 
 8004a4e:	2306      	movs	r3, #6
 8004a50:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 8004a52:	2103      	movs	r1, #3
 8004a54:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 8004a58:	4620      	mov	r0, r4
 8004a5a:	4798      	blx	r3
 8004a5c:	e725      	b.n	80048aa <USBH_Process+0x42>
    if(phost->pActiveClass != NULL)
 8004a5e:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 8004a62:	b153      	cbz	r3, 8004a7a <USBH_Process+0x212>
      status = phost->pActiveClass->Requests(phost);
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	4798      	blx	r3
 8004a68:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8004a6c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f47f af1a 	bne.w	80048aa <USBH_Process+0x42>
        phost->gState  = HOST_CLASS;        
 8004a76:	230a      	movs	r3, #10
 8004a78:	e7b7      	b.n	80049ea <USBH_Process+0x182>
      phost->gState  = HOST_ABORT_STATE;
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	e7b5      	b.n	80049ea <USBH_Process+0x182>
    if(phost->pActiveClass != NULL)
 8004a7e:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f43f af11 	beq.w	80048aa <USBH_Process+0x42>
      phost->pActiveClass->BgndProcess(phost);
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	4798      	blx	r3
 8004a8c:	e70d      	b.n	80048aa <USBH_Process+0x42>
    DeInitStateMachine(phost);  
 8004a8e:	f7ff fe5f 	bl	8004750 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8004a92:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f43f af07 	beq.w	80048aa <USBH_Process+0x42>
      phost->pActiveClass->DeInit(phost); 
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
 return USBH_OK;  
 8004aa8:	e6ff      	b.n	80048aa <USBH_Process+0x42>

08004aaa <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8004aaa:	f8c0 1588 	str.w	r1, [r0, #1416]	; 0x588
 8004aae:	4770      	bx	lr

08004ab0 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
  phost->Timer ++;
 8004ab0:	f8d0 2588 	ldr.w	r2, [r0, #1416]	; 0x588
 8004ab4:	3201      	adds	r2, #1
 8004ab6:	f8c0 2588 	str.w	r2, [r0, #1416]	; 0x588
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8004aba:	7802      	ldrb	r2, [r0, #0]
 8004abc:	2a0a      	cmp	r2, #10
 8004abe:	d104      	bne.n	8004aca <USBH_LL_IncTimer+0x1a>
 8004ac0:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 8004ac4:	b10b      	cbz	r3, 8004aca <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	4718      	bx	r3
 8004aca:	4770      	bx	lr

08004acc <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8004acc:	7802      	ldrb	r2, [r0, #0]
{
 8004ace:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8004ad0:	b94a      	cbnz	r2, 8004ae6 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1;
    
    if(phost->pUser != NULL)
 8004ad2:	f8d0 3594 	ldr.w	r3, [r0, #1428]	; 0x594
    phost->device.is_connected = 1;
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8004adc:	b10b      	cbz	r3, 8004ae2 <USBH_LL_Connect+0x16>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 8004ade:	2104      	movs	r1, #4
 8004ae0:	4798      	blx	r3
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	bd08      	pop	{r3, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8004ae6:	7802      	ldrb	r2, [r0, #0]
 8004ae8:	2a01      	cmp	r2, #1
    phost->gState = HOST_DEV_ATTACHED ;
 8004aea:	bf04      	itt	eq
 8004aec:	2202      	moveq	r2, #2
 8004aee:	7002      	strbeq	r2, [r0, #0]
 8004af0:	e7f7      	b.n	8004ae2 <USBH_LL_Connect+0x16>

08004af2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8004af2:	b510      	push	{r4, lr}
 8004af4:	4604      	mov	r4, r0
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 8004af6:	f000 fd71 	bl	80055dc <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8004afa:	7921      	ldrb	r1, [r4, #4]
 8004afc:	4620      	mov	r0, r4
 8004afe:	f000 faee 	bl	80050de <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8004b02:	7961      	ldrb	r1, [r4, #5]
 8004b04:	4620      	mov	r0, r4
 8004b06:	f000 faea 	bl	80050de <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 8004b10:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 8004b14:	b113      	cbz	r3, 8004b1c <USBH_LL_Disconnect+0x2a>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8004b16:	2105      	movs	r1, #5
 8004b18:	4620      	mov	r0, r4
 8004b1a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f000 fd4f 	bl	80055c0 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8004b22:	2303      	movs	r3, #3
 8004b24:	7023      	strb	r3, [r4, #0]
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 8004b26:	2000      	movs	r0, #0
 8004b28:	bd10      	pop	{r4, pc}

08004b2a <USBH_GetNextDesc>:
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8004b2a:	7802      	ldrb	r2, [r0, #0]
 8004b2c:	880b      	ldrh	r3, [r1, #0]
 8004b2e:	4413      	add	r3, r2
 8004b30:	800b      	strh	r3, [r1, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 
  return(pnext);
}
 8004b32:	4410      	add	r0, r2
 8004b34:	4770      	bx	lr

08004b36 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8004b36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b38:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8004b3a:	7880      	ldrb	r0, [r0, #2]
 8004b3c:	2801      	cmp	r0, #1
 8004b3e:	d003      	beq.n	8004b48 <USBH_CtlReq+0x12>
 8004b40:	2802      	cmp	r0, #2
 8004b42:	d008      	beq.n	8004b56 <USBH_CtlReq+0x20>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8004b44:	2001      	movs	r0, #1
 8004b46:	e004      	b.n	8004b52 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 8004b48:	2302      	movs	r3, #2
    phost->Control.buff = buff; 
 8004b4a:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 8004b4c:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;  
 8004b4e:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8004b50:	70a3      	strb	r3, [r4, #2]
}
 8004b52:	b003      	add	sp, #12
 8004b54:	bd30      	pop	{r4, r5, pc}
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  
  switch (phost->Control.state)
 8004b56:	7e23      	ldrb	r3, [r4, #24]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	2b0a      	cmp	r3, #10
 8004b5c:	d8f2      	bhi.n	8004b44 <USBH_CtlReq+0xe>
 8004b5e:	e8df f003 	tbb	[pc, r3]
 8004b62:	0f06      	.short	0x0f06
 8004b64:	4a3d3126 	.word	0x4a3d3126
 8004b68:	897c6b60 	.word	0x897c6b60
 8004b6c:	92          	.byte	0x92
 8004b6d:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
 8004b6e:	7962      	ldrb	r2, [r4, #5]
 8004b70:	f104 0110 	add.w	r1, r4, #16
 8004b74:	4620      	mov	r0, r4
 8004b76:	f000 fa06 	bl	8004f86 <USBH_CtlSendSetup>
	                   (uint8_t *)phost->Control.setup.d8 , 
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 8004b7a:	2302      	movs	r3, #2
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8004b7c:	7623      	strb	r3, [r4, #24]
 8004b7e:	e7e1      	b.n	8004b44 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 8004b80:	7961      	ldrb	r1, [r4, #5]
 8004b82:	4620      	mov	r0, r4
 8004b84:	f000 fd98 	bl	80056b8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8004b88:	2801      	cmp	r0, #1
 8004b8a:	d123      	bne.n	8004bd4 <USBH_CtlReq+0x9e>
      if (phost->Control.setup.b.wLength.w != 0 )
 8004b8c:	8ae2      	ldrh	r2, [r4, #22]
 8004b8e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004b92:	b132      	cbz	r2, 8004ba2 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	da02      	bge.n	8004b9e <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	7623      	strb	r3, [r4, #24]
 8004b9c:	e7d9      	b.n	8004b52 <USBH_CtlReq+0x1c>
          phost->Control.state = CTRL_DATA_OUT;
 8004b9e:	2305      	movs	r3, #5
 8004ba0:	e7ec      	b.n	8004b7c <USBH_CtlReq+0x46>
        if (direction == USB_D2H)
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da01      	bge.n	8004baa <USBH_CtlReq+0x74>
      phost->Control.state = CTRL_STATUS_OUT;
 8004ba6:	2309      	movs	r3, #9
 8004ba8:	e7e8      	b.n	8004b7c <USBH_CtlReq+0x46>
          phost->Control.state = CTRL_STATUS_IN;
 8004baa:	2307      	movs	r3, #7
 8004bac:	e7e6      	b.n	8004b7c <USBH_CtlReq+0x46>
     phost->Control.timer = phost->Timer;
 8004bae:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 8004bb2:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8004bb4:	89a2      	ldrh	r2, [r4, #12]
 8004bb6:	7923      	ldrb	r3, [r4, #4]
 8004bb8:	68a1      	ldr	r1, [r4, #8]
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f000 fa0b 	bl	8004fd6 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	e7db      	b.n	8004b7c <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8004bc4:	7921      	ldrb	r1, [r4, #4]
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f000 fd76 	bl	80056b8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8004bcc:	2801      	cmp	r0, #1
 8004bce:	d0ea      	beq.n	8004ba6 <USBH_CtlReq+0x70>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 8004bd0:	2805      	cmp	r0, #5
 8004bd2:	d01a      	beq.n	8004c0a <USBH_CtlReq+0xd4>
    else if(URB_Status == USBH_URB_ERROR)
 8004bd4:	2804      	cmp	r0, #4
 8004bd6:	d1b5      	bne.n	8004b44 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;
 8004bd8:	230b      	movs	r3, #11
 8004bda:	e7cf      	b.n	8004b7c <USBH_CtlReq+0x46>
    }
    break;
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 8004bdc:	2501      	movs	r5, #1
 8004bde:	7963      	ldrb	r3, [r4, #5]
 8004be0:	89a2      	ldrh	r2, [r4, #12]
 8004be2:	9500      	str	r5, [sp, #0]
 8004be4:	68a1      	ldr	r1, [r4, #8]
 8004be6:	4620      	mov	r0, r4
 8004be8:	f000 f9de 	bl	8004fa8 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8004bec:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 8004bf0:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8004bf2:	2306      	movs	r3, #6
 8004bf4:	e7c2      	b.n	8004b7c <USBH_CtlReq+0x46>
    break;
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 8004bf6:	7961      	ldrb	r1, [r4, #5]
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 fd5d 	bl	80056b8 <USBH_LL_GetURBState>
    
    if  (URB_Status == USBH_URB_DONE)
 8004bfe:	2801      	cmp	r0, #1
 8004c00:	d0d3      	beq.n	8004baa <USBH_CtlReq+0x74>
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    
    /* handle error cases */
    else if  (URB_Status == USBH_URB_STALL) 
 8004c02:	2805      	cmp	r0, #5
 8004c04:	d103      	bne.n	8004c0e <USBH_CtlReq+0xd8>
    { 
      /* In stall case, return to previous machine state*/
      phost->Control.state = CTRL_STALLED; 
 8004c06:	230c      	movs	r3, #12
 8004c08:	7623      	strb	r3, [r4, #24]
#endif      
    }
     else if(URB_Status == USBH_URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      status = USBH_NOT_SUPPORTED;
 8004c0a:	2003      	movs	r0, #3
 8004c0c:	e7a1      	b.n	8004b52 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8004c0e:	2802      	cmp	r0, #2
 8004c10:	d0c5      	beq.n	8004b9e <USBH_CtlReq+0x68>
    else if (URB_Status == USBH_URB_ERROR)
 8004c12:	2804      	cmp	r0, #4
 8004c14:	d196      	bne.n	8004b44 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;  
 8004c16:	230b      	movs	r3, #11
 8004c18:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	70a3      	strb	r3, [r4, #2]
      status = USBH_FAIL;
 8004c1e:	2002      	movs	r0, #2
  return status;
 8004c20:	e797      	b.n	8004b52 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 8004c22:	2200      	movs	r2, #0
 8004c24:	7923      	ldrb	r3, [r4, #4]
 8004c26:	4611      	mov	r1, r2
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f000 f9d4 	bl	8004fd6 <USBH_CtlReceiveData>
    phost->Control.timer = phost->Timer;
 8004c2e:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 8004c32:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004c34:	2308      	movs	r3, #8
 8004c36:	e7a1      	b.n	8004b7c <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8004c38:	7921      	ldrb	r1, [r4, #4]
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f000 fd3c 	bl	80056b8 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8004c40:	2801      	cmp	r0, #1
 8004c42:	d104      	bne.n	8004c4e <USBH_CtlReq+0x118>
      phost->RequestState = CMD_SEND;
 8004c44:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;  
 8004c46:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8004c48:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;  
 8004c4a:	7620      	strb	r0, [r4, #24]
 8004c4c:	e781      	b.n	8004b52 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 8004c4e:	2804      	cmp	r0, #4
 8004c50:	d0c2      	beq.n	8004bd8 <USBH_CtlReq+0xa2>
     else if(URB_Status == USBH_URB_STALL)
 8004c52:	2805      	cmp	r0, #5
 8004c54:	f47f af76 	bne.w	8004b44 <USBH_CtlReq+0xe>
 8004c58:	e7d7      	b.n	8004c0a <USBH_CtlReq+0xd4>
#endif      
    }
    break;
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2501      	movs	r5, #1
 8004c5e:	7963      	ldrb	r3, [r4, #5]
 8004c60:	9500      	str	r5, [sp, #0]
 8004c62:	4611      	mov	r1, r2
 8004c64:	4620      	mov	r0, r4
 8004c66:	f000 f99f 	bl	8004fa8 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8004c6a:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 8004c6e:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8004c70:	230a      	movs	r3, #10
 8004c72:	e783      	b.n	8004b7c <USBH_CtlReq+0x46>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8004c74:	7961      	ldrb	r1, [r4, #5]
 8004c76:	4620      	mov	r0, r4
 8004c78:	f000 fd1e 	bl	80056b8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8004c7c:	2801      	cmp	r0, #1
 8004c7e:	d0e1      	beq.n	8004c44 <USBH_CtlReq+0x10e>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
 8004c80:	2802      	cmp	r0, #2
 8004c82:	d1a7      	bne.n	8004bd4 <USBH_CtlReq+0x9e>
 8004c84:	e78f      	b.n	8004ba6 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8004c86:	7e63      	ldrb	r3, [r4, #25]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	7663      	strb	r3, [r4, #25]
 8004c90:	d806      	bhi.n	8004ca0 <USBH_CtlReq+0x16a>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8004c92:	4620      	mov	r0, r4
 8004c94:	f000 fca2 	bl	80055dc <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8004c98:	2001      	movs	r0, #1
 8004c9a:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 8004c9c:	70a0      	strb	r0, [r4, #2]
 8004c9e:	e758      	b.n	8004b52 <USBH_CtlReq+0x1c>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8004ca0:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 8004ca4:	2106      	movs	r1, #6
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	4798      	blx	r3
      phost->Control.errorcount = 0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	7663      	strb	r3, [r4, #25]
 8004cae:	e7b4      	b.n	8004c1a <USBH_CtlReq+0xe4>

08004cb0 <USBH_GetDescriptor>:
{ 
 8004cb0:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8004cb2:	7884      	ldrb	r4, [r0, #2]
{ 
 8004cb4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8004cb8:	2c01      	cmp	r4, #1
 8004cba:	d110      	bne.n	8004cde <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8004cbc:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8004cc0:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8004cc2:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8004cc6:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8004cca:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8004ccc:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409;
 8004cd0:	bf0c      	ite	eq
 8004cd2:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0;
 8004cd6:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8004cd8:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0;
 8004cda:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length; 
 8004cdc:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff , length );     
 8004cde:	462a      	mov	r2, r5
 8004ce0:	4619      	mov	r1, r3
}
 8004ce2:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff , length );     
 8004ce4:	f7ff bf27 	b.w	8004b36 <USBH_CtlReq>

08004ce8 <USBH_Get_DevDesc>:
{
 8004ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8004cea:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8004cee:	460d      	mov	r5, r1
 8004cf0:	9100      	str	r1, [sp, #0]
 8004cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cf6:	2100      	movs	r1, #0
{
 8004cf8:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8004cfa:	f7ff ffd9 	bl	8004cb0 <USBH_GetDescriptor>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d149      	bne.n	8004d96 <USBH_Get_DevDesc+0xae>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8004d02:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8004d06:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8004d0a:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8004d0e:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8004d12:	f894 211f 	ldrb.w	r2, [r4, #287]	; 0x11f
 8004d16:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8004d1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004d1e:	f8a4 3322 	strh.w	r3, [r4, #802]	; 0x322
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8004d22:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8004d26:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8004d2a:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8004d2e:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8004d32:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8004d36:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  if (length > 8)
 8004d3a:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8004d3c:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8004d40:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  if (length > 8)
 8004d44:	d927      	bls.n	8004d96 <USBH_Get_DevDesc+0xae>
    dev_desc->idVendor           = LE16 (buf +  8);
 8004d46:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8004d4a:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8004d4e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004d52:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
    dev_desc->idProduct          = LE16 (buf + 10);
 8004d56:	f894 2127 	ldrb.w	r2, [r4, #295]	; 0x127
 8004d5a:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8004d5e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004d62:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8004d66:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
 8004d6a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8004d6e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004d72:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8004d76:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8004d7a:	f884 332e 	strb.w	r3, [r4, #814]	; 0x32e
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8004d7e:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8004d82:	f884 332f 	strb.w	r3, [r4, #815]	; 0x32f
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8004d86:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8004d8a:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8004d8e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8004d92:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
}
 8004d96:	b003      	add	sp, #12
 8004d98:	bd30      	pop	{r4, r5, pc}

08004d9a <USBH_Get_CfgDesc>:
{
 8004d9a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  pData = phost->device.CfgDesc_Raw;
 8004d9e:	f100 051c 	add.w	r5, r0, #28
{
 8004da2:	460f      	mov	r7, r1
  if((status = USBH_GetDescriptor(phost,
 8004da4:	9100      	str	r1, [sp, #0]
 8004da6:	462b      	mov	r3, r5
 8004da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dac:	2100      	movs	r1, #0
{
 8004dae:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8004db0:	f7ff ff7e 	bl	8004cb0 <USBH_GetDescriptor>
 8004db4:	bb68      	cbnz	r0, 8004e12 <USBH_Get_CfgDesc+0x78>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8004db6:	7f23      	ldrb	r3, [r4, #28]
 8004db8:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8004dbc:	7f63      	ldrb	r3, [r4, #29]
 8004dbe:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004dc2:	7fa6      	ldrb	r6, [r4, #30]
 8004dc4:	7fe3      	ldrb	r3, [r4, #31]
 8004dc6:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8004dca:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004dce:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8004dd2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004dd6:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8004dda:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8004dde:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004de2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8004de6:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004dea:	b2b6      	uxth	r6, r6
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8004dec:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004df0:	f8a4 6334 	strh.w	r6, [r4, #820]	; 0x334
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004df4:	2f09      	cmp	r7, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8004df6:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004dfa:	d90a      	bls.n	8004e12 <USBH_Get_CfgDesc+0x78>
 8004dfc:	4622      	mov	r2, r4
 8004dfe:	462b      	mov	r3, r5
 8004e00:	4686      	mov	lr, r0
 8004e02:	2109      	movs	r1, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004e04:	f04f 0832 	mov.w	r8, #50	; 0x32
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8004e08:	f1be 0f0a 	cmp.w	lr, #10
 8004e0c:	d001      	beq.n	8004e12 <USBH_Get_CfgDesc+0x78>
 8004e0e:	428e      	cmp	r6, r1
 8004e10:	d802      	bhi.n	8004e18 <USBH_Get_CfgDesc+0x7e>
}
 8004e12:	b002      	add	sp, #8
 8004e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8004e18:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8004e1a:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8004e1c:	4429      	add	r1, r5
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 8004e1e:	785d      	ldrb	r5, [r3, #1]
 8004e20:	2d04      	cmp	r5, #4
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8004e22:	b289      	uxth	r1, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 8004e24:	d1f0      	bne.n	8004e08 <USBH_Get_CfgDesc+0x6e>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8004e26:	781d      	ldrb	r5, [r3, #0]
 8004e28:	f882 533c 	strb.w	r5, [r2, #828]	; 0x33c
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8004e2c:	785d      	ldrb	r5, [r3, #1]
 8004e2e:	f882 533d 	strb.w	r5, [r2, #829]	; 0x33d
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8004e32:	789d      	ldrb	r5, [r3, #2]
 8004e34:	f882 533e 	strb.w	r5, [r2, #830]	; 0x33e
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8004e38:	78dd      	ldrb	r5, [r3, #3]
 8004e3a:	f882 533f 	strb.w	r5, [r2, #831]	; 0x33f
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8004e3e:	791d      	ldrb	r5, [r3, #4]
 8004e40:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8004e44:	795d      	ldrb	r5, [r3, #5]
 8004e46:	f882 5341 	strb.w	r5, [r2, #833]	; 0x341
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8004e4a:	799d      	ldrb	r5, [r3, #6]
 8004e4c:	f882 5342 	strb.w	r5, [r2, #834]	; 0x342
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8004e50:	79dd      	ldrb	r5, [r3, #7]
 8004e52:	f882 5343 	strb.w	r5, [r2, #835]	; 0x343
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8004e56:	7a1d      	ldrb	r5, [r3, #8]
 8004e58:	f882 5344 	strb.w	r5, [r2, #836]	; 0x344
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004e5c:	fb08 f90e 	mul.w	r9, r8, lr
        ep_ix = 0;
 8004e60:	2500      	movs	r5, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004e62:	f892 7340 	ldrb.w	r7, [r2, #832]	; 0x340
 8004e66:	42bd      	cmp	r5, r7
 8004e68:	db03      	blt.n	8004e72 <USBH_Get_CfgDesc+0xd8>
 8004e6a:	f10e 0e01 	add.w	lr, lr, #1
 8004e6e:	3232      	adds	r2, #50	; 0x32
 8004e70:	e7ca      	b.n	8004e08 <USBH_Get_CfgDesc+0x6e>
 8004e72:	428e      	cmp	r6, r1
 8004e74:	d9f9      	bls.n	8004e6a <USBH_Get_CfgDesc+0xd0>
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8004e76:	781f      	ldrb	r7, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8004e78:	443b      	add	r3, r7
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8004e7a:	4439      	add	r1, r7
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8004e7c:	785f      	ldrb	r7, [r3, #1]
 8004e7e:	2f05      	cmp	r7, #5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8004e80:	b289      	uxth	r1, r1
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8004e82:	d1ee      	bne.n	8004e62 <USBH_Get_CfgDesc+0xc8>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004e84:	1c6f      	adds	r7, r5, #1
 8004e86:	eb09 05c7 	add.w	r5, r9, r7, lsl #3
 8004e8a:	4425      	add	r5, r4
 8004e8c:	f893 c000 	ldrb.w	ip, [r3]
 8004e90:	f885 c33e 	strb.w	ip, [r5, #830]	; 0x33e
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8004e94:	f893 c001 	ldrb.w	ip, [r3, #1]
 8004e98:	f885 c33f 	strb.w	ip, [r5, #831]	; 0x33f
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8004e9c:	f893 c002 	ldrb.w	ip, [r3, #2]
 8004ea0:	f885 c340 	strb.w	ip, [r5, #832]	; 0x340
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8004ea4:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004ea8:	f885 c341 	strb.w	ip, [r5, #833]	; 0x341
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8004eac:	f893 a005 	ldrb.w	sl, [r3, #5]
 8004eb0:	f893 c004 	ldrb.w	ip, [r3, #4]
 8004eb4:	eb0c 2c0a 	add.w	ip, ip, sl, lsl #8
 8004eb8:	f8a5 c342 	strh.w	ip, [r5, #834]	; 0x342
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8004ebc:	f893 c006 	ldrb.w	ip, [r3, #6]
 8004ec0:	f885 c344 	strb.w	ip, [r5, #836]	; 0x344
            ep_ix++;
 8004ec4:	b27d      	sxtb	r5, r7
 8004ec6:	e7cc      	b.n	8004e62 <USBH_Get_CfgDesc+0xc8>

08004ec8 <USBH_Get_StringDesc>:
{
 8004ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8004eca:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8004ece:	4614      	mov	r4, r2
 8004ed0:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8004ed8:	462b      	mov	r3, r5
 8004eda:	2100      	movs	r1, #0
{
 8004edc:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8004ede:	f7ff fee7 	bl	8004cb0 <USBH_GetDescriptor>
 8004ee2:	b978      	cbnz	r0, 8004f04 <USBH_Get_StringDesc+0x3c>
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8004ee4:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d10b      	bne.n	8004f04 <USBH_Get_StringDesc+0x3c>
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8004eec:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8004ef0:	3b02      	subs	r3, #2
 8004ef2:	42bb      	cmp	r3, r7
 8004ef4:	bfa8      	it	ge
 8004ef6:	463b      	movge	r3, r7
 8004ef8:	b29b      	uxth	r3, r3
    for (idx = 0; idx < strlength; idx+=2 )
 8004efa:	4602      	mov	r2, r0
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d803      	bhi.n	8004f08 <USBH_Get_StringDesc+0x40>
    *pdest = 0; /* mark end of string */  
 8004f00:	2300      	movs	r3, #0
 8004f02:	7023      	strb	r3, [r4, #0]
}
 8004f04:	b003      	add	sp, #12
 8004f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8004f08:	18a9      	adds	r1, r5, r2
    for (idx = 0; idx < strlength; idx+=2 )
 8004f0a:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8004f0c:	7889      	ldrb	r1, [r1, #2]
 8004f0e:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0; idx < strlength; idx+=2 )
 8004f12:	b292      	uxth	r2, r2
 8004f14:	e7f2      	b.n	8004efc <USBH_Get_StringDesc+0x34>

08004f16 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8004f16:	7883      	ldrb	r3, [r0, #2]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d106      	bne.n	8004f2a <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004f1c:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004f1e:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004f20:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004f22:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004f24:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8004f26:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;
 8004f28:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	f7ff be02 	b.w	8004b36 <USBH_CtlReq>

08004f32 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8004f32:	7883      	ldrb	r3, [r0, #2]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8004f38:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004f3a:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8004f3c:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004f3e:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004f40:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8004f42:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0; 
 8004f44:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );      
 8004f46:	2200      	movs	r2, #0
 8004f48:	4611      	mov	r1, r2
 8004f4a:	f7ff bdf4 	b.w	8004b36 <USBH_CtlReq>

08004f4e <USBH_SetInterface>:
  if(phost->RequestState == CMD_SEND)
 8004f4e:	7883      	ldrb	r3, [r0, #2]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d106      	bne.n	8004f62 <USBH_SetInterface+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8004f54:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8004f56:	230b      	movs	r3, #11
 8004f58:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wLength.w = 0;           
 8004f5a:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = altSetting;
 8004f5c:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8004f5e:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8004f60:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );     
 8004f62:	2200      	movs	r2, #0
 8004f64:	4611      	mov	r1, r2
 8004f66:	f7ff bde6 	b.w	8004b36 <USBH_CtlReq>

08004f6a <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8004f6a:	7883      	ldrb	r3, [r0, #2]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d106      	bne.n	8004f7e <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8004f70:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8004f72:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004f74:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8004f76:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004f78:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8004f7a:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8004f7c:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );   
 8004f7e:	2200      	movs	r2, #0
 8004f80:	4611      	mov	r1, r2
 8004f82:	f7ff bdd8 	b.w	8004b36 <USBH_CtlReq>

08004f86 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 8004f86:	b530      	push	{r4, r5, lr}
 8004f88:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004f8a:	2400      	movs	r4, #0
{
 8004f8c:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004f8e:	2308      	movs	r3, #8
 8004f90:	9302      	str	r3, [sp, #8]
 8004f92:	9101      	str	r1, [sp, #4]
 8004f94:	9403      	str	r4, [sp, #12]
 8004f96:	9400      	str	r4, [sp, #0]
 8004f98:	4623      	mov	r3, r4
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	f000 fb71 	bl	8005684 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
}
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	b005      	add	sp, #20
 8004fa6:	bd30      	pop	{r4, r5, pc}

08004fa8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8004fa8:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004faa:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8004fae:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004fb0:	2d00      	cmp	r5, #0
{
 8004fb2:	461c      	mov	r4, r3
 8004fb4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004fb8:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 8004fba:	bf18      	it	ne
 8004fbc:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004fbe:	9303      	str	r3, [sp, #12]
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	9101      	str	r1, [sp, #4]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4621      	mov	r1, r4
 8004fcc:	f000 fb5a 	bl	8005684 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
}
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	b005      	add	sp, #20
 8004fd4:	bd30      	pop	{r4, r5, pc}

08004fd6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004fd6:	b530      	push	{r4, r5, lr}
 8004fd8:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004fda:	2400      	movs	r4, #0
{
 8004fdc:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004fde:	9202      	str	r2, [sp, #8]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	9101      	str	r1, [sp, #4]
 8004fe4:	9403      	str	r4, [sp, #12]
 8004fe6:	9200      	str	r2, [sp, #0]
 8004fe8:	4623      	mov	r3, r4
 8004fea:	4629      	mov	r1, r5
 8004fec:	f000 fb4a 	bl	8005684 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
  
}
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	b005      	add	sp, #20
 8004ff4:	bd30      	pop	{r4, r5, pc}

08004ff6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 8004ff6:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004ff8:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{ 
 8004ffc:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004ffe:	2d00      	cmp	r5, #0
{ 
 8005000:	461c      	mov	r4, r3
 8005002:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005006:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 8005008:	bf18      	it	ne
 800500a:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800500c:	9303      	str	r3, [sp, #12]
 800500e:	2301      	movs	r3, #1
 8005010:	9101      	str	r1, [sp, #4]
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	2200      	movs	r2, #0
 8005016:	2302      	movs	r3, #2
 8005018:	4621      	mov	r1, r4
 800501a:	f000 fb33 	bl	8005684 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800501e:	2000      	movs	r0, #0
 8005020:	b005      	add	sp, #20
 8005022:	bd30      	pop	{r4, r5, pc}

08005024 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8005024:	b530      	push	{r4, r5, lr}
 8005026:	b085      	sub	sp, #20
 8005028:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800502a:	2400      	movs	r4, #0
 800502c:	9202      	str	r2, [sp, #8]
 800502e:	2201      	movs	r2, #1
 8005030:	9101      	str	r1, [sp, #4]
 8005032:	9403      	str	r4, [sp, #12]
 8005034:	9200      	str	r2, [sp, #0]
 8005036:	2302      	movs	r3, #2
 8005038:	4629      	mov	r1, r5
 800503a:	f000 fb23 	bl	8005684 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
}
 800503e:	4620      	mov	r0, r4
 8005040:	b005      	add	sp, #20
 8005042:	bd30      	pop	{r4, r5, pc}

08005044 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t pipe_num)
{
 8005044:	b530      	push	{r4, r5, lr}
 8005046:	b085      	sub	sp, #20
 8005048:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800504a:	2400      	movs	r4, #0
 800504c:	9202      	str	r2, [sp, #8]
 800504e:	2201      	movs	r2, #1
 8005050:	9101      	str	r1, [sp, #4]
 8005052:	9403      	str	r4, [sp, #12]
 8005054:	9200      	str	r2, [sp, #0]
 8005056:	2303      	movs	r3, #3
 8005058:	4629      	mov	r1, r5
 800505a:	f000 fb13 	bl	8005684 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0); 
  
  return USBH_OK;
}
 800505e:	4620      	mov	r0, r4
 8005060:	b005      	add	sp, #20
 8005062:	bd30      	pop	{r4, r5, pc}

08005064 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint32_t length,
                                uint8_t pipe_num)
{
 8005064:	b530      	push	{r4, r5, lr}
 8005066:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005068:	2400      	movs	r4, #0
{
 800506a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800506c:	b292      	uxth	r2, r2
 800506e:	2301      	movs	r3, #1
 8005070:	9202      	str	r2, [sp, #8]
 8005072:	9101      	str	r1, [sp, #4]
 8005074:	9403      	str	r4, [sp, #12]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	4622      	mov	r2, r4
 800507a:	4629      	mov	r1, r5
 800507c:	f000 fb02 	bl	8005684 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  
  return USBH_OK;
}
 8005080:	4620      	mov	r0, r4
 8005082:	b005      	add	sp, #20
 8005084:	bd30      	pop	{r4, r5, pc}

08005086 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8005086:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8005088:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800508c:	9402      	str	r4, [sp, #8]
 800508e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8005092:	9401      	str	r4, [sp, #4]
 8005094:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8005098:	9400      	str	r4, [sp, #0]
 800509a:	f000 facd 	bl	8005638 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);
  
  return USBH_OK; 

}
 800509e:	2000      	movs	r0, #0
 80050a0:	b004      	add	sp, #16
 80050a2:	bd10      	pop	{r4, pc}

080050a4 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80050a4:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 80050a6:	f000 fadf 	bl	8005668 <USBH_LL_ClosePipe>
  
  return USBH_OK; 

}
 80050aa:	2000      	movs	r0, #0
 80050ac:	bd08      	pop	{r3, pc}

080050ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80050ae:	b530      	push	{r4, r5, lr}
 80050b0:	2300      	movs	r3, #0
 80050b2:	f200 544c 	addw	r4, r0, #1356	; 0x54c
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 80050b6:	f854 5b04 	ldr.w	r5, [r4], #4
 80050ba:	042d      	lsls	r5, r5, #16
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	d408      	bmi.n	80050d2 <USBH_AllocPipe+0x24>
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 80050c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80050c4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return idx;
 80050c8:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 80050ca:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
}
 80050ce:	b2d0      	uxtb	r0, r2
 80050d0:	bd30      	pop	{r4, r5, pc}
 80050d2:	3301      	adds	r3, #1
  for (idx = 0 ; idx < 11 ; idx++)
 80050d4:	2b0b      	cmp	r3, #11
 80050d6:	d1ee      	bne.n	80050b6 <USBH_AllocPipe+0x8>
	} 
  }
  return 0xFFFF;
 80050d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050dc:	e7f7      	b.n	80050ce <USBH_AllocPipe+0x20>

080050de <USBH_FreePipe>:
   if(idx < 11)
 80050de:	290a      	cmp	r1, #10
 80050e0:	bf9f      	itttt	ls
 80050e2:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFF;
 80050e6:	f8d0 354c 	ldrls.w	r3, [r0, #1356]	; 0x54c
 80050ea:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 80050ee:	f8c0 354c 	strls.w	r3, [r0, #1356]	; 0x54c
}
 80050f2:	2000      	movs	r0, #0
 80050f4:	4770      	bx	lr
	...

080050f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050f8:	b510      	push	{r4, lr}
 80050fa:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80050fc:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <SystemClock_Config+0xa8>)
 80050fe:	2100      	movs	r1, #0
 8005100:	9101      	str	r1, [sp, #4]
 8005102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005104:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005108:	641a      	str	r2, [r3, #64]	; 0x40
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005114:	4b23      	ldr	r3, [pc, #140]	; (80051a4 <SystemClock_Config+0xac>)
 8005116:	9102      	str	r1, [sp, #8]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005126:	9302      	str	r3, [sp, #8]
 8005128:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800512a:	2301      	movs	r3, #1
 800512c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800512e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005132:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005134:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005138:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800513a:	2308      	movs	r3, #8
 800513c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800513e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005142:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005144:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005146:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005148:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800514a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800514c:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800514e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005150:	f7fb ffce 	bl	80010f0 <HAL_RCC_OscConfig>
 8005154:	b100      	cbz	r0, 8005158 <SystemClock_Config+0x60>
 8005156:	e7fe      	b.n	8005156 <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005158:	230f      	movs	r3, #15
 800515a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800515c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005160:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005162:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005164:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800516a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800516c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800516e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005170:	f7fc f96e 	bl	8001450 <HAL_RCC_ClockConfig>
 8005174:	4604      	mov	r4, r0
 8005176:	b100      	cbz	r0, 800517a <SystemClock_Config+0x82>
 8005178:	e7fe      	b.n	8005178 <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800517a:	f7fc fa03 	bl	8001584 <HAL_RCC_GetHCLKFreq>
 800517e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005182:	fbb0 f0f3 	udiv	r0, r0, r3
 8005186:	f7fb fa5d 	bl	8000644 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800518a:	2004      	movs	r0, #4
 800518c:	f7fb fa70 	bl	8000670 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005190:	4622      	mov	r2, r4
 8005192:	4621      	mov	r1, r4
 8005194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005198:	f7fb fa14 	bl	80005c4 <HAL_NVIC_SetPriority>
}
 800519c:	b014      	add	sp, #80	; 0x50
 800519e:	bd10      	pop	{r4, pc}
 80051a0:	40023800 	.word	0x40023800
 80051a4:	40007000 	.word	0x40007000

080051a8 <main>:
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08c      	sub	sp, #48	; 0x30
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80051ac:	2400      	movs	r4, #0
  HAL_Init();
 80051ae:	f7fb f9b7 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 80051b2:	f7ff ffa1 	bl	80050f8 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80051b6:	4b6c      	ldr	r3, [pc, #432]	; (8005368 <main+0x1c0>)
 80051b8:	9401      	str	r4, [sp, #4]
 80051ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80051bc:	486b      	ldr	r0, [pc, #428]	; (800536c <main+0x1c4>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80051be:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005380 <main+0x1d8>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80051c2:	f042 0210 	orr.w	r2, r2, #16
 80051c6:	631a      	str	r2, [r3, #48]	; 0x30
 80051c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ca:	f002 0210 	and.w	r2, r2, #16
 80051ce:	9201      	str	r2, [sp, #4]
 80051d0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051d2:	9402      	str	r4, [sp, #8]
 80051d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d6:	f042 0204 	orr.w	r2, r2, #4
 80051da:	631a      	str	r2, [r3, #48]	; 0x30
 80051dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051de:	f002 0204 	and.w	r2, r2, #4
 80051e2:	9202      	str	r2, [sp, #8]
 80051e4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80051e6:	9403      	str	r4, [sp, #12]
 80051e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051ee:	631a      	str	r2, [r3, #48]	; 0x30
 80051f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80051f6:	9203      	str	r2, [sp, #12]
 80051f8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051fa:	9404      	str	r4, [sp, #16]
 80051fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
 8005204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005206:	f002 0201 	and.w	r2, r2, #1
 800520a:	9204      	str	r2, [sp, #16]
 800520c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800520e:	9405      	str	r4, [sp, #20]
 8005210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005212:	f042 0202 	orr.w	r2, r2, #2
 8005216:	631a      	str	r2, [r3, #48]	; 0x30
 8005218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800521a:	f002 0202 	and.w	r2, r2, #2
 800521e:	9205      	str	r2, [sp, #20]
 8005220:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005222:	9406      	str	r4, [sp, #24]
 8005224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005226:	f042 0208 	orr.w	r2, r2, #8
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8005234:	4622      	mov	r2, r4
 8005236:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005238:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800523a:	f7fb fb0b 	bl	8000854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800523e:	2201      	movs	r2, #1
 8005240:	4611      	mov	r1, r2
 8005242:	484b      	ldr	r0, [pc, #300]	; (8005370 <main+0x1c8>)
 8005244:	f7fb fb06 	bl	8000854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8005248:	4622      	mov	r2, r4
 800524a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800524e:	4849      	ldr	r0, [pc, #292]	; (8005374 <main+0x1cc>)
 8005250:	f7fb fb00 	bl	8000854 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005254:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8005256:	2508      	movs	r5, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8005258:	a907      	add	r1, sp, #28
 800525a:	4844      	ldr	r0, [pc, #272]	; (800536c <main+0x1c4>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800525c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800525e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005260:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005262:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8005264:	f7fb fa16 	bl	8000694 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005268:	a907      	add	r1, sp, #28
 800526a:	4841      	ldr	r0, [pc, #260]	; (8005370 <main+0x1c8>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800526c:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800526e:	2705      	movs	r7, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005270:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005272:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005274:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005276:	f7fb fa0d 	bl	8000694 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800527a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800527c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527e:	2502      	movs	r5, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8005280:	483b      	ldr	r0, [pc, #236]	; (8005370 <main+0x1c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005282:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005284:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005286:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005288:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800528a:	f7fb fa03 	bl	8000694 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800528e:	a907      	add	r1, sp, #28
 8005290:	4839      	ldr	r0, [pc, #228]	; (8005378 <main+0x1d0>)
  GPIO_InitStruct.Pin = B1_Pin;
 8005292:	9607      	str	r6, [sp, #28]
  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005294:	f04f 0a06 	mov.w	sl, #6
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005298:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800529e:	f7fb f9f9 	bl	8000694 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80052a2:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80052a4:	a907      	add	r1, sp, #28
 80052a6:	4834      	ldr	r0, [pc, #208]	; (8005378 <main+0x1d0>)
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80052a8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052aa:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ac:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ae:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80052b0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80052b4:	f7fb f9ee 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80052b8:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ba:	a907      	add	r1, sp, #28
 80052bc:	482e      	ldr	r0, [pc, #184]	; (8005378 <main+0x1d0>)
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80052be:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80052c0:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052ca:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052cc:	f7fb f9e2 	bl	8000694 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80052d0:	a907      	add	r1, sp, #28
 80052d2:	482a      	ldr	r0, [pc, #168]	; (800537c <main+0x1d4>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80052d4:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052d8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052da:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80052dc:	f7fb f9da 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80052e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80052e4:	a907      	add	r1, sp, #28
 80052e6:	4825      	ldr	r0, [pc, #148]	; (800537c <main+0x1d4>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80052e8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ea:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ec:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ee:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052f0:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80052f2:	f7fb f9cf 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80052f6:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052fa:	a907      	add	r1, sp, #28
 80052fc:	481d      	ldr	r0, [pc, #116]	; (8005374 <main+0x1cc>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80052fe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005300:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005302:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005304:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005306:	f7fb f9c5 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800530a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800530e:	a907      	add	r1, sp, #28
 8005310:	4817      	ldr	r0, [pc, #92]	; (8005370 <main+0x1c8>)
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8005312:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005314:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005316:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005318:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800531a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800531e:	f7fb f9b9 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8005322:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005324:	a907      	add	r1, sp, #28
 8005326:	4813      	ldr	r0, [pc, #76]	; (8005374 <main+0x1cc>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8005328:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800532a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800532e:	f7fb f9b1 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8005332:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005336:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005338:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800533a:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800533c:	480f      	ldr	r0, [pc, #60]	; (800537c <main+0x1d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800533e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005340:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005342:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005344:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005348:	f7fb f9a4 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800534c:	a907      	add	r1, sp, #28
 800534e:	4807      	ldr	r0, [pc, #28]	; (800536c <main+0x1c4>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8005350:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005352:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005356:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8005358:	f7fb f99c 	bl	8000694 <HAL_GPIO_Init>
  MX_USB_HOST_Init();
 800535c:	f000 f888 	bl	8005470 <MX_USB_HOST_Init>
    MX_USB_HOST_Process();
 8005360:	f000 f8b4 	bl	80054cc <MX_USB_HOST_Process>
 8005364:	e7fc      	b.n	8005360 <main+0x1b8>
 8005366:	bf00      	nop
 8005368:	40023800 	.word	0x40023800
 800536c:	40021000 	.word	0x40021000
 8005370:	40020800 	.word	0x40020800
 8005374:	40020c00 	.word	0x40020c00
 8005378:	40020000 	.word	0x40020000
 800537c:	40020400 	.word	0x40020400
 8005380:	10120000 	.word	0x10120000

08005384 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8005384:	e7fe      	b.n	8005384 <_Error_Handler>

08005386 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005386:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005388:	2007      	movs	r0, #7
 800538a:	f7fb f909 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800538e:	2200      	movs	r2, #0
 8005390:	4611      	mov	r1, r2
 8005392:	f06f 000b 	mvn.w	r0, #11
 8005396:	f7fb f915 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800539a:	2200      	movs	r2, #0
 800539c:	4611      	mov	r1, r2
 800539e:	f06f 000a 	mvn.w	r0, #10
 80053a2:	f7fb f90f 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80053a6:	2200      	movs	r2, #0
 80053a8:	4611      	mov	r1, r2
 80053aa:	f06f 0009 	mvn.w	r0, #9
 80053ae:	f7fb f909 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80053b2:	2200      	movs	r2, #0
 80053b4:	4611      	mov	r1, r2
 80053b6:	f06f 0004 	mvn.w	r0, #4
 80053ba:	f7fb f903 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80053be:	2200      	movs	r2, #0
 80053c0:	4611      	mov	r1, r2
 80053c2:	f06f 0003 	mvn.w	r0, #3
 80053c6:	f7fb f8fd 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80053ca:	2200      	movs	r2, #0
 80053cc:	4611      	mov	r1, r2
 80053ce:	f06f 0001 	mvn.w	r0, #1
 80053d2:	f7fb f8f7 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80053d6:	2200      	movs	r2, #0
 80053d8:	4611      	mov	r1, r2
 80053da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80053e2:	f7fb b8ef 	b.w	80005c4 <HAL_NVIC_SetPriority>

080053e6 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80053e6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053e8:	f7fb f8b4 	bl	8000554 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80053f0:	f7fb b94b 	b.w	800068a <HAL_SYSTICK_IRQHandler>

080053f4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80053f4:	4801      	ldr	r0, [pc, #4]	; (80053fc <OTG_FS_IRQHandler+0x8>)
 80053f6:	f7fb bb31 	b.w	8000a5c <HAL_HCD_IRQHandler>
 80053fa:	bf00      	nop
 80053fc:	200006fc 	.word	0x200006fc

08005400 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005400:	490f      	ldr	r1, [pc, #60]	; (8005440 <SystemInit+0x40>)
 8005402:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005406:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800540e:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <SystemInit+0x44>)
 8005410:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005412:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800541a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005422:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005426:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005428:	4a07      	ldr	r2, [pc, #28]	; (8005448 <SystemInit+0x48>)
 800542a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005432:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005434:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005436:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800543a:	608b      	str	r3, [r1, #8]
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	e000ed00 	.word	0xe000ed00
 8005444:	40023800 	.word	0x40023800
 8005448:	24003010 	.word	0x24003010

0800544c <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800544c:	2904      	cmp	r1, #4
 800544e:	d00a      	beq.n	8005466 <USBH_UserProcess+0x1a>
 8005450:	2905      	cmp	r1, #5
 8005452:	d004      	beq.n	800545e <USBH_UserProcess+0x12>
 8005454:	2902      	cmp	r1, #2
 8005456:	d105      	bne.n	8005464 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8005458:	4b04      	ldr	r3, [pc, #16]	; (800546c <USBH_UserProcess+0x20>)
 800545a:	7019      	strb	r1, [r3, #0]
  break;
 800545c:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800545e:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8005460:	4b02      	ldr	r3, [pc, #8]	; (800546c <USBH_UserProcess+0x20>)
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	4770      	bx	lr
 8005466:	2201      	movs	r2, #1
 8005468:	e7fa      	b.n	8005460 <USBH_UserProcess+0x14>
 800546a:	bf00      	nop
 800546c:	2000012c 	.word	0x2000012c

08005470 <MX_USB_HOST_Init>:
{
 8005470:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8005472:	4c0f      	ldr	r4, [pc, #60]	; (80054b0 <MX_USB_HOST_Init+0x40>)
 8005474:	490f      	ldr	r1, [pc, #60]	; (80054b4 <MX_USB_HOST_Init+0x44>)
 8005476:	2201      	movs	r2, #1
 8005478:	4620      	mov	r0, r4
 800547a:	f7ff f98b 	bl	8004794 <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS);
 800547e:	490e      	ldr	r1, [pc, #56]	; (80054b8 <MX_USB_HOST_Init+0x48>)
 8005480:	4620      	mov	r0, r4
 8005482:	f7ff f99e 	bl	80047c2 <USBH_RegisterClass>
  USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS);
 8005486:	490d      	ldr	r1, [pc, #52]	; (80054bc <MX_USB_HOST_Init+0x4c>)
 8005488:	4620      	mov	r0, r4
 800548a:	f7ff f99a 	bl	80047c2 <USBH_RegisterClass>
  USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS);
 800548e:	490c      	ldr	r1, [pc, #48]	; (80054c0 <MX_USB_HOST_Init+0x50>)
 8005490:	4620      	mov	r0, r4
 8005492:	f7ff f996 	bl	80047c2 <USBH_RegisterClass>
  USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS);
 8005496:	490b      	ldr	r1, [pc, #44]	; (80054c4 <MX_USB_HOST_Init+0x54>)
 8005498:	4620      	mov	r0, r4
 800549a:	f7ff f992 	bl	80047c2 <USBH_RegisterClass>
  USBH_RegisterClass(&hUsbHostFS, USBH_MTP_CLASS);
 800549e:	4620      	mov	r0, r4
 80054a0:	4909      	ldr	r1, [pc, #36]	; (80054c8 <MX_USB_HOST_Init+0x58>)
 80054a2:	f7ff f98e 	bl	80047c2 <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 80054a6:	4620      	mov	r0, r4
}
 80054a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 80054ac:	f7ff b9d2 	b.w	8004854 <USBH_Start>
 80054b0:	20000164 	.word	0x20000164
 80054b4:	0800544d 	.word	0x0800544d
 80054b8:	20000008 	.word	0x20000008
 80054bc:	20000028 	.word	0x20000028
 80054c0:	20000068 	.word	0x20000068
 80054c4:	20000048 	.word	0x20000048
 80054c8:	20000088 	.word	0x20000088

080054cc <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 80054cc:	4801      	ldr	r0, [pc, #4]	; (80054d4 <MX_USB_HOST_Process+0x8>)
 80054ce:	f7ff b9cb 	b.w	8004868 <USBH_Process>
 80054d2:	bf00      	nop
 80054d4:	20000164 	.word	0x20000164

080054d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80054d8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 80054da:	6803      	ldr	r3, [r0, #0]
 80054dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80054e0:	b086      	sub	sp, #24
  if(hcdHandle->Instance==USB_OTG_FS)
 80054e2:	d12d      	bne.n	8005540 <HAL_HCD_MspInit+0x68>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054e4:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80054e6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80054ea:	a901      	add	r1, sp, #4
 80054ec:	4815      	ldr	r0, [pc, #84]	; (8005544 <HAL_HCD_MspInit+0x6c>)
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80054ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054f0:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80054f4:	f7fb f8ce 	bl	8000694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80054f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80054fc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054fe:	2302      	movs	r3, #2
 8005500:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005502:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005504:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005506:	480f      	ldr	r0, [pc, #60]	; (8005544 <HAL_HCD_MspInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005508:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800550c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800550e:	f7fb f8c1 	bl	8000694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005512:	4b0d      	ldr	r3, [pc, #52]	; (8005548 <HAL_HCD_MspInit+0x70>)
 8005514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005516:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800551a:	635a      	str	r2, [r3, #52]	; 0x34
 800551c:	9400      	str	r4, [sp, #0]
 800551e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005520:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005524:	645a      	str	r2, [r3, #68]	; 0x44
 8005526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800552c:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800552e:	2043      	movs	r0, #67	; 0x43
 8005530:	4622      	mov	r2, r4
 8005532:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005534:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005536:	f7fb f845 	bl	80005c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800553a:	2043      	movs	r0, #67	; 0x43
 800553c:	f7fb f876 	bl	800062c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005540:	b006      	add	sp, #24
 8005542:	bd10      	pop	{r4, pc}
 8005544:	40020000 	.word	0x40020000
 8005548:	40023800 	.word	0x40023800

0800554c <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 800554c:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8005550:	f7ff baae 	b.w	8004ab0 <USBH_LL_IncTimer>

08005554 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8005554:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8005558:	f7ff bab8 	b.w	8004acc <USBH_LL_Connect>

0800555c <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800555c:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8005560:	f7ff bac7 	b.w	8004af2 <USBH_LL_Disconnect>

08005564 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005564:	4770      	bx	lr
	...

08005568 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8005568:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800556a:	f890 358c 	ldrb.w	r3, [r0, #1420]	; 0x58c
 800556e:	2b01      	cmp	r3, #1
{
 8005570:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8005572:	d11e      	bne.n	80055b2 <USBH_LL_Init+0x4a>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8005574:	4810      	ldr	r0, [pc, #64]	; (80055b8 <USBH_LL_Init+0x50>)
  phost->pData = &hhcd_USB_OTG_FS;
 8005576:	f8c4 0590 	str.w	r0, [r4, #1424]	; 0x590

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800557a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800557e:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8005580:	2308      	movs	r3, #8
 8005582:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8005584:	2303      	movs	r3, #3
 8005586:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005588:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800558a:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 800558c:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005590:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005592:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005594:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005596:	f7fb f9a5 	bl	80008e4 <HAL_HCD_Init>
 800559a:	b118      	cbz	r0, 80055a4 <USBH_LL_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800559c:	21e2      	movs	r1, #226	; 0xe2
 800559e:	4807      	ldr	r0, [pc, #28]	; (80055bc <USBH_LL_Init+0x54>)
 80055a0:	f7ff fef0 	bl	8005384 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80055a4:	4804      	ldr	r0, [pc, #16]	; (80055b8 <USBH_LL_Init+0x50>)
 80055a6:	f7fb fd9d 	bl	80010e4 <HAL_HCD_GetCurrentFrame>
 80055aa:	4601      	mov	r1, r0
 80055ac:	4620      	mov	r0, r4
 80055ae:	f7ff fa7c 	bl	8004aaa <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 80055b2:	2000      	movs	r0, #0
 80055b4:	bd10      	pop	{r4, pc}
 80055b6:	bf00      	nop
 80055b8:	200006fc 	.word	0x200006fc
 80055bc:	080059ed 	.word	0x080059ed

080055c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80055c0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 80055c2:	f8d0 0590 	ldr.w	r0, [r0, #1424]	; 0x590
 80055c6:	f7fb fd57 	bl	8001078 <HAL_HCD_Start>
 80055ca:	2803      	cmp	r0, #3
 80055cc:	bf9a      	itte	ls
 80055ce:	4b02      	ldrls	r3, [pc, #8]	; (80055d8 <USBH_LL_Start+0x18>)
 80055d0:	5c18      	ldrbls	r0, [r3, r0]
 80055d2:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80055d4:	bd08      	pop	{r3, pc}
 80055d6:	bf00      	nop
 80055d8:	080059e9 	.word	0x080059e9

080055dc <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80055dc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 80055de:	f8d0 0590 	ldr.w	r0, [r0, #1424]	; 0x590
 80055e2:	f7fb fd5f 	bl	80010a4 <HAL_HCD_Stop>
 80055e6:	2803      	cmp	r0, #3
 80055e8:	bf9a      	itte	ls
 80055ea:	4b02      	ldrls	r3, [pc, #8]	; (80055f4 <USBH_LL_Stop+0x18>)
 80055ec:	5c18      	ldrbls	r0, [r3, r0]
 80055ee:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80055f0:	bd08      	pop	{r3, pc}
 80055f2:	bf00      	nop
 80055f4:	080059e9 	.word	0x080059e9

080055f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80055f8:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80055fa:	f8d0 0590 	ldr.w	r0, [r0, #1424]	; 0x590
 80055fe:	f7fb fd74 	bl	80010ea <HAL_HCD_GetCurrentSpeed>
 8005602:	2802      	cmp	r0, #2
 8005604:	bf9a      	itte	ls
 8005606:	4b02      	ldrls	r3, [pc, #8]	; (8005610 <USBH_LL_GetSpeed+0x18>)
 8005608:	5c18      	ldrbls	r0, [r3, r0]
 800560a:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 800560c:	bd08      	pop	{r3, pc}
 800560e:	bf00      	nop
 8005610:	080059e6 	.word	0x080059e6

08005614 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8005614:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8005616:	f8d0 0590 	ldr.w	r0, [r0, #1424]	; 0x590
 800561a:	f7fb fd55 	bl	80010c8 <HAL_HCD_ResetPort>
 800561e:	2803      	cmp	r0, #3
 8005620:	bf9a      	itte	ls
 8005622:	4b02      	ldrls	r3, [pc, #8]	; (800562c <USBH_LL_ResetPort+0x18>)
 8005624:	5c18      	ldrbls	r0, [r3, r0]
 8005626:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8005628:	bd08      	pop	{r3, pc}
 800562a:	bf00      	nop
 800562c:	080059e9 	.word	0x080059e9

08005630 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8005630:	f8d0 0590 	ldr.w	r0, [r0, #1424]	; 0x590
 8005634:	f7fb bd51 	b.w	80010da <HAL_HCD_HC_GetXferCount>

08005638 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800563a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800563e:	9402      	str	r4, [sp, #8]
 8005640:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8005644:	9401      	str	r4, [sp, #4]
 8005646:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800564a:	9400      	str	r4, [sp, #0]
 800564c:	f8d0 0590 	ldr.w	r0, [r0, #1424]	; 0x590
 8005650:	f7fb f905 	bl	800085e <HAL_HCD_HC_Init>
 8005654:	2803      	cmp	r0, #3
 8005656:	bf9a      	itte	ls
 8005658:	4b02      	ldrls	r3, [pc, #8]	; (8005664 <USBH_LL_OpenPipe+0x2c>)
 800565a:	5c18      	ldrbls	r0, [r3, r0]
 800565c:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800565e:	b004      	add	sp, #16
 8005660:	bd10      	pop	{r4, pc}
 8005662:	bf00      	nop
 8005664:	080059e9 	.word	0x080059e9

08005668 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005668:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800566a:	f8d0 0590 	ldr.w	r0, [r0, #1424]	; 0x590
 800566e:	f7fb f927 	bl	80008c0 <HAL_HCD_HC_Halt>
 8005672:	2803      	cmp	r0, #3
 8005674:	bf9a      	itte	ls
 8005676:	4b02      	ldrls	r3, [pc, #8]	; (8005680 <USBH_LL_ClosePipe+0x18>)
 8005678:	5c18      	ldrbls	r0, [r3, r0]
 800567a:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800567c:	bd08      	pop	{r3, pc}
 800567e:	bf00      	nop
 8005680:	080059e9 	.word	0x080059e9

08005684 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8005684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8005686:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800568a:	9403      	str	r4, [sp, #12]
 800568c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8005690:	9402      	str	r4, [sp, #8]
 8005692:	9c07      	ldr	r4, [sp, #28]
 8005694:	9401      	str	r4, [sp, #4]
 8005696:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800569a:	9400      	str	r4, [sp, #0]
 800569c:	f8d0 0590 	ldr.w	r0, [r0, #1424]	; 0x590
 80056a0:	f7fb f95c 	bl	800095c <HAL_HCD_HC_SubmitRequest>
 80056a4:	2803      	cmp	r0, #3
 80056a6:	bf9a      	itte	ls
 80056a8:	4b02      	ldrls	r3, [pc, #8]	; (80056b4 <USBH_LL_SubmitURB+0x30>)
 80056aa:	5c18      	ldrbls	r0, [r3, r0]
 80056ac:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80056ae:	b004      	add	sp, #16
 80056b0:	bd10      	pop	{r4, pc}
 80056b2:	bf00      	nop
 80056b4:	080059e9 	.word	0x080059e9

080056b8 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80056b8:	f8d0 0590 	ldr.w	r0, [r0, #1424]	; 0x590
 80056bc:	f7fb bd07 	b.w	80010ce <HAL_HCD_HC_GetURBState>

080056c0 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80056c0:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 80056c2:	f890 358c 	ldrb.w	r3, [r0, #1420]	; 0x58c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d102      	bne.n	80056d0 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 80056ca:	4608      	mov	r0, r1
 80056cc:	f000 f824 	bl	8005718 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80056d0:	20c8      	movs	r0, #200	; 0xc8
 80056d2:	f7fa ff51 	bl	8000578 <HAL_Delay>
  return USBH_OK;
}
 80056d6:	2000      	movs	r0, #0
 80056d8:	bd08      	pop	{r3, pc}

080056da <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80056da:	f8d0 0590 	ldr.w	r0, [r0, #1424]	; 0x590

  if(pHandle->hc[pipe].ep_is_in)
 80056de:	2328      	movs	r3, #40	; 0x28
 80056e0:	fb03 0101 	mla	r1, r3, r1, r0
 80056e4:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80056e8:	b11b      	cbz	r3, 80056f2 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80056ea:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 80056ee:	2000      	movs	r0, #0
 80056f0:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 80056f2:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 80056f6:	e7fa      	b.n	80056ee <USBH_LL_SetToggle+0x14>

080056f8 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80056f8:	f8d0 2590 	ldr.w	r2, [r0, #1424]	; 0x590

  if(pHandle->hc[pipe].ep_is_in)
 80056fc:	2328      	movs	r3, #40	; 0x28
 80056fe:	fb03 2101 	mla	r1, r3, r1, r2
 8005702:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8005706:	b113      	cbz	r3, 800570e <USBH_LL_GetToggle+0x16>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8005708:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 800570c:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800570e:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle;
}
 8005712:	4770      	bx	lr

08005714 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8005714:	f7fa bf30 	b.w	8000578 <HAL_Delay>

08005718 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8005718:	fab0 f280 	clz	r2, r0
 800571c:	0952      	lsrs	r2, r2, #5
 800571e:	2101      	movs	r1, #1
 8005720:	4801      	ldr	r0, [pc, #4]	; (8005728 <MX_DriverVbusFS+0x10>)
 8005722:	f7fb b897 	b.w	8000854 <HAL_GPIO_WritePin>
 8005726:	bf00      	nop
 8005728:	40020800 	.word	0x40020800

0800572c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800572c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005764 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005730:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005732:	e003      	b.n	800573c <LoopCopyDataInit>

08005734 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005734:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005736:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005738:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800573a:	3104      	adds	r1, #4

0800573c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800573c:	480b      	ldr	r0, [pc, #44]	; (800576c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800573e:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005740:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005742:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005744:	d3f6      	bcc.n	8005734 <CopyDataInit>
  ldr  r2, =_sbss
 8005746:	4a0b      	ldr	r2, [pc, #44]	; (8005774 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005748:	e002      	b.n	8005750 <LoopFillZerobss>

0800574a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800574a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800574c:	f842 3b04 	str.w	r3, [r2], #4

08005750 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005750:	4b09      	ldr	r3, [pc, #36]	; (8005778 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005752:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005754:	d3f9      	bcc.n	800574a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005756:	f7ff fe53 	bl	8005400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800575a:	f000 f811 	bl	8005780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800575e:	f7ff fd23 	bl	80051a8 <main>
  bx  lr    
 8005762:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005764:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005768:	08005a10 	.word	0x08005a10
  ldr  r0, =_sdata
 800576c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005770:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8005774:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 8005778:	20000998 	.word	0x20000998

0800577c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800577c:	e7fe      	b.n	800577c <ADC_IRQHandler>
	...

08005780 <__libc_init_array>:
 8005780:	b570      	push	{r4, r5, r6, lr}
 8005782:	4e0d      	ldr	r6, [pc, #52]	; (80057b8 <__libc_init_array+0x38>)
 8005784:	4c0d      	ldr	r4, [pc, #52]	; (80057bc <__libc_init_array+0x3c>)
 8005786:	1ba4      	subs	r4, r4, r6
 8005788:	10a4      	asrs	r4, r4, #2
 800578a:	2500      	movs	r5, #0
 800578c:	42a5      	cmp	r5, r4
 800578e:	d109      	bne.n	80057a4 <__libc_init_array+0x24>
 8005790:	4e0b      	ldr	r6, [pc, #44]	; (80057c0 <__libc_init_array+0x40>)
 8005792:	4c0c      	ldr	r4, [pc, #48]	; (80057c4 <__libc_init_array+0x44>)
 8005794:	f000 f908 	bl	80059a8 <_init>
 8005798:	1ba4      	subs	r4, r4, r6
 800579a:	10a4      	asrs	r4, r4, #2
 800579c:	2500      	movs	r5, #0
 800579e:	42a5      	cmp	r5, r4
 80057a0:	d105      	bne.n	80057ae <__libc_init_array+0x2e>
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057a8:	4798      	blx	r3
 80057aa:	3501      	adds	r5, #1
 80057ac:	e7ee      	b.n	800578c <__libc_init_array+0xc>
 80057ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057b2:	4798      	blx	r3
 80057b4:	3501      	adds	r5, #1
 80057b6:	e7f2      	b.n	800579e <__libc_init_array+0x1e>
 80057b8:	08005a08 	.word	0x08005a08
 80057bc:	08005a08 	.word	0x08005a08
 80057c0:	08005a08 	.word	0x08005a08
 80057c4:	08005a0c 	.word	0x08005a0c

080057c8 <malloc>:
 80057c8:	4b02      	ldr	r3, [pc, #8]	; (80057d4 <malloc+0xc>)
 80057ca:	4601      	mov	r1, r0
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	f000 b86d 	b.w	80058ac <_malloc_r>
 80057d2:	bf00      	nop
 80057d4:	200000ac 	.word	0x200000ac

080057d8 <free>:
 80057d8:	4b02      	ldr	r3, [pc, #8]	; (80057e4 <free+0xc>)
 80057da:	4601      	mov	r1, r0
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	f000 b817 	b.w	8005810 <_free_r>
 80057e2:	bf00      	nop
 80057e4:	200000ac 	.word	0x200000ac

080057e8 <memcpy>:
 80057e8:	b510      	push	{r4, lr}
 80057ea:	1e43      	subs	r3, r0, #1
 80057ec:	440a      	add	r2, r1
 80057ee:	4291      	cmp	r1, r2
 80057f0:	d100      	bne.n	80057f4 <memcpy+0xc>
 80057f2:	bd10      	pop	{r4, pc}
 80057f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057fc:	e7f7      	b.n	80057ee <memcpy+0x6>

080057fe <memset>:
 80057fe:	4402      	add	r2, r0
 8005800:	4603      	mov	r3, r0
 8005802:	4293      	cmp	r3, r2
 8005804:	d100      	bne.n	8005808 <memset+0xa>
 8005806:	4770      	bx	lr
 8005808:	f803 1b01 	strb.w	r1, [r3], #1
 800580c:	e7f9      	b.n	8005802 <memset+0x4>
	...

08005810 <_free_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	4605      	mov	r5, r0
 8005814:	2900      	cmp	r1, #0
 8005816:	d045      	beq.n	80058a4 <_free_r+0x94>
 8005818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800581c:	1f0c      	subs	r4, r1, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	bfb8      	it	lt
 8005822:	18e4      	addlt	r4, r4, r3
 8005824:	f000 f8b0 	bl	8005988 <__malloc_lock>
 8005828:	4a1f      	ldr	r2, [pc, #124]	; (80058a8 <_free_r+0x98>)
 800582a:	6813      	ldr	r3, [r2, #0]
 800582c:	4610      	mov	r0, r2
 800582e:	b933      	cbnz	r3, 800583e <_free_r+0x2e>
 8005830:	6063      	str	r3, [r4, #4]
 8005832:	6014      	str	r4, [r2, #0]
 8005834:	4628      	mov	r0, r5
 8005836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800583a:	f000 b8a6 	b.w	800598a <__malloc_unlock>
 800583e:	42a3      	cmp	r3, r4
 8005840:	d90c      	bls.n	800585c <_free_r+0x4c>
 8005842:	6821      	ldr	r1, [r4, #0]
 8005844:	1862      	adds	r2, r4, r1
 8005846:	4293      	cmp	r3, r2
 8005848:	bf04      	itt	eq
 800584a:	681a      	ldreq	r2, [r3, #0]
 800584c:	685b      	ldreq	r3, [r3, #4]
 800584e:	6063      	str	r3, [r4, #4]
 8005850:	bf04      	itt	eq
 8005852:	1852      	addeq	r2, r2, r1
 8005854:	6022      	streq	r2, [r4, #0]
 8005856:	6004      	str	r4, [r0, #0]
 8005858:	e7ec      	b.n	8005834 <_free_r+0x24>
 800585a:	4613      	mov	r3, r2
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	b10a      	cbz	r2, 8005864 <_free_r+0x54>
 8005860:	42a2      	cmp	r2, r4
 8005862:	d9fa      	bls.n	800585a <_free_r+0x4a>
 8005864:	6819      	ldr	r1, [r3, #0]
 8005866:	1858      	adds	r0, r3, r1
 8005868:	42a0      	cmp	r0, r4
 800586a:	d10b      	bne.n	8005884 <_free_r+0x74>
 800586c:	6820      	ldr	r0, [r4, #0]
 800586e:	4401      	add	r1, r0
 8005870:	1858      	adds	r0, r3, r1
 8005872:	4282      	cmp	r2, r0
 8005874:	6019      	str	r1, [r3, #0]
 8005876:	d1dd      	bne.n	8005834 <_free_r+0x24>
 8005878:	6810      	ldr	r0, [r2, #0]
 800587a:	6852      	ldr	r2, [r2, #4]
 800587c:	605a      	str	r2, [r3, #4]
 800587e:	4401      	add	r1, r0
 8005880:	6019      	str	r1, [r3, #0]
 8005882:	e7d7      	b.n	8005834 <_free_r+0x24>
 8005884:	d902      	bls.n	800588c <_free_r+0x7c>
 8005886:	230c      	movs	r3, #12
 8005888:	602b      	str	r3, [r5, #0]
 800588a:	e7d3      	b.n	8005834 <_free_r+0x24>
 800588c:	6820      	ldr	r0, [r4, #0]
 800588e:	1821      	adds	r1, r4, r0
 8005890:	428a      	cmp	r2, r1
 8005892:	bf04      	itt	eq
 8005894:	6811      	ldreq	r1, [r2, #0]
 8005896:	6852      	ldreq	r2, [r2, #4]
 8005898:	6062      	str	r2, [r4, #4]
 800589a:	bf04      	itt	eq
 800589c:	1809      	addeq	r1, r1, r0
 800589e:	6021      	streq	r1, [r4, #0]
 80058a0:	605c      	str	r4, [r3, #4]
 80058a2:	e7c7      	b.n	8005834 <_free_r+0x24>
 80058a4:	bd38      	pop	{r3, r4, r5, pc}
 80058a6:	bf00      	nop
 80058a8:	20000130 	.word	0x20000130

080058ac <_malloc_r>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	1ccd      	adds	r5, r1, #3
 80058b0:	f025 0503 	bic.w	r5, r5, #3
 80058b4:	3508      	adds	r5, #8
 80058b6:	2d0c      	cmp	r5, #12
 80058b8:	bf38      	it	cc
 80058ba:	250c      	movcc	r5, #12
 80058bc:	2d00      	cmp	r5, #0
 80058be:	4606      	mov	r6, r0
 80058c0:	db01      	blt.n	80058c6 <_malloc_r+0x1a>
 80058c2:	42a9      	cmp	r1, r5
 80058c4:	d903      	bls.n	80058ce <_malloc_r+0x22>
 80058c6:	230c      	movs	r3, #12
 80058c8:	6033      	str	r3, [r6, #0]
 80058ca:	2000      	movs	r0, #0
 80058cc:	bd70      	pop	{r4, r5, r6, pc}
 80058ce:	f000 f85b 	bl	8005988 <__malloc_lock>
 80058d2:	4a23      	ldr	r2, [pc, #140]	; (8005960 <_malloc_r+0xb4>)
 80058d4:	6814      	ldr	r4, [r2, #0]
 80058d6:	4621      	mov	r1, r4
 80058d8:	b991      	cbnz	r1, 8005900 <_malloc_r+0x54>
 80058da:	4c22      	ldr	r4, [pc, #136]	; (8005964 <_malloc_r+0xb8>)
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	b91b      	cbnz	r3, 80058e8 <_malloc_r+0x3c>
 80058e0:	4630      	mov	r0, r6
 80058e2:	f000 f841 	bl	8005968 <_sbrk_r>
 80058e6:	6020      	str	r0, [r4, #0]
 80058e8:	4629      	mov	r1, r5
 80058ea:	4630      	mov	r0, r6
 80058ec:	f000 f83c 	bl	8005968 <_sbrk_r>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d126      	bne.n	8005942 <_malloc_r+0x96>
 80058f4:	230c      	movs	r3, #12
 80058f6:	6033      	str	r3, [r6, #0]
 80058f8:	4630      	mov	r0, r6
 80058fa:	f000 f846 	bl	800598a <__malloc_unlock>
 80058fe:	e7e4      	b.n	80058ca <_malloc_r+0x1e>
 8005900:	680b      	ldr	r3, [r1, #0]
 8005902:	1b5b      	subs	r3, r3, r5
 8005904:	d41a      	bmi.n	800593c <_malloc_r+0x90>
 8005906:	2b0b      	cmp	r3, #11
 8005908:	d90f      	bls.n	800592a <_malloc_r+0x7e>
 800590a:	600b      	str	r3, [r1, #0]
 800590c:	50cd      	str	r5, [r1, r3]
 800590e:	18cc      	adds	r4, r1, r3
 8005910:	4630      	mov	r0, r6
 8005912:	f000 f83a 	bl	800598a <__malloc_unlock>
 8005916:	f104 000b 	add.w	r0, r4, #11
 800591a:	1d23      	adds	r3, r4, #4
 800591c:	f020 0007 	bic.w	r0, r0, #7
 8005920:	1ac3      	subs	r3, r0, r3
 8005922:	d01b      	beq.n	800595c <_malloc_r+0xb0>
 8005924:	425a      	negs	r2, r3
 8005926:	50e2      	str	r2, [r4, r3]
 8005928:	bd70      	pop	{r4, r5, r6, pc}
 800592a:	428c      	cmp	r4, r1
 800592c:	bf0d      	iteet	eq
 800592e:	6863      	ldreq	r3, [r4, #4]
 8005930:	684b      	ldrne	r3, [r1, #4]
 8005932:	6063      	strne	r3, [r4, #4]
 8005934:	6013      	streq	r3, [r2, #0]
 8005936:	bf18      	it	ne
 8005938:	460c      	movne	r4, r1
 800593a:	e7e9      	b.n	8005910 <_malloc_r+0x64>
 800593c:	460c      	mov	r4, r1
 800593e:	6849      	ldr	r1, [r1, #4]
 8005940:	e7ca      	b.n	80058d8 <_malloc_r+0x2c>
 8005942:	1cc4      	adds	r4, r0, #3
 8005944:	f024 0403 	bic.w	r4, r4, #3
 8005948:	42a0      	cmp	r0, r4
 800594a:	d005      	beq.n	8005958 <_malloc_r+0xac>
 800594c:	1a21      	subs	r1, r4, r0
 800594e:	4630      	mov	r0, r6
 8005950:	f000 f80a 	bl	8005968 <_sbrk_r>
 8005954:	3001      	adds	r0, #1
 8005956:	d0cd      	beq.n	80058f4 <_malloc_r+0x48>
 8005958:	6025      	str	r5, [r4, #0]
 800595a:	e7d9      	b.n	8005910 <_malloc_r+0x64>
 800595c:	bd70      	pop	{r4, r5, r6, pc}
 800595e:	bf00      	nop
 8005960:	20000130 	.word	0x20000130
 8005964:	20000134 	.word	0x20000134

08005968 <_sbrk_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4c06      	ldr	r4, [pc, #24]	; (8005984 <_sbrk_r+0x1c>)
 800596c:	2300      	movs	r3, #0
 800596e:	4605      	mov	r5, r0
 8005970:	4608      	mov	r0, r1
 8005972:	6023      	str	r3, [r4, #0]
 8005974:	f000 f80a 	bl	800598c <_sbrk>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	d102      	bne.n	8005982 <_sbrk_r+0x1a>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	b103      	cbz	r3, 8005982 <_sbrk_r+0x1a>
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	bd38      	pop	{r3, r4, r5, pc}
 8005984:	20000994 	.word	0x20000994

08005988 <__malloc_lock>:
 8005988:	4770      	bx	lr

0800598a <__malloc_unlock>:
 800598a:	4770      	bx	lr

0800598c <_sbrk>:
 800598c:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <_sbrk+0x14>)
 800598e:	6819      	ldr	r1, [r3, #0]
 8005990:	4602      	mov	r2, r0
 8005992:	b909      	cbnz	r1, 8005998 <_sbrk+0xc>
 8005994:	4903      	ldr	r1, [pc, #12]	; (80059a4 <_sbrk+0x18>)
 8005996:	6019      	str	r1, [r3, #0]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	4402      	add	r2, r0
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	4770      	bx	lr
 80059a0:	20000138 	.word	0x20000138
 80059a4:	20000998 	.word	0x20000998

080059a8 <_init>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr

080059b4 <_fini>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr
